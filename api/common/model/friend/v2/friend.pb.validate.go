// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/model/friend/v2/friend.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FriendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendRequestMultiError, or
// nil if none found.
func (m *FriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for ToUserID

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Phone

	// no validation rules for Gender

	// no validation rules for HandleResult

	// no validation rules for ReqMsg

	// no validation rules for CreateTime

	// no validation rules for HandlerUserID

	// no validation rules for HandleMsg

	// no validation rules for HandleTime

	// no validation rules for Ex

	if len(errors) > 0 {
		return FriendRequestMultiError(errors)
	}

	return nil
}

// FriendRequestMultiError is an error wrapping multiple validation errors
// returned by FriendRequest.ValidateAll() if the designated constraints
// aren't met.
type FriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendRequestMultiError) AllErrors() []error { return m }

// FriendRequestValidationError is the validation error returned by
// FriendRequest.Validate if the designated constraints aren't met.
type FriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendRequestValidationError) ErrorName() string { return "FriendRequestValidationError" }

// Error satisfies the builtin error interface
func (e FriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendRequestValidationError{}

// Validate checks the field values on FriendInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendInfoMultiError, or
// nil if none found.
func (m *FriendInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for FriendUserID

	// no validation rules for Nickname

	// no validation rules for Phone

	// no validation rules for FaceURL

	// no validation rules for OperatorUserID

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Email

	// no validation rules for Birth

	// no validation rules for Gender

	// no validation rules for AddSource

	// no validation rules for Ex

	// no validation rules for BackgroundUrl

	// no validation rules for NotPeersFriend

	// no validation rules for IsComplete

	// no validation rules for IsDestroyMsg

	// no validation rules for UpdateAt

	if len(errors) > 0 {
		return FriendInfoMultiError(errors)
	}

	return nil
}

// FriendInfoMultiError is an error wrapping multiple validation errors
// returned by FriendInfo.ValidateAll() if the designated constraints aren't met.
type FriendInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendInfoMultiError) AllErrors() []error { return m }

// FriendInfoValidationError is the validation error returned by
// FriendInfo.Validate if the designated constraints aren't met.
type FriendInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendInfoValidationError) ErrorName() string { return "FriendInfoValidationError" }

// Error satisfies the builtin error interface
func (e FriendInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendInfoValidationError{}

// Validate checks the field values on BlackInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlackInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlackInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlackInfoMultiError, or nil
// if none found.
func (m *BlackInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BlackInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ex

	// no validation rules for FaceURL

	// no validation rules for Gender

	// no validation rules for Nickname

	// no validation rules for BlackUserID

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for CreatedAt

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return BlackInfoMultiError(errors)
	}

	return nil
}

// BlackInfoMultiError is an error wrapping multiple validation errors returned
// by BlackInfo.ValidateAll() if the designated constraints aren't met.
type BlackInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlackInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlackInfoMultiError) AllErrors() []error { return m }

// BlackInfoValidationError is the validation error returned by
// BlackInfo.Validate if the designated constraints aren't met.
type BlackInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlackInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlackInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlackInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlackInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlackInfoValidationError) ErrorName() string { return "BlackInfoValidationError" }

// Error satisfies the builtin error interface
func (e BlackInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlackInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlackInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlackInfoValidationError{}
