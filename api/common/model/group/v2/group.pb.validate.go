// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/model/group/v2/group.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupInfoMultiError, or nil
// if none found.
func (m *GroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for GroupName

	// no validation rules for Notification

	// no validation rules for Introduction

	// no validation rules for FaceURL

	// no validation rules for OwnerUserID

	// no validation rules for CreateTime

	// no validation rules for MemberCount

	// no validation rules for Ex

	// no validation rules for Status

	// no validation rules for CreatorUserID

	// no validation rules for GroupType

	// no validation rules for NeedVerification

	// no validation rules for LookMemberInfo

	// no validation rules for ApplyMemberFriend

	// no validation rules for NotificationUpdateTime

	// no validation rules for NotificationUserID

	// no validation rules for Code

	// no validation rules for MaxMemberCount

	// no validation rules for AttachedInfo

	// no validation rules for OnlyManageUpdateName

	// no validation rules for IsReal

	// no validation rules for IsOpen

	// no validation rules for AllowPrivateChat

	// no validation rules for IsComplete

	// no validation rules for OwnerCode

	// no validation rules for OwnerNickname

	// no validation rules for CreateCode

	// no validation rules for CreateNickname

	// no validation rules for UpdateAt

	if len(errors) > 0 {
		return GroupInfoMultiError(errors)
	}

	return nil
}

// GroupInfoMultiError is an error wrapping multiple validation errors returned
// by GroupInfo.ValidateAll() if the designated constraints aren't met.
type GroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupInfoMultiError) AllErrors() []error { return m }

// GroupInfoValidationError is the validation error returned by
// GroupInfo.Validate if the designated constraints aren't met.
type GroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupInfoValidationError) ErrorName() string { return "GroupInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupInfoValidationError{}

// Validate checks the field values on GroupRequestInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupRequestInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRequestInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRequestInfoMultiError, or nil if none found.
func (m *GroupRequestInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRequestInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for GroupName

	// no validation rules for Notification

	// no validation rules for Introduction

	// no validation rules for GroupFaceURL

	// no validation rules for CreateTime

	// no validation rules for Status

	// no validation rules for CreatorUserID

	// no validation rules for GroupType

	// no validation rules for OwnerUserID

	// no validation rules for MemberCount

	// no validation rules for GroupCode

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for UserFaceURL

	// no validation rules for Gender

	// no validation rules for Code

	// no validation rules for HandleResult

	// no validation rules for ReqMsg

	// no validation rules for HandledMsg

	// no validation rules for ReqTime

	// no validation rules for HandleUserID

	// no validation rules for HandledTime

	// no validation rules for Ex

	// no validation rules for AttachedInfo

	// no validation rules for JoinSource

	// no validation rules for InviterUserID

	if len(errors) > 0 {
		return GroupRequestInfoMultiError(errors)
	}

	return nil
}

// GroupRequestInfoMultiError is an error wrapping multiple validation errors
// returned by GroupRequestInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupRequestInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRequestInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRequestInfoMultiError) AllErrors() []error { return m }

// GroupRequestInfoValidationError is the validation error returned by
// GroupRequestInfo.Validate if the designated constraints aren't met.
type GroupRequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRequestInfoValidationError) ErrorName() string { return "GroupRequestInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupRequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRequestInfoValidationError{}

// Validate checks the field values on BaseGroupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseGroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseGroupInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseGroupInfoMultiError, or
// nil if none found.
func (m *BaseGroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseGroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for FaceURL

	// no validation rules for NickName

	// no validation rules for MemberCount

	// no validation rules for GroupType

	// no validation rules for Status

	// no validation rules for UpdateAt

	// no validation rules for Code

	// no validation rules for OwnerUserID

	// no validation rules for CreatorUserID

	if len(errors) > 0 {
		return BaseGroupInfoMultiError(errors)
	}

	return nil
}

// BaseGroupInfoMultiError is an error wrapping multiple validation errors
// returned by BaseGroupInfo.ValidateAll() if the designated constraints
// aren't met.
type BaseGroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseGroupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseGroupInfoMultiError) AllErrors() []error { return m }

// BaseGroupInfoValidationError is the validation error returned by
// BaseGroupInfo.Validate if the designated constraints aren't met.
type BaseGroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseGroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseGroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseGroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseGroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseGroupInfoValidationError) ErrorName() string { return "BaseGroupInfoValidationError" }

// Error satisfies the builtin error interface
func (e BaseGroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseGroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseGroupInfoValidationError{}

// Validate checks the field values on MemberInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberInfoMultiError, or
// nil if none found.
func (m *MemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	// no validation rules for RoleLevel

	// no validation rules for JoinTime

	// no validation rules for Nickname

	// no validation rules for FaceUrl

	// no validation rules for AttachedInfo

	// no validation rules for JoinSource

	// no validation rules for OperatorUserID

	// no validation rules for Ex

	// no validation rules for MuteEndTime

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Birth

	// no validation rules for Gender

	// no validation rules for InviterUserID

	// no validation rules for GroupUserName

	// no validation rules for BackgroundUrl

	// no validation rules for UpdateAt

	if len(errors) > 0 {
		return MemberInfoMultiError(errors)
	}

	return nil
}

// MemberInfoMultiError is an error wrapping multiple validation errors
// returned by MemberInfo.ValidateAll() if the designated constraints aren't met.
type MemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberInfoMultiError) AllErrors() []error { return m }

// MemberInfoValidationError is the validation error returned by
// MemberInfo.Validate if the designated constraints aren't met.
type MemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberInfoValidationError) ErrorName() string { return "MemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e MemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberInfoValidationError{}

// Validate checks the field values on GroupAbstractInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupAbstractInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupAbstractInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupAbstractInfoMultiError, or nil if none found.
func (m *GroupAbstractInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupAbstractInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for GroupMemberNumber

	// no validation rules for GroupMemberListHash

	if len(errors) > 0 {
		return GroupAbstractInfoMultiError(errors)
	}

	return nil
}

// GroupAbstractInfoMultiError is an error wrapping multiple validation errors
// returned by GroupAbstractInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupAbstractInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupAbstractInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupAbstractInfoMultiError) AllErrors() []error { return m }

// GroupAbstractInfoValidationError is the validation error returned by
// GroupAbstractInfo.Validate if the designated constraints aren't met.
type GroupAbstractInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupAbstractInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupAbstractInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupAbstractInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupAbstractInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupAbstractInfoValidationError) ErrorName() string {
	return "GroupAbstractInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GroupAbstractInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupAbstractInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupAbstractInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupAbstractInfoValidationError{}

// Validate checks the field values on GetByGroupListSdk with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByGroupListSdk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByGroupListSdk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByGroupListSdkMultiError, or nil if none found.
func (m *GetByGroupListSdk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByGroupListSdk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByGroupListSdkValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByGroupListSdkValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByGroupListSdkValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByGroupListSdkMultiError(errors)
	}

	return nil
}

// GetByGroupListSdkMultiError is an error wrapping multiple validation errors
// returned by GetByGroupListSdk.ValidateAll() if the designated constraints
// aren't met.
type GetByGroupListSdkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByGroupListSdkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByGroupListSdkMultiError) AllErrors() []error { return m }

// GetByGroupListSdkValidationError is the validation error returned by
// GetByGroupListSdk.Validate if the designated constraints aren't met.
type GetByGroupListSdkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByGroupListSdkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByGroupListSdkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByGroupListSdkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByGroupListSdkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByGroupListSdkValidationError) ErrorName() string {
	return "GetByGroupListSdkValidationError"
}

// Error satisfies the builtin error interface
func (e GetByGroupListSdkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByGroupListSdk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByGroupListSdkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByGroupListSdkValidationError{}
