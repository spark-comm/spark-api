// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/model/v2/node.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NodeBase with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeBase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeBase with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeBaseMultiError, or nil
// if none found.
func (m *NodeBase) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeBase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for MasterApi

	// no validation rules for SlaveApi

	// no validation rules for ManageApi

	// no validation rules for ImApiUrl

	// no validation rules for ImWsUrl

	// no validation rules for Version

	// no validation rules for AvAppid

	// no validation rules for AvSecret

	// no validation rules for Logo

	// no validation rules for NodeType

	// no validation rules for PromotionCode

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Status

	// no validation rules for Sort

	// no validation rules for MasterNodeId

	if len(errors) > 0 {
		return NodeBaseMultiError(errors)
	}

	return nil
}

// NodeBaseMultiError is an error wrapping multiple validation errors returned
// by NodeBase.ValidateAll() if the designated constraints aren't met.
type NodeBaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeBaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeBaseMultiError) AllErrors() []error { return m }

// NodeBaseValidationError is the validation error returned by
// NodeBase.Validate if the designated constraints aren't met.
type NodeBaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeBaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeBaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeBaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeBaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeBaseValidationError) ErrorName() string { return "NodeBaseValidationError" }

// Error satisfies the builtin error interface
func (e NodeBaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeBase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeBaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeBaseValidationError{}

// Validate checks the field values on TenantDistributeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantDistributeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantDistributeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantDistributeInfoMultiError, or nil if none found.
func (m *TenantDistributeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantDistributeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for AssociatedUserID

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Introduce

	// no validation rules for WebsiteAddress

	// no validation rules for WebsiteStatus

	// no validation rules for PackageType

	// no validation rules for MaxNumber

	// no validation rules for MaxGroupNumber

	// no validation rules for Phone

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Code

	// no validation rules for PubKey

	// no validation rules for PriKey

	if len(errors) > 0 {
		return TenantDistributeInfoMultiError(errors)
	}

	return nil
}

// TenantDistributeInfoMultiError is an error wrapping multiple validation
// errors returned by TenantDistributeInfo.ValidateAll() if the designated
// constraints aren't met.
type TenantDistributeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantDistributeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantDistributeInfoMultiError) AllErrors() []error { return m }

// TenantDistributeInfoValidationError is the validation error returned by
// TenantDistributeInfo.Validate if the designated constraints aren't met.
type TenantDistributeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantDistributeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantDistributeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantDistributeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantDistributeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantDistributeInfoValidationError) ErrorName() string {
	return "TenantDistributeInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TenantDistributeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantDistributeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantDistributeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantDistributeInfoValidationError{}

// Validate checks the field values on TenantEscalationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantEscalationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantEscalationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantEscalationInfoMultiError, or nil if none found.
func (m *TenantEscalationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantEscalationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for AssociatedUsersID

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Introduce

	// no validation rules for WebsiteAddress

	// no validation rules for WebsiteStatus

	// no validation rules for MaxNumber

	// no validation rules for MaxGroupNumber

	// no validation rules for Phone

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return TenantEscalationInfoMultiError(errors)
	}

	return nil
}

// TenantEscalationInfoMultiError is an error wrapping multiple validation
// errors returned by TenantEscalationInfo.ValidateAll() if the designated
// constraints aren't met.
type TenantEscalationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantEscalationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantEscalationInfoMultiError) AllErrors() []error { return m }

// TenantEscalationInfoValidationError is the validation error returned by
// TenantEscalationInfo.Validate if the designated constraints aren't met.
type TenantEscalationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantEscalationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantEscalationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantEscalationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantEscalationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantEscalationInfoValidationError) ErrorName() string {
	return "TenantEscalationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TenantEscalationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantEscalationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantEscalationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantEscalationInfoValidationError{}

// Validate checks the field values on NodeMasterSyncInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NodeMasterSyncInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeMasterSyncInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeMasterSyncInfoMultiError, or nil if none found.
func (m *NodeMasterSyncInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeMasterSyncInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Enable

	// no validation rules for MasterApi

	// no validation rules for MasterPubKey

	// no validation rules for Functions

	// no validation rules for NodePriKey

	if len(errors) > 0 {
		return NodeMasterSyncInfoMultiError(errors)
	}

	return nil
}

// NodeMasterSyncInfoMultiError is an error wrapping multiple validation errors
// returned by NodeMasterSyncInfo.ValidateAll() if the designated constraints
// aren't met.
type NodeMasterSyncInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMasterSyncInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMasterSyncInfoMultiError) AllErrors() []error { return m }

// NodeMasterSyncInfoValidationError is the validation error returned by
// NodeMasterSyncInfo.Validate if the designated constraints aren't met.
type NodeMasterSyncInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeMasterSyncInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeMasterSyncInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeMasterSyncInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeMasterSyncInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeMasterSyncInfoValidationError) ErrorName() string {
	return "NodeMasterSyncInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NodeMasterSyncInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeMasterSyncInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeMasterSyncInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeMasterSyncInfoValidationError{}

// Validate checks the field values on NodeMasterSyncInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NodeMasterSyncInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeMasterSyncInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeMasterSyncInfoReqMultiError, or nil if none found.
func (m *NodeMasterSyncInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeMasterSyncInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return NodeMasterSyncInfoReqMultiError(errors)
	}

	return nil
}

// NodeMasterSyncInfoReqMultiError is an error wrapping multiple validation
// errors returned by NodeMasterSyncInfoReq.ValidateAll() if the designated
// constraints aren't met.
type NodeMasterSyncInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMasterSyncInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMasterSyncInfoReqMultiError) AllErrors() []error { return m }

// NodeMasterSyncInfoReqValidationError is the validation error returned by
// NodeMasterSyncInfoReq.Validate if the designated constraints aren't met.
type NodeMasterSyncInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeMasterSyncInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeMasterSyncInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeMasterSyncInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeMasterSyncInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeMasterSyncInfoReqValidationError) ErrorName() string {
	return "NodeMasterSyncInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e NodeMasterSyncInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeMasterSyncInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeMasterSyncInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeMasterSyncInfoReqValidationError{}
