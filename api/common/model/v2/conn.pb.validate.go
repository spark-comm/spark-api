// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/model/v2/conn.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for No

	// no validation rules for Size

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on Conn with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Conn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConnMultiError, or nil if none found.
func (m *Conn) ValidateAll() error {
	return m.validate(true)
}

func (m *Conn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RpcAddr

	// no validation rules for Platform

	// no validation rules for UserID

	// no validation rules for Token

	// no validation rules for ConnID

	// no validation rules for IsBackground

	// no validation rules for Language

	// no validation rules for TenantId

	if len(errors) > 0 {
		return ConnMultiError(errors)
	}

	return nil
}

// ConnMultiError is an error wrapping multiple validation errors returned by
// Conn.ValidateAll() if the designated constraints aren't met.
type ConnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnMultiError) AllErrors() []error { return m }

// ConnValidationError is the validation error returned by Conn.Validate if the
// designated constraints aren't met.
type ConnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnValidationError) ErrorName() string { return "ConnValidationError" }

// Error satisfies the builtin error interface
func (e ConnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnValidationError{}

// Validate checks the field values on SetBackgroundStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetBackgroundStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetBackgroundStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetBackgroundStatusReqMultiError, or nil if none found.
func (m *SetBackgroundStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetBackgroundStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsBackground

	if len(errors) > 0 {
		return SetBackgroundStatusReqMultiError(errors)
	}

	return nil
}

// SetBackgroundStatusReqMultiError is an error wrapping multiple validation
// errors returned by SetBackgroundStatusReq.ValidateAll() if the designated
// constraints aren't met.
type SetBackgroundStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetBackgroundStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetBackgroundStatusReqMultiError) AllErrors() []error { return m }

// SetBackgroundStatusReqValidationError is the validation error returned by
// SetBackgroundStatusReq.Validate if the designated constraints aren't met.
type SetBackgroundStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetBackgroundStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetBackgroundStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetBackgroundStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetBackgroundStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetBackgroundStatusReqValidationError) ErrorName() string {
	return "SetBackgroundStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetBackgroundStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetBackgroundStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetBackgroundStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetBackgroundStatusReqValidationError{}

// Validate checks the field values on SetLanguageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetLanguageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLanguageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetLanguageReqMultiError,
// or nil if none found.
func (m *SetLanguageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLanguageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLanguage()) < 1 {
		err := SetLanguageReqValidationError{
			field:  "Language",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetLanguageReqMultiError(errors)
	}

	return nil
}

// SetLanguageReqMultiError is an error wrapping multiple validation errors
// returned by SetLanguageReq.ValidateAll() if the designated constraints
// aren't met.
type SetLanguageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLanguageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLanguageReqMultiError) AllErrors() []error { return m }

// SetLanguageReqValidationError is the validation error returned by
// SetLanguageReq.Validate if the designated constraints aren't met.
type SetLanguageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLanguageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLanguageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLanguageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLanguageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLanguageReqValidationError) ErrorName() string { return "SetLanguageReqValidationError" }

// Error satisfies the builtin error interface
func (e SetLanguageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLanguageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLanguageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLanguageReqValidationError{}

// Validate checks the field values on EncryptionReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EncryptionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EncryptionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EncryptionReplyMultiError, or nil if none found.
func (m *EncryptionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EncryptionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EncryptionReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EncryptionReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncryptionReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EncryptionReplyMultiError(errors)
	}

	return nil
}

// EncryptionReplyMultiError is an error wrapping multiple validation errors
// returned by EncryptionReply.ValidateAll() if the designated constraints
// aren't met.
type EncryptionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EncryptionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EncryptionReplyMultiError) AllErrors() []error { return m }

// EncryptionReplyValidationError is the validation error returned by
// EncryptionReply.Validate if the designated constraints aren't met.
type EncryptionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptionReplyValidationError) ErrorName() string { return "EncryptionReplyValidationError" }

// Error satisfies the builtin error interface
func (e EncryptionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptionReplyValidationError{}

// Validate checks the field values on SingedMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SingedMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingedMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SingedMsgMultiError, or nil
// if none found.
func (m *SingedMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *SingedMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Sign

	if len(errors) > 0 {
		return SingedMsgMultiError(errors)
	}

	return nil
}

// SingedMsgMultiError is an error wrapping multiple validation errors returned
// by SingedMsg.ValidateAll() if the designated constraints aren't met.
type SingedMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingedMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingedMsgMultiError) AllErrors() []error { return m }

// SingedMsgValidationError is the validation error returned by
// SingedMsg.Validate if the designated constraints aren't met.
type SingedMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingedMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingedMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingedMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingedMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingedMsgValidationError) ErrorName() string { return "SingedMsgValidationError" }

// Error satisfies the builtin error interface
func (e SingedMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingedMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingedMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingedMsgValidationError{}

// Validate checks the field values on EscalationData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EscalationData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EscalationData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EscalationDataMultiError,
// or nil if none found.
func (m *EscalationData) ValidateAll() error {
	return m.validate(true)
}

func (m *EscalationData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EscalationDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EscalationDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EscalationDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EscalationDataMultiError(errors)
	}

	return nil
}

// EscalationDataMultiError is an error wrapping multiple validation errors
// returned by EscalationData.ValidateAll() if the designated constraints
// aren't met.
type EscalationDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EscalationDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EscalationDataMultiError) AllErrors() []error { return m }

// EscalationDataValidationError is the validation error returned by
// EscalationData.Validate if the designated constraints aren't met.
type EscalationDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EscalationDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EscalationDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EscalationDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EscalationDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EscalationDataValidationError) ErrorName() string { return "EscalationDataValidationError" }

// Error satisfies the builtin error interface
func (e EscalationDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEscalationData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EscalationDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EscalationDataValidationError{}
