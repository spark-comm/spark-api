// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: user_center/auth/v2/auth.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Auth_Register_FullMethodName         = "/api.user_center.auth.v2.Auth/Register"
	Auth_Login_FullMethodName            = "/api.user_center.auth.v2.Auth/Login"
	Auth_RefToken_FullMethodName         = "/api.user_center.auth.v2.Auth/RefToken"
	Auth_VerifyToken_FullMethodName      = "/api.user_center.auth.v2.Auth/VerifyToken"
	Auth_DestructionToken_FullMethodName = "/api.user_center.auth.v2.Auth/DestructionToken"
	Auth_SendCode_FullMethodName         = "/api.user_center.auth.v2.Auth/SendCode"
	Auth_VerifyCode_FullMethodName       = "/api.user_center.auth.v2.Auth/VerifyCode"
	Auth_UpdatePassword_FullMethodName   = "/api.user_center.auth.v2.Auth/UpdatePassword"
	Auth_RealNameAuth_FullMethodName     = "/api.user_center.auth.v2.Auth/RealNameAuth"
	Auth_Binding_FullMethodName          = "/api.user_center.auth.v2.Auth/Binding"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 注册
type AuthClient interface {
	// 账号注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// 账号登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 刷新 token
	RefToken(ctx context.Context, in *RefTokenReq, opts ...grpc.CallOption) (*RefTokenReply, error)
	// 验证 token
	VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenReply, error)
	// 销毁token
	DestructionToken(ctx context.Context, in *DestructionTokenReq, opts ...grpc.CallOption) (*DestructionTokenReply, error)
	// 发送验证码
	SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeReply, error)
	// 验证 code
	VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeReply, error)
	// 修改密码
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordReply, error)
	// 实名认证
	RealNameAuth(ctx context.Context, in *RealNameAuthReq, opts ...grpc.CallOption) (*RealNameAuthReply, error)
	// 绑定手机号或邮箱
	Binding(ctx context.Context, in *BindingReq, opts ...grpc.CallOption) (*BindingReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, Auth_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefToken(ctx context.Context, in *RefTokenReq, opts ...grpc.CallOption) (*RefTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefTokenReply)
	err := c.cc.Invoke(ctx, Auth_RefToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenReply)
	err := c.cc.Invoke(ctx, Auth_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DestructionToken(ctx context.Context, in *DestructionTokenReq, opts ...grpc.CallOption) (*DestructionTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestructionTokenReply)
	err := c.cc.Invoke(ctx, Auth_DestructionToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCodeReply)
	err := c.cc.Invoke(ctx, Auth_SendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyCodeReply)
	err := c.cc.Invoke(ctx, Auth_VerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordReply)
	err := c.cc.Invoke(ctx, Auth_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RealNameAuth(ctx context.Context, in *RealNameAuthReq, opts ...grpc.CallOption) (*RealNameAuthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealNameAuthReply)
	err := c.cc.Invoke(ctx, Auth_RealNameAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Binding(ctx context.Context, in *BindingReq, opts ...grpc.CallOption) (*BindingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindingReply)
	err := c.cc.Invoke(ctx, Auth_Binding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
//
// 注册
type AuthServer interface {
	// 账号注册
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	// 账号登录
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// 刷新 token
	RefToken(context.Context, *RefTokenReq) (*RefTokenReply, error)
	// 验证 token
	VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenReply, error)
	// 销毁token
	DestructionToken(context.Context, *DestructionTokenReq) (*DestructionTokenReply, error)
	// 发送验证码
	SendCode(context.Context, *SendCodeReq) (*SendCodeReply, error)
	// 验证 code
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeReply, error)
	// 修改密码
	UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordReply, error)
	// 实名认证
	RealNameAuth(context.Context, *RealNameAuthReq) (*RealNameAuthReply, error)
	// 绑定手机号或邮箱
	Binding(context.Context, *BindingReq) (*BindingReply, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) RefToken(context.Context, *RefTokenReq) (*RefTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefToken not implemented")
}
func (UnimplementedAuthServer) VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedAuthServer) DestructionToken(context.Context, *DestructionTokenReq) (*DestructionTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestructionToken not implemented")
}
func (UnimplementedAuthServer) SendCode(context.Context, *SendCodeReq) (*SendCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedAuthServer) VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedAuthServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAuthServer) RealNameAuth(context.Context, *RealNameAuthReq) (*RealNameAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealNameAuth not implemented")
}
func (UnimplementedAuthServer) Binding(context.Context, *BindingReq) (*BindingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Binding not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RefToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefToken(ctx, req.(*RefTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyToken(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DestructionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestructionTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DestructionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DestructionToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DestructionToken(ctx, req.(*DestructionTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyCode(ctx, req.(*VerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RealNameAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RealNameAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RealNameAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RealNameAuth(ctx, req.(*RealNameAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Binding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Binding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Binding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Binding(ctx, req.(*BindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user_center.auth.v2.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "RefToken",
			Handler:    _Auth_RefToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _Auth_VerifyToken_Handler,
		},
		{
			MethodName: "DestructionToken",
			Handler:    _Auth_DestructionToken_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _Auth_SendCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Auth_VerifyCode_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Auth_UpdatePassword_Handler,
		},
		{
			MethodName: "RealNameAuth",
			Handler:    _Auth_RealNameAuth_Handler,
		},
		{
			MethodName: "Binding",
			Handler:    _Auth_Binding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center/auth/v2/auth.proto",
}
