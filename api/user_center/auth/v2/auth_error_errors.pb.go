// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsReasonParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_PARAMS.String() && e.Code == 400
}

// 为某个枚举单独设置错误码
func ErrorReasonParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 系统错误
func IsReasonSystem(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_SYSTEM.String() && e.Code == 500
}

// 系统错误
func ErrorReasonSystem(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REASON_SYSTEM.String(), fmt.Sprintf(format, args...))
}

// 用户名或者密码错误
func IsReasonNameOrPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_NAME_OR_PASSWORD.String() && e.Code == 400
}

// 用户名或者密码错误
func ErrorReasonNameOrPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_NAME_OR_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 验证码错误
func IsReasonCodeIsInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_CODE_IS_INVALID.String() && e.Code == 400
}

// 验证码错误
func ErrorReasonCodeIsInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_CODE_IS_INVALID.String(), fmt.Sprintf(format, args...))
}

// 登录失败,用户状态异常
func IsReasonLoginStatus(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_LOGIN_STATUS.String() && e.Code == 500
}

// 登录失败,用户状态异常
func ErrorReasonLoginStatus(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REASON_LOGIN_STATUS.String(), fmt.Sprintf(format, args...))
}

// token 验证失败
func IsReasonTokenVerify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_TOKEN_VERIFY.String() && e.Code == 400
}

// token 验证失败
func ErrorReasonTokenVerify(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_TOKEN_VERIFY.String(), fmt.Sprintf(format, args...))
}

// token 刷新失败
func IsReasonTokenRefresh(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_TOKEN_REFRESH.String() && e.Code == 400
}

// token 刷新失败
func ErrorReasonTokenRefresh(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_TOKEN_REFRESH.String(), fmt.Sprintf(format, args...))
}

// 验证码类型错误
func IsReasonCodeType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_CODE_TYPE.String() && e.Code == 400
}

// 验证码类型错误
func ErrorReasonCodeType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_CODE_TYPE.String(), fmt.Sprintf(format, args...))
}

// 验证码错误
func IsReasonVerifyCodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_VERIFY_CODE_ERROR.String() && e.Code == 400
}

// 验证码错误
func ErrorReasonVerifyCodeError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_VERIFY_CODE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 用户禁用
func IsUserDisableLogin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLE_LOGIN.String() && e.Code == 500
}

// 用户禁用
func ErrorUserDisableLogin(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_DISABLE_LOGIN.String(), fmt.Sprintf(format, args...))
}

// 验证码已过期
func IsVerificationCodeHasExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VERIFICATION_CODE_HAS_EXPIRED.String() && e.Code == 500
}

// 验证码已过期
func ErrorVerificationCodeHasExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_VERIFICATION_CODE_HAS_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 注册账号失败
func IsRegisterAccountError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REGISTER_ACCOUNT_ERROR.String() && e.Code == 500
}

// 注册账号失败
func ErrorRegisterAccountError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REGISTER_ACCOUNT_ERROR.String(), fmt.Sprintf(format, args...))
}

// 更新密码失败
func IsUpdateAccountPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_ACCOUNT_PASSWORD_ERROR.String() && e.Code == 500
}

// 更新密码失败
func ErrorUpdateAccountPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_ACCOUNT_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

// 用户不存在
func IsUserNotFond(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOND.String() && e.Code == 500
}

// 用户不存在
func ErrorUserNotFond(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NOT_FOND.String(), fmt.Sprintf(format, args...))
}

// 密码为空
func IsPasswordIsEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_IS_EMPTY.String() && e.Code == 400
}

// 密码为空
func ErrorPasswordIsEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_IS_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 用户已经实名认证过
func IsUserHadRealNamed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_HAD_REAL_NAMED.String() && e.Code == 400
}

// 用户已经实名认证过
func ErrorUserHadRealNamed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_HAD_REAL_NAMED.String(), fmt.Sprintf(format, args...))
}

// 身份证号已被其他账号绑定
func IsIdCardHasBindToAnother(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ID_CARD_HAS_BIND_TO_ANOTHER.String() && e.Code == 400
}

// 身份证号已被其他账号绑定
func ErrorIdCardHasBindToAnother(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ID_CARD_HAS_BIND_TO_ANOTHER.String(), fmt.Sprintf(format, args...))
}

// 实名认证失败
func IsRealNameFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REAL_NAME_FAILED.String() && e.Code == 500
}

// 实名认证失败
func ErrorRealNameFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REAL_NAME_FAILED.String(), fmt.Sprintf(format, args...))
}

// 身份认证接口调用失败
func IsCallIdentifyInterfaceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CALL_IDENTIFY_INTERFACE_FAILED.String() && e.Code == 500
}

// 身份认证接口调用失败
func ErrorCallIdentifyInterfaceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CALL_IDENTIFY_INTERFACE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 输入手机号与当前绑定手机号码不一致
func IsInputPhoneNotIsUserBindingPhone(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INPUT_PHONE_NOT_IS_USER_BINDING_PHONE.String() && e.Code == 400
}

// 输入手机号与当前绑定手机号码不一致
func ErrorInputPhoneNotIsUserBindingPhone(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INPUT_PHONE_NOT_IS_USER_BINDING_PHONE.String(), fmt.Sprintf(format, args...))
}

// 邮箱格式不正确
func IsEmailFormatIsCorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_FORMAT_IS_CORRECT.String() && e.Code == 400
}

// 邮箱格式不正确
func ErrorEmailFormatIsCorrect(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_EMAIL_FORMAT_IS_CORRECT.String(), fmt.Sprintf(format, args...))
}

// 邮箱绑定失败
func IsMailBindingError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MAIL_BINDING_ERROR.String() && e.Code == 500
}

// 邮箱绑定失败
func ErrorMailBindingError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_MAIL_BINDING_ERROR.String(), fmt.Sprintf(format, args...))
}

// 手机号绑定失败
func IsPhoneBindingError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PHONE_BINDING_ERROR.String() && e.Code == 500
}

// 手机号绑定失败
func ErrorPhoneBindingError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PHONE_BINDING_ERROR.String(), fmt.Sprintf(format, args...))
}

// token 作废失败
func IsReasonTokenDestruction(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_TOKEN_DESTRUCTION.String() && e.Code == 400
}

// token 作废失败
func ErrorReasonTokenDestruction(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_TOKEN_DESTRUCTION.String(), fmt.Sprintf(format, args...))
}

// token验证失败
func IsReasonTokenVerifyError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_TOKEN_VERIFY_ERROR.String() && e.Code == 400
}

// token验证失败
func ErrorReasonTokenVerifyError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_TOKEN_VERIFY_ERROR.String(), fmt.Sprintf(format, args...))
}

// token过期
func IsReasonTokenHasExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_TOKEN_HAS_EXPIRED.String() && e.Code == 400
}

// token过期
func ErrorReasonTokenHasExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REASON_TOKEN_HAS_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// token生成失败
func IsReasonGenerateTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_GENERATE_TOKEN_ERROR.String() && e.Code == 500
}

// token生成失败
func ErrorReasonGenerateTokenError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REASON_GENERATE_TOKEN_ERROR.String(), fmt.Sprintf(format, args...))
}

// 不支持的验证方式
func IsUnsupportedVerificationType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_VERIFICATION_TYPE.String() && e.Code == 400
}

// 不支持的验证方式
func ErrorUnsupportedVerificationType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_UNSUPPORTED_VERIFICATION_TYPE.String(), fmt.Sprintf(format, args...))
}

// 手机号错误
func IsPhoneError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PHONE_ERROR.String() && e.Code == 400
}

// 手机号错误
func ErrorPhoneError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PHONE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 手机号错误
func IsEmailError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_ERROR.String() && e.Code == 400
}

// 手机号错误
func ErrorEmailError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_EMAIL_ERROR.String(), fmt.Sprintf(format, args...))
}

// 发送验证码失败
func IsSendCodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SEND_CODE_ERROR.String() && e.Code == 500
}

// 发送验证码失败
func ErrorSendCodeError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SEND_CODE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 推广码无效
func IsThisShareCodeIsInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_THIS_SHARE_CODE_IS_INVALID.String() && e.Code == 400
}

// 推广码无效
func ErrorThisShareCodeIsInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_THIS_SHARE_CODE_IS_INVALID.String(), fmt.Sprintf(format, args...))
}

// 身份核验不一致
func IsInconsistentIdentityVerification(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INCONSISTENT_IDENTITY_VERIFICATION.String() && e.Code == 400
}

// 身份核验不一致
func ErrorInconsistentIdentityVerification(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INCONSISTENT_IDENTITY_VERIFICATION.String(), fmt.Sprintf(format, args...))
}

// 邮箱已被绑定
func IsTheEmailHasBeenBound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_THE_EMAIL_HAS_BEEN_BOUND.String() && e.Code == 400
}

// 邮箱已被绑定
func ErrorTheEmailHasBeenBound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_THE_EMAIL_HAS_BEEN_BOUND.String(), fmt.Sprintf(format, args...))
}

// 无可用的节点信息
func IsNoAvailableServers(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NO_AVAILABLE_SERVERS.String() && e.Code == 400
}

// 无可用的节点信息
func ErrorNoAvailableServers(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_NO_AVAILABLE_SERVERS.String(), fmt.Sprintf(format, args...))
}

// 不支持的平台
func IsUnsupportedPlatforms(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_PLATFORMS.String() && e.Code == 400
}

// 不支持的平台
func ErrorUnsupportedPlatforms(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_UNSUPPORTED_PLATFORMS.String(), fmt.Sprintf(format, args...))
}

// 生产授权码失败
func IsReasonAuthorizationCodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REASON_AUTHORIZATION_CODE_ERROR.String() && e.Code == 500
}

// 生产授权码失败
func ErrorReasonAuthorizationCodeError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REASON_AUTHORIZATION_CODE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 获取服务节点错误
func IsGetServersNodeErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_SERVERS_NODE_ERR.String() && e.Code == 500
}

// 获取服务节点错误
func ErrorGetServersNodeErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_SERVERS_NODE_ERR.String(), fmt.Sprintf(format, args...))
}

// 获取平台节点错误
func IsGetPlatformNodeErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_PLATFORM_NODE_ERR.String() && e.Code == 500
}

// 获取平台节点错误
func ErrorGetPlatformNodeErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_PLATFORM_NODE_ERR.String(), fmt.Sprintf(format, args...))
}

// 同步用户信息失败
func IsSyncUserInfoErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYNC_USER_INFO_ERR.String() && e.Code == 500
}

// 同步用户信息失败
func ErrorSyncUserInfoErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYNC_USER_INFO_ERR.String(), fmt.Sprintf(format, args...))
}

// 用户未加入节点
func IsUserNotJoinNode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_JOIN_NODE.String() && e.Code == 400
}

// 用户未加入节点
func ErrorUserNotJoinNode(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_NOT_JOIN_NODE.String(), fmt.Sprintf(format, args...))
}
