// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsErrorReasonParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_PARAMS.String() && e.Code == 400
}

// 为某个枚举单独设置错误码
func ErrorErrorReasonParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 系统错误
func IsErrorReasonSystem(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_SYSTEM.String() && e.Code == 500
}

// 系统错误
func ErrorErrorReasonSystem(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ERROR_REASON_SYSTEM.String(), fmt.Sprintf(format, args...))
}

// 获取 ticket 错误
func IsErrorReasonGetTicket(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_GET_TICKET.String() && e.Code == 520
}

// 获取 ticket 错误
func ErrorErrorReasonGetTicket(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrorReason_ERROR_REASON_GET_TICKET.String(), fmt.Sprintf(format, args...))
}

// 获取 token 错误
func IsErrorReasonGetToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_GET_TOKEN.String() && e.Code == 520
}

// 获取 token 错误
func ErrorErrorReasonGetToken(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrorReason_ERROR_REASON_GET_TOKEN.String(), fmt.Sprintf(format, args...))
}
