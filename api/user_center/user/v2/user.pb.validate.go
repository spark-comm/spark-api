// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center/user/v2/user.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v2 "github.com/spark-comm/spark-api/api/common/enum/v2"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v2.AccountType(0)
)

// Validate checks the field values on CreateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserReqMultiError, or
// nil if none found.
func (m *CreateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccount()) < 6 {
		err := CreateUserReqValidationError{
			field:  "Account",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AccountType

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 16 {
		err := CreateUserReqValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Nickname

	// no validation rules for AreaCode

	// no validation rules for ShareCode

	// no validation rules for FaceUrl

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Gender

	// no validation rules for IsGenerate

	// no validation rules for NodeId

	// no validation rules for TenantId

	// no validation rules for FromUserId

	if len(errors) > 0 {
		return CreateUserReqMultiError(errors)
	}

	return nil
}

// CreateUserReqMultiError is an error wrapping multiple validation errors
// returned by CreateUserReq.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReqMultiError) AllErrors() []error { return m }

// CreateUserReqValidationError is the validation error returned by
// CreateUserReq.Validate if the designated constraints aren't met.
type CreateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqValidationError) ErrorName() string { return "CreateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on UpdatePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordReqMultiError, or nil if none found.
func (m *UpdatePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 16 {
		err := UpdatePasswordReqValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePasswordReqMultiError(errors)
	}

	return nil
}

// UpdatePasswordReqMultiError is an error wrapping multiple validation errors
// returned by UpdatePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type UpdatePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordReqMultiError) AllErrors() []error { return m }

// UpdatePasswordReqValidationError is the validation error returned by
// UpdatePasswordReq.Validate if the designated constraints aren't met.
type UpdatePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReqValidationError) ErrorName() string {
	return "UpdatePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReqValidationError{}

// Validate checks the field values on UpdatePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordReplyMultiError, or nil if none found.
func (m *UpdatePasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePasswordReplyMultiError(errors)
	}

	return nil
}

// UpdatePasswordReplyMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordReply.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordReplyMultiError) AllErrors() []error { return m }

// UpdatePasswordReplyValidationError is the validation error returned by
// UpdatePasswordReply.Validate if the designated constraints aren't met.
type UpdatePasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReplyValidationError) ErrorName() string {
	return "UpdatePasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReplyValidationError{}

// Validate checks the field values on DeleteUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteUserReqMultiError, or
// nil if none found.
func (m *DeleteUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteUserReqMultiError(errors)
	}

	return nil
}

// DeleteUserReqMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReqMultiError) AllErrors() []error { return m }

// DeleteUserReqValidationError is the validation error returned by
// DeleteUserReq.Validate if the designated constraints aren't met.
type DeleteUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReqValidationError) ErrorName() string { return "DeleteUserReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReqValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReplyMultiError, or nil if none found.
func (m *DeleteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserReplyMultiError(errors)
	}

	return nil
}

// DeleteUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReplyMultiError) AllErrors() []error { return m }

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on VerifyPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReqMultiError, or nil if none found.
func (m *VerifyPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Password

	if len(errors) > 0 {
		return VerifyPasswordReqMultiError(errors)
	}

	return nil
}

// VerifyPasswordReqMultiError is an error wrapping multiple validation errors
// returned by VerifyPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReqMultiError) AllErrors() []error { return m }

// VerifyPasswordReqValidationError is the validation error returned by
// VerifyPasswordReq.Validate if the designated constraints aren't met.
type VerifyPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReqValidationError) ErrorName() string {
	return "VerifyPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReqValidationError{}

// Validate checks the field values on VerifyPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReplyMultiError, or nil if none found.
func (m *VerifyPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Id

	if len(errors) > 0 {
		return VerifyPasswordReplyMultiError(errors)
	}

	return nil
}

// VerifyPasswordReplyMultiError is an error wrapping multiple validation
// errors returned by VerifyPasswordReply.ValidateAll() if the designated
// constraints aren't met.
type VerifyPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReplyMultiError) AllErrors() []error { return m }

// VerifyPasswordReplyValidationError is the validation error returned by
// VerifyPasswordReply.Validate if the designated constraints aren't met.
type VerifyPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReplyValidationError) ErrorName() string {
	return "VerifyPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReplyValidationError{}

// Validate checks the field values on BatchInsertUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchInsertUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchInsertUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchInsertUserReqMultiError, or nil if none found.
func (m *BatchInsertUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchInsertUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchInsertUserReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchInsertUserReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchInsertUserReqValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchInsertUserReqMultiError(errors)
	}

	return nil
}

// BatchInsertUserReqMultiError is an error wrapping multiple validation errors
// returned by BatchInsertUserReq.ValidateAll() if the designated constraints
// aren't met.
type BatchInsertUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchInsertUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchInsertUserReqMultiError) AllErrors() []error { return m }

// BatchInsertUserReqValidationError is the validation error returned by
// BatchInsertUserReq.Validate if the designated constraints aren't met.
type BatchInsertUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInsertUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInsertUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInsertUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInsertUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInsertUserReqValidationError) ErrorName() string {
	return "BatchInsertUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInsertUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInsertUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInsertUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInsertUserReqValidationError{}

// Validate checks the field values on BatchInsertUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchInsertUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchInsertUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchInsertUserReplyMultiError, or nil if none found.
func (m *BatchInsertUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchInsertUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchInsertUserReplyMultiError(errors)
	}

	return nil
}

// BatchInsertUserReplyMultiError is an error wrapping multiple validation
// errors returned by BatchInsertUserReply.ValidateAll() if the designated
// constraints aren't met.
type BatchInsertUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchInsertUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchInsertUserReplyMultiError) AllErrors() []error { return m }

// BatchInsertUserReplyValidationError is the validation error returned by
// BatchInsertUserReply.Validate if the designated constraints aren't met.
type BatchInsertUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInsertUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInsertUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInsertUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInsertUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInsertUserReplyValidationError) ErrorName() string {
	return "BatchInsertUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInsertUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInsertUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInsertUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInsertUserReplyValidationError{}

// Validate checks the field values on GetSyncUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSyncUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSyncUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSyncUserInfoReqMultiError, or nil if none found.
func (m *GetSyncUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSyncUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetSyncUserInfoReqMultiError(errors)
	}

	return nil
}

// GetSyncUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetSyncUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetSyncUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSyncUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSyncUserInfoReqMultiError) AllErrors() []error { return m }

// GetSyncUserInfoReqValidationError is the validation error returned by
// GetSyncUserInfoReq.Validate if the designated constraints aren't met.
type GetSyncUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSyncUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSyncUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSyncUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSyncUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSyncUserInfoReqValidationError) ErrorName() string {
	return "GetSyncUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSyncUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSyncUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSyncUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSyncUserInfoReqValidationError{}

// Validate checks the field values on GetSyncUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSyncUserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSyncUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSyncUserInfoReplyMultiError, or nil if none found.
func (m *GetSyncUserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSyncUserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSyncUserInfoReplyValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSyncUserInfoReplyValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSyncUserInfoReplyValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSyncUserInfoReplyValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSyncUserInfoReplyValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSyncUserInfoReplyValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSyncUserInfoReplyMultiError(errors)
	}

	return nil
}

// GetSyncUserInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetSyncUserInfoReply.ValidateAll() if the designated
// constraints aren't met.
type GetSyncUserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSyncUserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSyncUserInfoReplyMultiError) AllErrors() []error { return m }

// GetSyncUserInfoReplyValidationError is the validation error returned by
// GetSyncUserInfoReply.Validate if the designated constraints aren't met.
type GetSyncUserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSyncUserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSyncUserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSyncUserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSyncUserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSyncUserInfoReplyValidationError) ErrorName() string {
	return "GetSyncUserInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSyncUserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSyncUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSyncUserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSyncUserInfoReplyValidationError{}

// Validate checks the field values on SyncUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncUserInfoReqMultiError, or nil if none found.
func (m *SyncUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncUserInfoReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncUserInfoReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncUserInfoReqValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncUserInfoReqMultiError(errors)
	}

	return nil
}

// SyncUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by SyncUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SyncUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncUserInfoReqMultiError) AllErrors() []error { return m }

// SyncUserInfoReqValidationError is the validation error returned by
// SyncUserInfoReq.Validate if the designated constraints aren't met.
type SyncUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncUserInfoReqValidationError) ErrorName() string { return "SyncUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SyncUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncUserInfoReqValidationError{}

// Validate checks the field values on SyncUserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncUserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncUserInfoReplyMultiError, or nil if none found.
func (m *SyncUserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncUserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SyncUserInfoReplyMultiError(errors)
	}

	return nil
}

// SyncUserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by SyncUserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type SyncUserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncUserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncUserInfoReplyMultiError) AllErrors() []error { return m }

// SyncUserInfoReplyValidationError is the validation error returned by
// SyncUserInfoReply.Validate if the designated constraints aren't met.
type SyncUserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncUserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncUserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncUserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncUserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncUserInfoReplyValidationError) ErrorName() string {
	return "SyncUserInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SyncUserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncUserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncUserInfoReplyValidationError{}

// Validate checks the field values on SyncUserNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncUserNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncUserNode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SyncUserNodeMultiError, or
// nil if none found.
func (m *SyncUserNode) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncUserNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for FaceURL

	// no validation rules for Nickname

	// no validation rules for FromUserId

	// no validation rules for UserId

	// no validation rules for CenterUserId

	// no validation rules for TenantId

	if len(errors) > 0 {
		return SyncUserNodeMultiError(errors)
	}

	return nil
}

// SyncUserNodeMultiError is an error wrapping multiple validation errors
// returned by SyncUserNode.ValidateAll() if the designated constraints aren't met.
type SyncUserNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncUserNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncUserNodeMultiError) AllErrors() []error { return m }

// SyncUserNodeValidationError is the validation error returned by
// SyncUserNode.Validate if the designated constraints aren't met.
type SyncUserNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncUserNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncUserNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncUserNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncUserNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncUserNodeValidationError) ErrorName() string { return "SyncUserNodeValidationError" }

// Error satisfies the builtin error interface
func (e SyncUserNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncUserNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncUserNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncUserNodeValidationError{}

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDataMultiError, or nil
// if none found.
func (m *UserData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Id

	// no validation rules for Password

	// no validation rules for TenantId

	if len(errors) > 0 {
		return UserDataMultiError(errors)
	}

	return nil
}

// UserDataMultiError is an error wrapping multiple validation errors returned
// by UserData.ValidateAll() if the designated constraints aren't met.
type UserDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataMultiError) AllErrors() []error { return m }

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on GetNodeInfoByUserIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeInfoByUserIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeInfoByUserIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeInfoByUserIdReqMultiError, or nil if none found.
func (m *GetNodeInfoByUserIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeInfoByUserIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetNodeInfoByUserIdReqMultiError(errors)
	}

	return nil
}

// GetNodeInfoByUserIdReqMultiError is an error wrapping multiple validation
// errors returned by GetNodeInfoByUserIdReq.ValidateAll() if the designated
// constraints aren't met.
type GetNodeInfoByUserIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeInfoByUserIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeInfoByUserIdReqMultiError) AllErrors() []error { return m }

// GetNodeInfoByUserIdReqValidationError is the validation error returned by
// GetNodeInfoByUserIdReq.Validate if the designated constraints aren't met.
type GetNodeInfoByUserIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeInfoByUserIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeInfoByUserIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeInfoByUserIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeInfoByUserIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeInfoByUserIdReqValidationError) ErrorName() string {
	return "GetNodeInfoByUserIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeInfoByUserIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeInfoByUserIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeInfoByUserIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeInfoByUserIdReqValidationError{}

// Validate checks the field values on GetNodeInfoByUserIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeInfoByUserIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeInfoByUserIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeInfoByUserIdReplyMultiError, or nil if none found.
func (m *GetNodeInfoByUserIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeInfoByUserIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeInfoByUserIdReplyValidationError{
						field:  fmt.Sprintf("UserNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeInfoByUserIdReplyValidationError{
						field:  fmt.Sprintf("UserNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeInfoByUserIdReplyValidationError{
					field:  fmt.Sprintf("UserNodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodeInfoByUserIdReplyMultiError(errors)
	}

	return nil
}

// GetNodeInfoByUserIdReplyMultiError is an error wrapping multiple validation
// errors returned by GetNodeInfoByUserIdReply.ValidateAll() if the designated
// constraints aren't met.
type GetNodeInfoByUserIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeInfoByUserIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeInfoByUserIdReplyMultiError) AllErrors() []error { return m }

// GetNodeInfoByUserIdReplyValidationError is the validation error returned by
// GetNodeInfoByUserIdReply.Validate if the designated constraints aren't met.
type GetNodeInfoByUserIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeInfoByUserIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeInfoByUserIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeInfoByUserIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeInfoByUserIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeInfoByUserIdReplyValidationError) ErrorName() string {
	return "GetNodeInfoByUserIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeInfoByUserIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeInfoByUserIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeInfoByUserIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeInfoByUserIdReplyValidationError{}

// Validate checks the field values on UserNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserNodeMultiError, or nil
// if none found.
func (m *UserNode) ValidateAll() error {
	return m.validate(true)
}

func (m *UserNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for NodeId

	// no validation rules for Code

	if len(errors) > 0 {
		return UserNodeMultiError(errors)
	}

	return nil
}

// UserNodeMultiError is an error wrapping multiple validation errors returned
// by UserNode.ValidateAll() if the designated constraints aren't met.
type UserNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserNodeMultiError) AllErrors() []error { return m }

// UserNodeValidationError is the validation error returned by
// UserNode.Validate if the designated constraints aren't met.
type UserNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserNodeValidationError) ErrorName() string { return "UserNodeValidationError" }

// Error satisfies the builtin error interface
func (e UserNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserNodeValidationError{}

// Validate checks the field values on DistributeUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DistributeUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeUserReqMultiError, or nil if none found.
func (m *DistributeUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for NodeId

	// no validation rules for Code

	// no validation rules for IsJoinDistribute

	if len(errors) > 0 {
		return DistributeUserReqMultiError(errors)
	}

	return nil
}

// DistributeUserReqMultiError is an error wrapping multiple validation errors
// returned by DistributeUserReq.ValidateAll() if the designated constraints
// aren't met.
type DistributeUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeUserReqMultiError) AllErrors() []error { return m }

// DistributeUserReqValidationError is the validation error returned by
// DistributeUserReq.Validate if the designated constraints aren't met.
type DistributeUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeUserReqValidationError) ErrorName() string {
	return "DistributeUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeUserReqValidationError{}

// Validate checks the field values on DistributeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeUserReplyMultiError, or nil if none found.
func (m *DistributeUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DistributeUserReplyMultiError(errors)
	}

	return nil
}

// DistributeUserReplyMultiError is an error wrapping multiple validation
// errors returned by DistributeUserReply.ValidateAll() if the designated
// constraints aren't met.
type DistributeUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeUserReplyMultiError) AllErrors() []error { return m }

// DistributeUserReplyValidationError is the validation error returned by
// DistributeUserReply.Validate if the designated constraints aren't met.
type DistributeUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeUserReplyValidationError) ErrorName() string {
	return "DistributeUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeUserReplyValidationError{}

// Validate checks the field values on GetUserNodeByNodeIdAndCenterUserIdReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserNodeByNodeIdAndCenterUserIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNodeByNodeIdAndCenterUserIdReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserNodeByNodeIdAndCenterUserIdReqMultiError, or nil if none found.
func (m *GetUserNodeByNodeIdAndCenterUserIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNodeByNodeIdAndCenterUserIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetUserNodeByNodeIdAndCenterUserIdReqMultiError(errors)
	}

	return nil
}

// GetUserNodeByNodeIdAndCenterUserIdReqMultiError is an error wrapping
// multiple validation errors returned by
// GetUserNodeByNodeIdAndCenterUserIdReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserNodeByNodeIdAndCenterUserIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNodeByNodeIdAndCenterUserIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNodeByNodeIdAndCenterUserIdReqMultiError) AllErrors() []error { return m }

// GetUserNodeByNodeIdAndCenterUserIdReqValidationError is the validation error
// returned by GetUserNodeByNodeIdAndCenterUserIdReq.Validate if the
// designated constraints aren't met.
type GetUserNodeByNodeIdAndCenterUserIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNodeByNodeIdAndCenterUserIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNodeByNodeIdAndCenterUserIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNodeByNodeIdAndCenterUserIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNodeByNodeIdAndCenterUserIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNodeByNodeIdAndCenterUserIdReqValidationError) ErrorName() string {
	return "GetUserNodeByNodeIdAndCenterUserIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNodeByNodeIdAndCenterUserIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNodeByNodeIdAndCenterUserIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNodeByNodeIdAndCenterUserIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNodeByNodeIdAndCenterUserIdReqValidationError{}

// Validate checks the field values on GetUserNodeByNodeIdAndCenterUserIdReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserNodeByNodeIdAndCenterUserIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserNodeByNodeIdAndCenterUserIdReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetUserNodeByNodeIdAndCenterUserIdReplyMultiError, or nil if none found.
func (m *GetUserNodeByNodeIdAndCenterUserIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNodeByNodeIdAndCenterUserIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNodeByNodeIdAndCenterUserIdReplyValidationError{
					field:  "UserNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNodeByNodeIdAndCenterUserIdReplyValidationError{
					field:  "UserNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNodeByNodeIdAndCenterUserIdReplyValidationError{
				field:  "UserNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserNodeByNodeIdAndCenterUserIdReplyMultiError(errors)
	}

	return nil
}

// GetUserNodeByNodeIdAndCenterUserIdReplyMultiError is an error wrapping
// multiple validation errors returned by
// GetUserNodeByNodeIdAndCenterUserIdReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserNodeByNodeIdAndCenterUserIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNodeByNodeIdAndCenterUserIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNodeByNodeIdAndCenterUserIdReplyMultiError) AllErrors() []error { return m }

// GetUserNodeByNodeIdAndCenterUserIdReplyValidationError is the validation
// error returned by GetUserNodeByNodeIdAndCenterUserIdReply.Validate if the
// designated constraints aren't met.
type GetUserNodeByNodeIdAndCenterUserIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNodeByNodeIdAndCenterUserIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNodeByNodeIdAndCenterUserIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNodeByNodeIdAndCenterUserIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNodeByNodeIdAndCenterUserIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNodeByNodeIdAndCenterUserIdReplyValidationError) ErrorName() string {
	return "GetUserNodeByNodeIdAndCenterUserIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNodeByNodeIdAndCenterUserIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNodeByNodeIdAndCenterUserIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNodeByNodeIdAndCenterUserIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNodeByNodeIdAndCenterUserIdReplyValidationError{}

// Validate checks the field values on CancelNodeAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelNodeAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelNodeAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelNodeAccountReqMultiError, or nil if none found.
func (m *CancelNodeAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelNodeAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CancelNodeAccountReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelNodeAccountReqMultiError(errors)
	}

	return nil
}

// CancelNodeAccountReqMultiError is an error wrapping multiple validation
// errors returned by CancelNodeAccountReq.ValidateAll() if the designated
// constraints aren't met.
type CancelNodeAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelNodeAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelNodeAccountReqMultiError) AllErrors() []error { return m }

// CancelNodeAccountReqValidationError is the validation error returned by
// CancelNodeAccountReq.Validate if the designated constraints aren't met.
type CancelNodeAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNodeAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNodeAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNodeAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNodeAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNodeAccountReqValidationError) ErrorName() string {
	return "CancelNodeAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNodeAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNodeAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNodeAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNodeAccountReqValidationError{}

// Validate checks the field values on CancelNodeAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelNodeAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelNodeAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelNodeAccountReplyMultiError, or nil if none found.
func (m *CancelNodeAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelNodeAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelNodeAccountReplyMultiError(errors)
	}

	return nil
}

// CancelNodeAccountReplyMultiError is an error wrapping multiple validation
// errors returned by CancelNodeAccountReply.ValidateAll() if the designated
// constraints aren't met.
type CancelNodeAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelNodeAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelNodeAccountReplyMultiError) AllErrors() []error { return m }

// CancelNodeAccountReplyValidationError is the validation error returned by
// CancelNodeAccountReply.Validate if the designated constraints aren't met.
type CancelNodeAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNodeAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNodeAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNodeAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNodeAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNodeAccountReplyValidationError) ErrorName() string {
	return "CancelNodeAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNodeAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNodeAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNodeAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNodeAccountReplyValidationError{}
