// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center/user/v2/profile.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v2 "github.com/spark-comm/spark-api/api/common/enum/v2"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v2.Gender(0)
)

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileMultiError, or
// nil if none found.
func (m *UserProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FaceURL

	// no validation rules for Nickname

	// no validation rules for Account

	// no validation rules for Code

	// no validation rules for Phone

	// no validation rules for Gender

	// no validation rules for ShareCode

	// no validation rules for Email

	// no validation rules for Birth

	// no validation rules for FullName

	// no validation rules for PersonId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for AreaCode

	// no validation rules for Status

	// no validation rules for TenantId

	// no validation rules for NodeId

	// no validation rules for LastLoginNodeId

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}

	return nil
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.ValidateAll() if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on GetByAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByAccountReqMultiError, or nil if none found.
func (m *GetByAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccount()) < 6 {
		err := GetByAccountReqValidationError{
			field:  "Account",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetByAccountReqMultiError(errors)
	}

	return nil
}

// GetByAccountReqMultiError is an error wrapping multiple validation errors
// returned by GetByAccountReq.ValidateAll() if the designated constraints
// aren't met.
type GetByAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByAccountReqMultiError) AllErrors() []error { return m }

// GetByAccountReqValidationError is the validation error returned by
// GetByAccountReq.Validate if the designated constraints aren't met.
type GetByAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByAccountReqValidationError) ErrorName() string { return "GetByAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e GetByAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByAccountReqValidationError{}

// Validate checks the field values on GetByAccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByAccountReplyMultiError, or nil if none found.
func (m *GetByAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByAccountReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByAccountReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByAccountReplyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByAccountReplyMultiError(errors)
	}

	return nil
}

// GetByAccountReplyMultiError is an error wrapping multiple validation errors
// returned by GetByAccountReply.ValidateAll() if the designated constraints
// aren't met.
type GetByAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByAccountReplyMultiError) AllErrors() []error { return m }

// GetByAccountReplyValidationError is the validation error returned by
// GetByAccountReply.Validate if the designated constraints aren't met.
type GetByAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByAccountReplyValidationError) ErrorName() string {
	return "GetByAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetByAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByAccountReplyValidationError{}

// Validate checks the field values on GetByPhoneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByPhoneReqMultiError, or
// nil if none found.
func (m *GetByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	if len(errors) > 0 {
		return GetByPhoneReqMultiError(errors)
	}

	return nil
}

// GetByPhoneReqMultiError is an error wrapping multiple validation errors
// returned by GetByPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type GetByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByPhoneReqMultiError) AllErrors() []error { return m }

// GetByPhoneReqValidationError is the validation error returned by
// GetByPhoneReq.Validate if the designated constraints aren't met.
type GetByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByPhoneReqValidationError) ErrorName() string { return "GetByPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e GetByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByPhoneReqValidationError{}

// Validate checks the field values on GetByPhoneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByPhoneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByPhoneReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByPhoneReplyMultiError, or nil if none found.
func (m *GetByPhoneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByPhoneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetByPhoneReplyValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetByPhoneReplyValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByPhoneReplyValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetByPhoneReplyMultiError(errors)
	}

	return nil
}

// GetByPhoneReplyMultiError is an error wrapping multiple validation errors
// returned by GetByPhoneReply.ValidateAll() if the designated constraints
// aren't met.
type GetByPhoneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByPhoneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByPhoneReplyMultiError) AllErrors() []error { return m }

// GetByPhoneReplyValidationError is the validation error returned by
// GetByPhoneReply.Validate if the designated constraints aren't met.
type GetByPhoneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByPhoneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByPhoneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByPhoneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByPhoneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByPhoneReplyValidationError) ErrorName() string { return "GetByPhoneReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetByPhoneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByPhoneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByPhoneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByPhoneReplyValidationError{}

// Validate checks the field values on GetByEmailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByEmailReqMultiError, or
// nil if none found.
func (m *GetByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetByEmailReqMultiError(errors)
	}

	return nil
}

// GetByEmailReqMultiError is an error wrapping multiple validation errors
// returned by GetByEmailReq.ValidateAll() if the designated constraints
// aren't met.
type GetByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByEmailReqMultiError) AllErrors() []error { return m }

// GetByEmailReqValidationError is the validation error returned by
// GetByEmailReq.Validate if the designated constraints aren't met.
type GetByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByEmailReqValidationError) ErrorName() string { return "GetByEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e GetByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByEmailReqValidationError{}

// Validate checks the field values on GetByEmailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByEmailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByEmailReplyMultiError, or nil if none found.
func (m *GetByEmailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByEmailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByEmailReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByEmailReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByEmailReplyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByEmailReplyMultiError(errors)
	}

	return nil
}

// GetByEmailReplyMultiError is an error wrapping multiple validation errors
// returned by GetByEmailReply.ValidateAll() if the designated constraints
// aren't met.
type GetByEmailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByEmailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByEmailReplyMultiError) AllErrors() []error { return m }

// GetByEmailReplyValidationError is the validation error returned by
// GetByEmailReply.Validate if the designated constraints aren't met.
type GetByEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByEmailReplyValidationError) ErrorName() string { return "GetByEmailReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetByEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByEmailReplyValidationError{}

// Validate checks the field values on GetByCodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByCodeReqMultiError, or
// nil if none found.
func (m *GetByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetByCodeReqMultiError(errors)
	}

	return nil
}

// GetByCodeReqMultiError is an error wrapping multiple validation errors
// returned by GetByCodeReq.ValidateAll() if the designated constraints aren't met.
type GetByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByCodeReqMultiError) AllErrors() []error { return m }

// GetByCodeReqValidationError is the validation error returned by
// GetByCodeReq.Validate if the designated constraints aren't met.
type GetByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByCodeReqValidationError) ErrorName() string { return "GetByCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByCodeReqValidationError{}

// Validate checks the field values on GetByCodeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByCodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByCodeReplyMultiError,
// or nil if none found.
func (m *GetByCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByCodeReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByCodeReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByCodeReplyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByCodeReplyMultiError(errors)
	}

	return nil
}

// GetByCodeReplyMultiError is an error wrapping multiple validation errors
// returned by GetByCodeReply.ValidateAll() if the designated constraints
// aren't met.
type GetByCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByCodeReplyMultiError) AllErrors() []error { return m }

// GetByCodeReplyValidationError is the validation error returned by
// GetByCodeReply.Validate if the designated constraints aren't met.
type GetByCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByCodeReplyValidationError) ErrorName() string { return "GetByCodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetByCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByCodeReplyValidationError{}

// Validate checks the field values on FindProfileByUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindProfileByUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProfileByUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindProfileByUserReqMultiError, or nil if none found.
func (m *FindProfileByUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProfileByUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return FindProfileByUserReqMultiError(errors)
	}

	return nil
}

// FindProfileByUserReqMultiError is an error wrapping multiple validation
// errors returned by FindProfileByUserReq.ValidateAll() if the designated
// constraints aren't met.
type FindProfileByUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProfileByUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProfileByUserReqMultiError) AllErrors() []error { return m }

// FindProfileByUserReqValidationError is the validation error returned by
// FindProfileByUserReq.Validate if the designated constraints aren't met.
type FindProfileByUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProfileByUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProfileByUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProfileByUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProfileByUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProfileByUserReqValidationError) ErrorName() string {
	return "FindProfileByUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindProfileByUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProfileByUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProfileByUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProfileByUserReqValidationError{}

// Validate checks the field values on FindProfileByUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindProfileByUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProfileByUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindProfileByUserReplyMultiError, or nil if none found.
func (m *FindProfileByUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProfileByUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindProfileByUserReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindProfileByUserReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindProfileByUserReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindProfileByUserReplyMultiError(errors)
	}

	return nil
}

// FindProfileByUserReplyMultiError is an error wrapping multiple validation
// errors returned by FindProfileByUserReply.ValidateAll() if the designated
// constraints aren't met.
type FindProfileByUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProfileByUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProfileByUserReplyMultiError) AllErrors() []error { return m }

// FindProfileByUserReplyValidationError is the validation error returned by
// FindProfileByUserReply.Validate if the designated constraints aren't met.
type FindProfileByUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProfileByUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProfileByUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProfileByUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProfileByUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProfileByUserReplyValidationError) ErrorName() string {
	return "FindProfileByUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FindProfileByUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProfileByUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProfileByUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProfileByUserReplyValidationError{}

// Validate checks the field values on UpdateProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileReqMultiError, or nil if none found.
func (m *UpdateProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := UpdateProfileReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.FaceURL != nil {
		// no validation rules for FaceURL
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Birth != nil {
		// no validation rules for Birth
	}

	if m.NodeId != nil {
		// no validation rules for NodeId
	}

	if m.FullName != nil {
		// no validation rules for FullName
	}

	if m.PersonId != nil {
		// no validation rules for PersonId
	}

	if m.LastNodeId != nil {
		// no validation rules for LastNodeId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateProfileReqMultiError(errors)
	}

	return nil
}

// UpdateProfileReqMultiError is an error wrapping multiple validation errors
// returned by UpdateProfileReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileReqMultiError) AllErrors() []error { return m }

// UpdateProfileReqValidationError is the validation error returned by
// UpdateProfileReq.Validate if the designated constraints aren't met.
type UpdateProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileReqValidationError) ErrorName() string { return "UpdateProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileReqValidationError{}

// Validate checks the field values on UpdateProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileReplyMultiError, or nil if none found.
func (m *UpdateProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProfileReplyMultiError(errors)
	}

	return nil
}

// UpdateProfileReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateProfileReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileReplyMultiError) AllErrors() []error { return m }

// UpdateProfileReplyValidationError is the validation error returned by
// UpdateProfileReply.Validate if the designated constraints aren't met.
type UpdateProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileReplyValidationError) ErrorName() string {
	return "UpdateProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileReplyValidationError{}

// Validate checks the field values on GetProfileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProfileReqMultiError, or
// nil if none found.
func (m *GetProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetProfileReqMultiError(errors)
	}

	return nil
}

// GetProfileReqMultiError is an error wrapping multiple validation errors
// returned by GetProfileReq.ValidateAll() if the designated constraints
// aren't met.
type GetProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileReqMultiError) AllErrors() []error { return m }

// GetProfileReqValidationError is the validation error returned by
// GetProfileReq.Validate if the designated constraints aren't met.
type GetProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileReqValidationError) ErrorName() string { return "GetProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e GetProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileReqValidationError{}

// Validate checks the field values on GetProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileReplyMultiError, or nil if none found.
func (m *GetProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProfileReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProfileReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProfileReplyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProfileReplyMultiError(errors)
	}

	return nil
}

// GetProfileReplyMultiError is an error wrapping multiple validation errors
// returned by GetProfileReply.ValidateAll() if the designated constraints
// aren't met.
type GetProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileReplyMultiError) AllErrors() []error { return m }

// GetProfileReplyValidationError is the validation error returned by
// GetProfileReply.Validate if the designated constraints aren't met.
type GetProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileReplyValidationError) ErrorName() string { return "GetProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileReplyValidationError{}

// Validate checks the field values on ListProfileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListProfileReqMultiError,
// or nil if none found.
func (m *ListProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProfileReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProfileReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProfileReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsLimit

	// no validation rules for Cond

	// no validation rules for NodeId

	if len(errors) > 0 {
		return ListProfileReqMultiError(errors)
	}

	return nil
}

// ListProfileReqMultiError is an error wrapping multiple validation errors
// returned by ListProfileReq.ValidateAll() if the designated constraints
// aren't met.
type ListProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProfileReqMultiError) AllErrors() []error { return m }

// ListProfileReqValidationError is the validation error returned by
// ListProfileReq.Validate if the designated constraints aren't met.
type ListProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProfileReqValidationError) ErrorName() string { return "ListProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e ListProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProfileReqValidationError{}

// Validate checks the field values on ListProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProfileReplyMultiError, or nil if none found.
func (m *ListProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProfileReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProfileReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProfileReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProfileReplyMultiError(errors)
	}

	return nil
}

// ListProfileReplyMultiError is an error wrapping multiple validation errors
// returned by ListProfileReply.ValidateAll() if the designated constraints
// aren't met.
type ListProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProfileReplyMultiError) AllErrors() []error { return m }

// ListProfileReplyValidationError is the validation error returned by
// ListProfileReply.Validate if the designated constraints aren't met.
type ListProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProfileReplyValidationError) ErrorName() string { return "ListProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProfileReplyValidationError{}

// Validate checks the field values on GetListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReqMultiError, or
// nil if none found.
func (m *GetListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.FullName != nil {
		// no validation rules for FullName
	}

	if m.PersonId != nil {
		// no validation rules for PersonId
	}

	if len(errors) > 0 {
		return GetListReqMultiError(errors)
	}

	return nil
}

// GetListReqMultiError is an error wrapping multiple validation errors
// returned by GetListReq.ValidateAll() if the designated constraints aren't met.
type GetListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReqMultiError) AllErrors() []error { return m }

// GetListReqValidationError is the validation error returned by
// GetListReq.Validate if the designated constraints aren't met.
type GetListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReqValidationError) ErrorName() string { return "GetListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReqValidationError{}

// Validate checks the field values on GetListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReplyMultiError, or
// nil if none found.
func (m *GetListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListReplyMultiError(errors)
	}

	return nil
}

// GetListReplyMultiError is an error wrapping multiple validation errors
// returned by GetListReply.ValidateAll() if the designated constraints aren't met.
type GetListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReplyMultiError) AllErrors() []error { return m }

// GetListReplyValidationError is the validation error returned by
// GetListReply.Validate if the designated constraints aren't met.
type GetListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReplyValidationError) ErrorName() string { return "GetListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReplyValidationError{}

// Validate checks the field values on BatchInsertProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchInsertProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchInsertProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchInsertProfileReqMultiError, or nil if none found.
func (m *BatchInsertProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchInsertProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchInsertProfileReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchInsertProfileReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchInsertProfileReqValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchInsertProfileReqMultiError(errors)
	}

	return nil
}

// BatchInsertProfileReqMultiError is an error wrapping multiple validation
// errors returned by BatchInsertProfileReq.ValidateAll() if the designated
// constraints aren't met.
type BatchInsertProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchInsertProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchInsertProfileReqMultiError) AllErrors() []error { return m }

// BatchInsertProfileReqValidationError is the validation error returned by
// BatchInsertProfileReq.Validate if the designated constraints aren't met.
type BatchInsertProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInsertProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInsertProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInsertProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInsertProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInsertProfileReqValidationError) ErrorName() string {
	return "BatchInsertProfileReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInsertProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInsertProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInsertProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInsertProfileReqValidationError{}

// Validate checks the field values on BatchInsertProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchInsertProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchInsertProfileReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchInsertProfileReplyMultiError, or nil if none found.
func (m *BatchInsertProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchInsertProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchInsertProfileReplyMultiError(errors)
	}

	return nil
}

// BatchInsertProfileReplyMultiError is an error wrapping multiple validation
// errors returned by BatchInsertProfileReply.ValidateAll() if the designated
// constraints aren't met.
type BatchInsertProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchInsertProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchInsertProfileReplyMultiError) AllErrors() []error { return m }

// BatchInsertProfileReplyValidationError is the validation error returned by
// BatchInsertProfileReply.Validate if the designated constraints aren't met.
type BatchInsertProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInsertProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInsertProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInsertProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInsertProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInsertProfileReplyValidationError) ErrorName() string {
	return "BatchInsertProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInsertProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInsertProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInsertProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInsertProfileReplyValidationError{}

// Validate checks the field values on IsRealReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsRealReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsRealReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsRealReqMultiError, or nil
// if none found.
func (m *IsRealReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsRealReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for IdCard

	if len(errors) > 0 {
		return IsRealReqMultiError(errors)
	}

	return nil
}

// IsRealReqMultiError is an error wrapping multiple validation errors returned
// by IsRealReq.ValidateAll() if the designated constraints aren't met.
type IsRealReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsRealReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsRealReqMultiError) AllErrors() []error { return m }

// IsRealReqValidationError is the validation error returned by
// IsRealReq.Validate if the designated constraints aren't met.
type IsRealReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsRealReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsRealReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsRealReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsRealReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsRealReqValidationError) ErrorName() string { return "IsRealReqValidationError" }

// Error satisfies the builtin error interface
func (e IsRealReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsRealReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsRealReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsRealReqValidationError{}

// Validate checks the field values on IsRealReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsRealReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsRealReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsRealReplyMultiError, or
// nil if none found.
func (m *IsRealReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IsRealReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IsRealReplyMultiError(errors)
	}

	return nil
}

// IsRealReplyMultiError is an error wrapping multiple validation errors
// returned by IsRealReply.ValidateAll() if the designated constraints aren't met.
type IsRealReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsRealReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsRealReplyMultiError) AllErrors() []error { return m }

// IsRealReplyValidationError is the validation error returned by
// IsRealReply.Validate if the designated constraints aren't met.
type IsRealReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsRealReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsRealReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsRealReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsRealReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsRealReplyValidationError) ErrorName() string { return "IsRealReplyValidationError" }

// Error satisfies the builtin error interface
func (e IsRealReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsRealReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsRealReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsRealReplyValidationError{}
