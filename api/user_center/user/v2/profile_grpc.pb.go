// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: user_center/user/v2/profile.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Profile_GetProfile_FullMethodName          = "/api.user_center.user.v2.Profile/GetProfile"
	Profile_UpdateProfile_FullMethodName       = "/api.user_center.user.v2.Profile/UpdateProfile"
	Profile_ListProfile_FullMethodName         = "/api.user_center.user.v2.Profile/ListProfile"
	Profile_GetList_FullMethodName             = "/api.user_center.user.v2.Profile/GetList"
	Profile_GetByAccount_FullMethodName        = "/api.user_center.user.v2.Profile/GetByAccount"
	Profile_GetByPhone_FullMethodName          = "/api.user_center.user.v2.Profile/GetByPhone"
	Profile_GetByEmail_FullMethodName          = "/api.user_center.user.v2.Profile/GetByEmail"
	Profile_GetByCode_FullMethodName           = "/api.user_center.user.v2.Profile/GetByCode"
	Profile_FindProfileByUserId_FullMethodName = "/api.user_center.user.v2.Profile/FindProfileByUserId"
	Profile_BatchInsert_FullMethodName         = "/api.user_center.user.v2.Profile/BatchInsert"
	Profile_IsReal_FullMethodName              = "/api.user_center.user.v2.Profile/IsReal"
)

// ProfileClient is the client API for Profile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Profile 服务
type ProfileClient interface {
	// 基本接口
	// 获取用户信息
	GetProfile(ctx context.Context, in *GetProfileReq, opts ...grpc.CallOption) (*GetProfileReply, error)
	// 更新用户新
	UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileReply, error)
	// 获取用户列表
	ListProfile(ctx context.Context, in *ListProfileReq, opts ...grpc.CallOption) (*ListProfileReply, error)
	// 获取用户列表
	GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListReply, error)
	// 根据账号获取用户信息
	GetByAccount(ctx context.Context, in *GetByAccountReq, opts ...grpc.CallOption) (*GetByAccountReply, error)
	// 根据手机号获取用户信息
	GetByPhone(ctx context.Context, in *GetByPhoneReq, opts ...grpc.CallOption) (*GetByPhoneReply, error)
	// 根据邮箱获取用户信息
	GetByEmail(ctx context.Context, in *GetByEmailReq, opts ...grpc.CallOption) (*GetByEmailReply, error)
	// 根据code获取用户信息
	GetByCode(ctx context.Context, in *GetByCodeReq, opts ...grpc.CallOption) (*GetByCodeReply, error)
	// 工具方法
	// 根据ids获取用户信息
	FindProfileByUserId(ctx context.Context, in *FindProfileByUserReq, opts ...grpc.CallOption) (*FindProfileByUserReply, error)
	// 批量插入
	BatchInsert(ctx context.Context, in *BatchInsertProfileReq, opts ...grpc.CallOption) (*BatchInsertProfileReply, error)
	// 是否实名
	IsReal(ctx context.Context, in *IsRealReq, opts ...grpc.CallOption) (*IsRealReply, error)
}

type profileClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileClient(cc grpc.ClientConnInterface) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) GetProfile(ctx context.Context, in *GetProfileReq, opts ...grpc.CallOption) (*GetProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileReply)
	err := c.cc.Invoke(ctx, Profile_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileReply)
	err := c.cc.Invoke(ctx, Profile_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ListProfile(ctx context.Context, in *ListProfileReq, opts ...grpc.CallOption) (*ListProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProfileReply)
	err := c.cc.Invoke(ctx, Profile_ListProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListReply)
	err := c.cc.Invoke(ctx, Profile_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetByAccount(ctx context.Context, in *GetByAccountReq, opts ...grpc.CallOption) (*GetByAccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByAccountReply)
	err := c.cc.Invoke(ctx, Profile_GetByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetByPhone(ctx context.Context, in *GetByPhoneReq, opts ...grpc.CallOption) (*GetByPhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByPhoneReply)
	err := c.cc.Invoke(ctx, Profile_GetByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetByEmail(ctx context.Context, in *GetByEmailReq, opts ...grpc.CallOption) (*GetByEmailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByEmailReply)
	err := c.cc.Invoke(ctx, Profile_GetByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetByCode(ctx context.Context, in *GetByCodeReq, opts ...grpc.CallOption) (*GetByCodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByCodeReply)
	err := c.cc.Invoke(ctx, Profile_GetByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) FindProfileByUserId(ctx context.Context, in *FindProfileByUserReq, opts ...grpc.CallOption) (*FindProfileByUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindProfileByUserReply)
	err := c.cc.Invoke(ctx, Profile_FindProfileByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) BatchInsert(ctx context.Context, in *BatchInsertProfileReq, opts ...grpc.CallOption) (*BatchInsertProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchInsertProfileReply)
	err := c.cc.Invoke(ctx, Profile_BatchInsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) IsReal(ctx context.Context, in *IsRealReq, opts ...grpc.CallOption) (*IsRealReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsRealReply)
	err := c.cc.Invoke(ctx, Profile_IsReal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServer is the server API for Profile service.
// All implementations must embed UnimplementedProfileServer
// for forward compatibility
//
// Profile 服务
type ProfileServer interface {
	// 基本接口
	// 获取用户信息
	GetProfile(context.Context, *GetProfileReq) (*GetProfileReply, error)
	// 更新用户新
	UpdateProfile(context.Context, *UpdateProfileReq) (*UpdateProfileReply, error)
	// 获取用户列表
	ListProfile(context.Context, *ListProfileReq) (*ListProfileReply, error)
	// 获取用户列表
	GetList(context.Context, *GetListReq) (*GetListReply, error)
	// 根据账号获取用户信息
	GetByAccount(context.Context, *GetByAccountReq) (*GetByAccountReply, error)
	// 根据手机号获取用户信息
	GetByPhone(context.Context, *GetByPhoneReq) (*GetByPhoneReply, error)
	// 根据邮箱获取用户信息
	GetByEmail(context.Context, *GetByEmailReq) (*GetByEmailReply, error)
	// 根据code获取用户信息
	GetByCode(context.Context, *GetByCodeReq) (*GetByCodeReply, error)
	// 工具方法
	// 根据ids获取用户信息
	FindProfileByUserId(context.Context, *FindProfileByUserReq) (*FindProfileByUserReply, error)
	// 批量插入
	BatchInsert(context.Context, *BatchInsertProfileReq) (*BatchInsertProfileReply, error)
	// 是否实名
	IsReal(context.Context, *IsRealReq) (*IsRealReply, error)
	mustEmbedUnimplementedProfileServer()
}

// UnimplementedProfileServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServer struct {
}

func (UnimplementedProfileServer) GetProfile(context.Context, *GetProfileReq) (*GetProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileServer) UpdateProfile(context.Context, *UpdateProfileReq) (*UpdateProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServer) ListProfile(context.Context, *ListProfileReq) (*ListProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfile not implemented")
}
func (UnimplementedProfileServer) GetList(context.Context, *GetListReq) (*GetListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedProfileServer) GetByAccount(context.Context, *GetByAccountReq) (*GetByAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAccount not implemented")
}
func (UnimplementedProfileServer) GetByPhone(context.Context, *GetByPhoneReq) (*GetByPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPhone not implemented")
}
func (UnimplementedProfileServer) GetByEmail(context.Context, *GetByEmailReq) (*GetByEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (UnimplementedProfileServer) GetByCode(context.Context, *GetByCodeReq) (*GetByCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCode not implemented")
}
func (UnimplementedProfileServer) FindProfileByUserId(context.Context, *FindProfileByUserReq) (*FindProfileByUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProfileByUserId not implemented")
}
func (UnimplementedProfileServer) BatchInsert(context.Context, *BatchInsertProfileReq) (*BatchInsertProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedProfileServer) IsReal(context.Context, *IsRealReq) (*IsRealReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReal not implemented")
}
func (UnimplementedProfileServer) mustEmbedUnimplementedProfileServer() {}

// UnsafeProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServer will
// result in compilation errors.
type UnsafeProfileServer interface {
	mustEmbedUnimplementedProfileServer()
}

func RegisterProfileServer(s grpc.ServiceRegistrar, srv ProfileServer) {
	s.RegisterService(&Profile_ServiceDesc, srv)
}

func _Profile_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetProfile(ctx, req.(*GetProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UpdateProfile(ctx, req.(*UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ListProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ListProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_ListProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ListProfile(ctx, req.(*ListProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetList(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetByAccount(ctx, req.(*GetByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetByPhone(ctx, req.(*GetByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetByEmail(ctx, req.(*GetByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetByCode(ctx, req.(*GetByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_FindProfileByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProfileByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).FindProfileByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_FindProfileByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).FindProfileByUserId(ctx, req.(*FindProfileByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_BatchInsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).BatchInsert(ctx, req.(*BatchInsertProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_IsReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).IsReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_IsReal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).IsReal(ctx, req.(*IsRealReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Profile_ServiceDesc is the grpc.ServiceDesc for Profile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user_center.user.v2.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _Profile_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Profile_UpdateProfile_Handler,
		},
		{
			MethodName: "ListProfile",
			Handler:    _Profile_ListProfile_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _Profile_GetList_Handler,
		},
		{
			MethodName: "GetByAccount",
			Handler:    _Profile_GetByAccount_Handler,
		},
		{
			MethodName: "GetByPhone",
			Handler:    _Profile_GetByPhone_Handler,
		},
		{
			MethodName: "GetByEmail",
			Handler:    _Profile_GetByEmail_Handler,
		},
		{
			MethodName: "GetByCode",
			Handler:    _Profile_GetByCode_Handler,
		},
		{
			MethodName: "FindProfileByUserId",
			Handler:    _Profile_FindProfileByUserId_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _Profile_BatchInsert_Handler,
		},
		{
			MethodName: "IsReal",
			Handler:    _Profile_IsReal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center/user/v2/profile.proto",
}
