// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsErrorReasonParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_PARAMS.String() && e.Code == 400
}

// 为某个枚举单独设置错误码
func ErrorErrorReasonParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 系统错误
func IsErrorReasonSystem(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_SYSTEM.String() && e.Code == 500
}

// 系统错误
func ErrorErrorReasonSystem(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ERROR_REASON_SYSTEM.String(), fmt.Sprintf(format, args...))
}

// 密码错误
func IsErrorReasonPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_PASSWORD.String() && e.Code == 400
}

// 密码错误
func ErrorErrorReasonPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 用户名已存在
func IsErrorReasonNameIsExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_NAME_IS_EXIST.String() && e.Code == 400
}

// 用户名已存在
func ErrorErrorReasonNameIsExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_NAME_IS_EXIST.String(), fmt.Sprintf(format, args...))
}

// 创建用户失败
func IsErrorCreateUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_CREATE_USER.String() && e.Code == 500
}

// 创建用户失败
func ErrorErrorCreateUser(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ERROR_CREATE_USER.String(), fmt.Sprintf(format, args...))
}

// 邮箱已被使用
func IsEmailAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_ALREADY_EXISTS.String() && e.Code == 400
}

// 邮箱已被使用
func ErrorEmailAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_EMAIL_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 加入社区失败
func IsJoinNodeErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JOIN_NODE_ERR.String() && e.Code == 500
}

// 加入社区失败
func ErrorJoinNodeErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_JOIN_NODE_ERR.String(), fmt.Sprintf(format, args...))
}

// 推广码无效
func IsThisShareCodeIsInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_THIS_SHARE_CODE_IS_INVALID.String() && e.Code == 400
}

// 推广码无效
func ErrorThisShareCodeIsInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_THIS_SHARE_CODE_IS_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsUserAlreadyJoinNode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ALREADY_JOIN_NODE.String() && e.Code == 500
}

func ErrorUserAlreadyJoinNode(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_ALREADY_JOIN_NODE.String(), fmt.Sprintf(format, args...))
}

// 社区不存在
func IsNodeNotFang(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NODE_NOT_FANG.String() && e.Code == 400
}

// 社区不存在
func ErrorNodeNotFang(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_NODE_NOT_FANG.String(), fmt.Sprintf(format, args...))
}
