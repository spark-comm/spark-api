// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: user_center/user/v2/user.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_CreateUser_FullMethodName                         = "/api.user_center.user.v2.User/CreateUser"
	User_UpdatePassword_FullMethodName                     = "/api.user_center.user.v2.User/UpdatePassword"
	User_DeleteUser_FullMethodName                         = "/api.user_center.user.v2.User/DeleteUser"
	User_VerifyPassword_FullMethodName                     = "/api.user_center.user.v2.User/VerifyPassword"
	User_BatchInsert_FullMethodName                        = "/api.user_center.user.v2.User/BatchInsert"
	User_GetSyncUserInfo_FullMethodName                    = "/api.user_center.user.v2.User/GetSyncUserInfo"
	User_SyncUserInfo_FullMethodName                       = "/api.user_center.user.v2.User/SyncUserInfo"
	User_GetNodeInfoByUserId_FullMethodName                = "/api.user_center.user.v2.User/GetNodeInfoByUserId"
	User_DistributeUser_FullMethodName                     = "/api.user_center.user.v2.User/DistributeUser"
	User_GetUserNodeByNodeIdAndCenterUserId_FullMethodName = "/api.user_center.user.v2.User/GetUserNodeByNodeIdAndCenterUserId"
	User_CancelNodeAccount_FullMethodName                  = "/api.user_center.user.v2.User/CancelNodeAccount"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error)
	// 修改用户密码
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordReply, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error)
	// 校验密码
	VerifyPassword(ctx context.Context, in *VerifyPasswordReq, opts ...grpc.CallOption) (*VerifyPasswordReply, error)
	// 批量插入
	BatchInsert(ctx context.Context, in *BatchInsertUserReq, opts ...grpc.CallOption) (*BatchInsertUserReply, error)
	// 获取同步用户信息
	GetSyncUserInfo(ctx context.Context, in *GetSyncUserInfoReq, opts ...grpc.CallOption) (*GetSyncUserInfoReply, error)
	// 同步用户信息
	SyncUserInfo(ctx context.Context, in *SyncUserInfoReq, opts ...grpc.CallOption) (*SyncUserInfoReply, error)
	// userId 查询nodeId
	GetNodeInfoByUserId(ctx context.Context, in *GetNodeInfoByUserIdReq, opts ...grpc.CallOption) (*GetNodeInfoByUserIdReply, error)
	// 直接下发用户数据
	DistributeUser(ctx context.Context, in *DistributeUserReq, opts ...grpc.CallOption) (*DistributeUserReply, error)
	// 更具node和用户中心id获取用户信息
	GetUserNodeByNodeIdAndCenterUserId(ctx context.Context, in *GetUserNodeByNodeIdAndCenterUserIdReq, opts ...grpc.CallOption) (*GetUserNodeByNodeIdAndCenterUserIdReply, error)
	// 注销节点账号
	CancelNodeAccount(ctx context.Context, in *CancelNodeAccountReq, opts ...grpc.CallOption) (*CancelNodeAccountReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordReply, error) {
	out := new(UpdatePasswordReply)
	err := c.cc.Invoke(ctx, User_UpdatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, User_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyPassword(ctx context.Context, in *VerifyPasswordReq, opts ...grpc.CallOption) (*VerifyPasswordReply, error) {
	out := new(VerifyPasswordReply)
	err := c.cc.Invoke(ctx, User_VerifyPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchInsert(ctx context.Context, in *BatchInsertUserReq, opts ...grpc.CallOption) (*BatchInsertUserReply, error) {
	out := new(BatchInsertUserReply)
	err := c.cc.Invoke(ctx, User_BatchInsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetSyncUserInfo(ctx context.Context, in *GetSyncUserInfoReq, opts ...grpc.CallOption) (*GetSyncUserInfoReply, error) {
	out := new(GetSyncUserInfoReply)
	err := c.cc.Invoke(ctx, User_GetSyncUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SyncUserInfo(ctx context.Context, in *SyncUserInfoReq, opts ...grpc.CallOption) (*SyncUserInfoReply, error) {
	out := new(SyncUserInfoReply)
	err := c.cc.Invoke(ctx, User_SyncUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetNodeInfoByUserId(ctx context.Context, in *GetNodeInfoByUserIdReq, opts ...grpc.CallOption) (*GetNodeInfoByUserIdReply, error) {
	out := new(GetNodeInfoByUserIdReply)
	err := c.cc.Invoke(ctx, User_GetNodeInfoByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DistributeUser(ctx context.Context, in *DistributeUserReq, opts ...grpc.CallOption) (*DistributeUserReply, error) {
	out := new(DistributeUserReply)
	err := c.cc.Invoke(ctx, User_DistributeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserNodeByNodeIdAndCenterUserId(ctx context.Context, in *GetUserNodeByNodeIdAndCenterUserIdReq, opts ...grpc.CallOption) (*GetUserNodeByNodeIdAndCenterUserIdReply, error) {
	out := new(GetUserNodeByNodeIdAndCenterUserIdReply)
	err := c.cc.Invoke(ctx, User_GetUserNodeByNodeIdAndCenterUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelNodeAccount(ctx context.Context, in *CancelNodeAccountReq, opts ...grpc.CallOption) (*CancelNodeAccountReply, error) {
	out := new(CancelNodeAccountReply)
	err := c.cc.Invoke(ctx, User_CancelNodeAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 创建用户
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	// 修改用户密码
	UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordReply, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	// 校验密码
	VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error)
	// 批量插入
	BatchInsert(context.Context, *BatchInsertUserReq) (*BatchInsertUserReply, error)
	// 获取同步用户信息
	GetSyncUserInfo(context.Context, *GetSyncUserInfoReq) (*GetSyncUserInfoReply, error)
	// 同步用户信息
	SyncUserInfo(context.Context, *SyncUserInfoReq) (*SyncUserInfoReply, error)
	// userId 查询nodeId
	GetNodeInfoByUserId(context.Context, *GetNodeInfoByUserIdReq) (*GetNodeInfoByUserIdReply, error)
	// 直接下发用户数据
	DistributeUser(context.Context, *DistributeUserReq) (*DistributeUserReply, error)
	// 更具node和用户中心id获取用户信息
	GetUserNodeByNodeIdAndCenterUserId(context.Context, *GetUserNodeByNodeIdAndCenterUserIdReq) (*GetUserNodeByNodeIdAndCenterUserIdReply, error)
	// 注销节点账号
	CancelNodeAccount(context.Context, *CancelNodeAccountReq) (*CancelNodeAccountReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedUserServer) BatchInsert(context.Context, *BatchInsertUserReq) (*BatchInsertUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedUserServer) GetSyncUserInfo(context.Context, *GetSyncUserInfoReq) (*GetSyncUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncUserInfo not implemented")
}
func (UnimplementedUserServer) SyncUserInfo(context.Context, *SyncUserInfoReq) (*SyncUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserInfo not implemented")
}
func (UnimplementedUserServer) GetNodeInfoByUserId(context.Context, *GetNodeInfoByUserIdReq) (*GetNodeInfoByUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfoByUserId not implemented")
}
func (UnimplementedUserServer) DistributeUser(context.Context, *DistributeUserReq) (*DistributeUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeUser not implemented")
}
func (UnimplementedUserServer) GetUserNodeByNodeIdAndCenterUserId(context.Context, *GetUserNodeByNodeIdAndCenterUserIdReq) (*GetUserNodeByNodeIdAndCenterUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNodeByNodeIdAndCenterUserId not implemented")
}
func (UnimplementedUserServer) CancelNodeAccount(context.Context, *CancelNodeAccountReq) (*CancelNodeAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNodeAccount not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_VerifyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyPassword(ctx, req.(*VerifyPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BatchInsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchInsert(ctx, req.(*BatchInsertUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetSyncUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetSyncUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetSyncUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetSyncUserInfo(ctx, req.(*GetSyncUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SyncUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SyncUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SyncUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SyncUserInfo(ctx, req.(*SyncUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetNodeInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetNodeInfoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetNodeInfoByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetNodeInfoByUserId(ctx, req.(*GetNodeInfoByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DistributeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DistributeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DistributeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DistributeUser(ctx, req.(*DistributeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserNodeByNodeIdAndCenterUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNodeByNodeIdAndCenterUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserNodeByNodeIdAndCenterUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserNodeByNodeIdAndCenterUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserNodeByNodeIdAndCenterUserId(ctx, req.(*GetUserNodeByNodeIdAndCenterUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelNodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNodeAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelNodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CancelNodeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelNodeAccount(ctx, req.(*CancelNodeAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user_center.user.v2.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _User_UpdatePassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _User_VerifyPassword_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _User_BatchInsert_Handler,
		},
		{
			MethodName: "GetSyncUserInfo",
			Handler:    _User_GetSyncUserInfo_Handler,
		},
		{
			MethodName: "SyncUserInfo",
			Handler:    _User_SyncUserInfo_Handler,
		},
		{
			MethodName: "GetNodeInfoByUserId",
			Handler:    _User_GetNodeInfoByUserId_Handler,
		},
		{
			MethodName: "DistributeUser",
			Handler:    _User_DistributeUser_Handler,
		},
		{
			MethodName: "GetUserNodeByNodeIdAndCenterUserId",
			Handler:    _User_GetUserNodeByNodeIdAndCenterUserId_Handler,
		},
		{
			MethodName: "CancelNodeAccount",
			Handler:    _User_CancelNodeAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center/user/v2/user.proto",
}
