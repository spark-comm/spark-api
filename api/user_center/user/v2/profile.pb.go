// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: user_center/user/v2/profile.proto

package v2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v2 "github.com/spark-comm/spark-api/api/common/enum/v2"
	v21 "github.com/spark-comm/spark-api/api/common/model/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 用户信息
type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // profile id 和 userId 等价
	FaceURL         string    `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL,omitempty"`                               // 头像地址
	Nickname        string    `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                             // 昵称
	Account         string    `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`                               // 账号
	Code            string    `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`                                     // 用户code
	Phone           string    `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                   // 电话
	Gender          v2.Gender `protobuf:"varint,7,opt,name=gender,proto3,enum=api.common.enum.v2.Gender" json:"gender,omitempty"` // 性别
	ShareCode       string    `protobuf:"bytes,8,opt,name=shareCode,proto3" json:"shareCode,omitempty"`                           // 分享码
	Email           string    `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`                                   // 邮箱
	Birth           int64     `protobuf:"varint,10,opt,name=birth,proto3" json:"birth,omitempty"`                                 // 生日
	FullName        string    `protobuf:"bytes,11,opt,name=fullName,proto3" json:"fullName,omitempty"`                            // 真实名称
	PersonId        string    `protobuf:"bytes,12,opt,name=personId,proto3" json:"personId,omitempty"`                            // 身份证号
	CreatedAt       int64     `protobuf:"varint,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                         // 创建时间
	UpdatedAt       int64     `protobuf:"varint,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                         // 更新时间
	DeletedAt       int64     `protobuf:"varint,15,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`                         // 删除时间
	AreaCode        int32     `protobuf:"varint,16,opt,name=areaCode,proto3" json:"areaCode,omitempty"`                           //手机区号
	Status          int32     `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`                               // 账户状态 1 -> 正常,2->冻结
	TenantId        string    `protobuf:"bytes,18,opt,name=tenantId,proto3" json:"tenantId,omitempty"`                            // 租户id
	NodeId          string    `protobuf:"bytes,19,opt,name=nodeId,proto3" json:"nodeId,omitempty"`                                //用户注册节点
	LastLoginNodeId string    `protobuf:"bytes,20,opt,name=lastLoginNodeId,proto3" json:"lastLoginNodeId,omitempty"`              //上次登录节点
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{0}
}

func (x *UserProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProfile) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *UserProfile) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserProfile) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserProfile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UserProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserProfile) GetGender() v2.Gender {
	if x != nil {
		return x.Gender
	}
	return v2.Gender(0)
}

func (x *UserProfile) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

func (x *UserProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserProfile) GetBirth() int64 {
	if x != nil {
		return x.Birth
	}
	return 0
}

func (x *UserProfile) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserProfile) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UserProfile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserProfile) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserProfile) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *UserProfile) GetAreaCode() int32 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *UserProfile) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserProfile) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UserProfile) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UserProfile) GetLastLoginNodeId() string {
	if x != nil {
		return x.LastLoginNodeId
	}
	return ""
}

// 根据账号获取用户信息
// -------------------------------------------
type GetByAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` //账号
}

func (x *GetByAccountReq) Reset() {
	*x = GetByAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByAccountReq) ProtoMessage() {}

func (x *GetByAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByAccountReq.ProtoReflect.Descriptor instead.
func (*GetByAccountReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{1}
}

func (x *GetByAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type GetByAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"` //用户信息
}

func (x *GetByAccountReply) Reset() {
	*x = GetByAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByAccountReply) ProtoMessage() {}

func (x *GetByAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByAccountReply.ProtoReflect.Descriptor instead.
func (*GetByAccountReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{2}
}

func (x *GetByAccountReply) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// 根据手机号获取用户信息
// -------------------------------------------
type GetByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` //手机号
}

func (x *GetByPhoneReq) Reset() {
	*x = GetByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByPhoneReq) ProtoMessage() {}

func (x *GetByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByPhoneReq.ProtoReflect.Descriptor instead.
func (*GetByPhoneReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{3}
}

func (x *GetByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type GetByPhoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*UserProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"` //用户信息
}

func (x *GetByPhoneReply) Reset() {
	*x = GetByPhoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByPhoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByPhoneReply) ProtoMessage() {}

func (x *GetByPhoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByPhoneReply.ProtoReflect.Descriptor instead.
func (*GetByPhoneReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{4}
}

func (x *GetByPhoneReply) GetProfiles() []*UserProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// 根据邮箱获取用户信息
// -------------------------------------------
type GetByEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` //手机号
}

func (x *GetByEmailReq) Reset() {
	*x = GetByEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByEmailReq) ProtoMessage() {}

func (x *GetByEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByEmailReq.ProtoReflect.Descriptor instead.
func (*GetByEmailReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{5}
}

func (x *GetByEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetByEmailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"` //用户信息
}

func (x *GetByEmailReply) Reset() {
	*x = GetByEmailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByEmailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByEmailReply) ProtoMessage() {}

func (x *GetByEmailReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByEmailReply.ProtoReflect.Descriptor instead.
func (*GetByEmailReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{6}
}

func (x *GetByEmailReply) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// 根据邮箱获取用户信息
// -------------------------------------------
type GetByCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` //编码
}

func (x *GetByCodeReq) Reset() {
	*x = GetByCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByCodeReq) ProtoMessage() {}

func (x *GetByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByCodeReq.ProtoReflect.Descriptor instead.
func (*GetByCodeReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{7}
}

func (x *GetByCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetByCodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"` //用户信息
}

func (x *GetByCodeReply) Reset() {
	*x = GetByCodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByCodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByCodeReply) ProtoMessage() {}

func (x *GetByCodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByCodeReply.ProtoReflect.Descriptor instead.
func (*GetByCodeReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{8}
}

func (x *GetByCodeReply) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// 根据ids获取用户信息
type FindProfileByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,3,rep,name=userIds,proto3" json:"userIds,omitempty"` // 用户 id 数组
	NodeId  string   `protobuf:"bytes,4,opt,name=nodeId,proto3" json:"nodeId,omitempty"`   // 节点 id
}

func (x *FindProfileByUserReq) Reset() {
	*x = FindProfileByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindProfileByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProfileByUserReq) ProtoMessage() {}

func (x *FindProfileByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProfileByUserReq.ProtoReflect.Descriptor instead.
func (*FindProfileByUserReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{9}
}

func (x *FindProfileByUserReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *FindProfileByUserReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type FindProfileByUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserProfile `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FindProfileByUserReply) Reset() {
	*x = FindProfileByUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindProfileByUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProfileByUserReply) ProtoMessage() {}

func (x *FindProfileByUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProfileByUserReply.ProtoReflect.Descriptor instead.
func (*FindProfileByUserReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{10}
}

func (x *FindProfileByUserReply) GetData() []*UserProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新用户信息
type UpdateProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户id
	FaceURL    *string    `protobuf:"bytes,2,opt,name=faceURL,proto3,oneof" json:"faceURL,omitempty"`                               // 头像地址
	Nickname   *string    `protobuf:"bytes,3,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`                             // 昵称
	Gender     *v2.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=api.common.enum.v2.Gender,oneof" json:"gender,omitempty"` // 性别
	Message    *string    `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`                               // 签名
	Phone      *string    `protobuf:"bytes,6,opt,name=phone,proto3,oneof" json:"phone,omitempty"`                                   // 电话
	Email      *string    `protobuf:"bytes,7,opt,name=email,proto3,oneof" json:"email,omitempty"`                                   // 邮箱
	Birth      *int64     `protobuf:"varint,9,opt,name=birth,proto3,oneof" json:"birth,omitempty"`                                  // 生日
	NodeId     *string    `protobuf:"bytes,10,opt,name=nodeId,proto3,oneof" json:"nodeId,omitempty"`                                // 节点 id
	FullName   *string    `protobuf:"bytes,11,opt,name=fullName,proto3,oneof" json:"fullName,omitempty"`                            // 真实名称
	PersonId   *string    `protobuf:"bytes,12,opt,name=personId,proto3,oneof" json:"personId,omitempty"`                            // 身份证号
	LastNodeId *string    `protobuf:"bytes,13,opt,name=lastNodeId,proto3,oneof" json:"lastNodeId,omitempty"`                        // 最后一次登录节点id
	Status     *int32     `protobuf:"varint,14,opt,name=status,proto3,oneof" json:"status,omitempty"`                               //用户状态
}

func (x *UpdateProfileReq) Reset() {
	*x = UpdateProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileReq) ProtoMessage() {}

func (x *UpdateProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateProfileReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateProfileReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateProfileReq) GetFaceURL() string {
	if x != nil && x.FaceURL != nil {
		return *x.FaceURL
	}
	return ""
}

func (x *UpdateProfileReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UpdateProfileReq) GetGender() v2.Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return v2.Gender(0)
}

func (x *UpdateProfileReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateProfileReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UpdateProfileReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UpdateProfileReq) GetBirth() int64 {
	if x != nil && x.Birth != nil {
		return *x.Birth
	}
	return 0
}

func (x *UpdateProfileReq) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *UpdateProfileReq) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *UpdateProfileReq) GetPersonId() string {
	if x != nil && x.PersonId != nil {
		return *x.PersonId
	}
	return ""
}

func (x *UpdateProfileReq) GetLastNodeId() string {
	if x != nil && x.LastNodeId != nil {
		return *x.LastNodeId
	}
	return ""
}

func (x *UpdateProfileReq) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type UpdateProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProfileReply) Reset() {
	*x = UpdateProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileReply) ProtoMessage() {}

func (x *UpdateProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileReply.ProtoReflect.Descriptor instead.
func (*UpdateProfileReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{12}
}

// 获取用户信息
type GetProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`       //用户id
	SelectStr []string `protobuf:"bytes,2,rep,name=selectStr,proto3" json:"selectStr,omitempty"` // 目标字段的数组
}

func (x *GetProfileReq) Reset() {
	*x = GetProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileReq) ProtoMessage() {}

func (x *GetProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileReq.ProtoReflect.Descriptor instead.
func (*GetProfileReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{13}
}

func (x *GetProfileReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetProfileReq) GetSelectStr() []string {
	if x != nil {
		return x.SelectStr
	}
	return nil
}

type GetProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *GetProfileReply) Reset() {
	*x = GetProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileReply) ProtoMessage() {}

func (x *GetProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileReply.ProtoReflect.Descriptor instead.
func (*GetProfileReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{14}
}

func (x *GetProfileReply) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// 获取用户列表
type ListProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *v21.Pagination   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                         //分页信息
	IsLimit    bool              `protobuf:"varint,2,opt,name=isLimit,proto3" json:"isLimit,omitempty"`                                                                                  // 是否分页 false:（返回全部） true:（会通过 size 和 num 进行分页）
	SelectStr  []string          `protobuf:"bytes,3,rep,name=selectStr,proto3" json:"selectStr,omitempty"`                                                                               // 目标字段的数组
	Cond       map[string]string `protobuf:"bytes,4,rep,name=cond,proto3" json:"cond,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //直接赋值判定条件
	Supplement []string          `protobuf:"bytes,5,rep,name=supplement,proto3" json:"supplement,omitempty"`                                                                             //补充条件
	NodeId     string            `protobuf:"bytes,6,opt,name=nodeId,proto3" json:"nodeId,omitempty"`                                                                                     // 节点 id
}

func (x *ListProfileReq) Reset() {
	*x = ListProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfileReq) ProtoMessage() {}

func (x *ListProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfileReq.ProtoReflect.Descriptor instead.
func (*ListProfileReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{15}
}

func (x *ListProfileReq) GetPage() *v21.Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListProfileReq) GetIsLimit() bool {
	if x != nil {
		return x.IsLimit
	}
	return false
}

func (x *ListProfileReq) GetSelectStr() []string {
	if x != nil {
		return x.SelectStr
	}
	return nil
}

func (x *ListProfileReq) GetCond() map[string]string {
	if x != nil {
		return x.Cond
	}
	return nil
}

func (x *ListProfileReq) GetSupplement() []string {
	if x != nil {
		return x.Supplement
	}
	return nil
}

func (x *ListProfileReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type ListProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*UserProfile `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListProfileReply) Reset() {
	*x = ListProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfileReply) ProtoMessage() {}

func (x *ListProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfileReply.ProtoReflect.Descriptor instead.
func (*ListProfileReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{16}
}

func (x *ListProfileReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProfileReply) GetList() []*UserProfile {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取用户列表
type GetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     *v21.Pagination `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`               //分页信息
	Nickname *string         `protobuf:"bytes,2,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"` // 昵称
	Account  *string         `protobuf:"bytes,3,opt,name=account,proto3,oneof" json:"account,omitempty"`   // 账号
	Code     *string         `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`         // 用户code
	Phone    *string         `protobuf:"bytes,5,opt,name=phone,proto3,oneof" json:"phone,omitempty"`       // 电话
	Email    *string         `protobuf:"bytes,6,opt,name=email,proto3,oneof" json:"email,omitempty"`       // 邮箱
	FullName *string         `protobuf:"bytes,7,opt,name=fullName,proto3,oneof" json:"fullName,omitempty"` // 真实名称
	PersonId *string         `protobuf:"bytes,8,opt,name=personId,proto3,oneof" json:"personId,omitempty"` // 身份证号
}

func (x *GetListReq) Reset() {
	*x = GetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListReq) ProtoMessage() {}

func (x *GetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListReq.ProtoReflect.Descriptor instead.
func (*GetListReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{17}
}

func (x *GetListReq) GetPage() *v21.Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetListReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *GetListReq) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *GetListReq) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *GetListReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *GetListReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *GetListReq) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *GetListReq) GetPersonId() string {
	if x != nil && x.PersonId != nil {
		return *x.PersonId
	}
	return ""
}

type GetListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*UserProfile `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetListReply) Reset() {
	*x = GetListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListReply) ProtoMessage() {}

func (x *GetListReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListReply.ProtoReflect.Descriptor instead.
func (*GetListReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{18}
}

func (x *GetListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetListReply) GetList() []*UserProfile {
	if x != nil {
		return x.List
	}
	return nil
}

// 批量插入
type BatchInsertProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string         `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` // 节点 id
	List   []*UserProfile `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`     // 插入的数据
}

func (x *BatchInsertProfileReq) Reset() {
	*x = BatchInsertProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInsertProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInsertProfileReq) ProtoMessage() {}

func (x *BatchInsertProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInsertProfileReq.ProtoReflect.Descriptor instead.
func (*BatchInsertProfileReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{19}
}

func (x *BatchInsertProfileReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *BatchInsertProfileReq) GetList() []*UserProfile {
	if x != nil {
		return x.List
	}
	return nil
}

type BatchInsertProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchInsertProfileReply) Reset() {
	*x = BatchInsertProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInsertProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInsertProfileReply) ProtoMessage() {}

func (x *BatchInsertProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInsertProfileReply.ProtoReflect.Descriptor instead.
func (*BatchInsertProfileReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{20}
}

// 是否实名
type IsRealReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 节点 id
	IdCard string `protobuf:"bytes,2,opt,name=idCard,proto3" json:"idCard,omitempty"` // 身份证件
}

func (x *IsRealReq) Reset() {
	*x = IsRealReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRealReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRealReq) ProtoMessage() {}

func (x *IsRealReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRealReq.ProtoReflect.Descriptor instead.
func (*IsRealReq) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{21}
}

func (x *IsRealReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IsRealReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

type IsRealReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsRealReply) Reset() {
	*x = IsRealReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_center_user_v2_profile_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRealReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRealReply) ProtoMessage() {}

func (x *IsRealReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_center_user_v2_profile_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRealReply.ProtoReflect.Descriptor instead.
func (*IsRealReply) Descriptor() ([]byte, []int) {
	return file_user_center_user_v2_profile_proto_rawDescGZIP(), []int{22}
}

var File_user_center_user_v2_profile_proto protoreflect.FileDescriptor

var file_user_center_user_v2_profile_proto_rawDesc = []byte{
	0x0a, 0x21, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x04,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x06, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x25, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x50,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x48, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xca,
	0x04, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x48, 0x02, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x05, 0x62, 0x69, 0x72, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x22, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x33,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x04, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x15,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x3b, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x22,
	0x0d, 0x0a, 0x0b, 0x49, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xcb,
	0x08, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x67, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x61, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x75, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65,
	0x61, 0x6c, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x57, 0x0a, 0x17,
	0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x76, 0x32, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_center_user_v2_profile_proto_rawDescOnce sync.Once
	file_user_center_user_v2_profile_proto_rawDescData = file_user_center_user_v2_profile_proto_rawDesc
)

func file_user_center_user_v2_profile_proto_rawDescGZIP() []byte {
	file_user_center_user_v2_profile_proto_rawDescOnce.Do(func() {
		file_user_center_user_v2_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_center_user_v2_profile_proto_rawDescData)
	})
	return file_user_center_user_v2_profile_proto_rawDescData
}

var file_user_center_user_v2_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_user_center_user_v2_profile_proto_goTypes = []interface{}{
	(*UserProfile)(nil),             // 0: api.user_center.user.v2.UserProfile
	(*GetByAccountReq)(nil),         // 1: api.user_center.user.v2.GetByAccountReq
	(*GetByAccountReply)(nil),       // 2: api.user_center.user.v2.GetByAccountReply
	(*GetByPhoneReq)(nil),           // 3: api.user_center.user.v2.GetByPhoneReq
	(*GetByPhoneReply)(nil),         // 4: api.user_center.user.v2.GetByPhoneReply
	(*GetByEmailReq)(nil),           // 5: api.user_center.user.v2.GetByEmailReq
	(*GetByEmailReply)(nil),         // 6: api.user_center.user.v2.GetByEmailReply
	(*GetByCodeReq)(nil),            // 7: api.user_center.user.v2.GetByCodeReq
	(*GetByCodeReply)(nil),          // 8: api.user_center.user.v2.GetByCodeReply
	(*FindProfileByUserReq)(nil),    // 9: api.user_center.user.v2.FindProfileByUserReq
	(*FindProfileByUserReply)(nil),  // 10: api.user_center.user.v2.FindProfileByUserReply
	(*UpdateProfileReq)(nil),        // 11: api.user_center.user.v2.UpdateProfileReq
	(*UpdateProfileReply)(nil),      // 12: api.user_center.user.v2.UpdateProfileReply
	(*GetProfileReq)(nil),           // 13: api.user_center.user.v2.GetProfileReq
	(*GetProfileReply)(nil),         // 14: api.user_center.user.v2.GetProfileReply
	(*ListProfileReq)(nil),          // 15: api.user_center.user.v2.ListProfileReq
	(*ListProfileReply)(nil),        // 16: api.user_center.user.v2.ListProfileReply
	(*GetListReq)(nil),              // 17: api.user_center.user.v2.GetListReq
	(*GetListReply)(nil),            // 18: api.user_center.user.v2.GetListReply
	(*BatchInsertProfileReq)(nil),   // 19: api.user_center.user.v2.BatchInsertProfileReq
	(*BatchInsertProfileReply)(nil), // 20: api.user_center.user.v2.BatchInsertProfileReply
	(*IsRealReq)(nil),               // 21: api.user_center.user.v2.IsRealReq
	(*IsRealReply)(nil),             // 22: api.user_center.user.v2.IsRealReply
	nil,                             // 23: api.user_center.user.v2.ListProfileReq.CondEntry
	(v2.Gender)(0),                  // 24: api.common.enum.v2.Gender
	(*v21.Pagination)(nil),          // 25: api.common.model.v2.Pagination
}
var file_user_center_user_v2_profile_proto_depIdxs = []int32{
	24, // 0: api.user_center.user.v2.UserProfile.gender:type_name -> api.common.enum.v2.Gender
	0,  // 1: api.user_center.user.v2.GetByAccountReply.profile:type_name -> api.user_center.user.v2.UserProfile
	0,  // 2: api.user_center.user.v2.GetByPhoneReply.profiles:type_name -> api.user_center.user.v2.UserProfile
	0,  // 3: api.user_center.user.v2.GetByEmailReply.profile:type_name -> api.user_center.user.v2.UserProfile
	0,  // 4: api.user_center.user.v2.GetByCodeReply.profile:type_name -> api.user_center.user.v2.UserProfile
	0,  // 5: api.user_center.user.v2.FindProfileByUserReply.data:type_name -> api.user_center.user.v2.UserProfile
	24, // 6: api.user_center.user.v2.UpdateProfileReq.gender:type_name -> api.common.enum.v2.Gender
	0,  // 7: api.user_center.user.v2.GetProfileReply.profile:type_name -> api.user_center.user.v2.UserProfile
	25, // 8: api.user_center.user.v2.ListProfileReq.page:type_name -> api.common.model.v2.Pagination
	23, // 9: api.user_center.user.v2.ListProfileReq.cond:type_name -> api.user_center.user.v2.ListProfileReq.CondEntry
	0,  // 10: api.user_center.user.v2.ListProfileReply.list:type_name -> api.user_center.user.v2.UserProfile
	25, // 11: api.user_center.user.v2.GetListReq.page:type_name -> api.common.model.v2.Pagination
	0,  // 12: api.user_center.user.v2.GetListReply.list:type_name -> api.user_center.user.v2.UserProfile
	0,  // 13: api.user_center.user.v2.BatchInsertProfileReq.list:type_name -> api.user_center.user.v2.UserProfile
	13, // 14: api.user_center.user.v2.Profile.GetProfile:input_type -> api.user_center.user.v2.GetProfileReq
	11, // 15: api.user_center.user.v2.Profile.UpdateProfile:input_type -> api.user_center.user.v2.UpdateProfileReq
	15, // 16: api.user_center.user.v2.Profile.ListProfile:input_type -> api.user_center.user.v2.ListProfileReq
	17, // 17: api.user_center.user.v2.Profile.GetList:input_type -> api.user_center.user.v2.GetListReq
	1,  // 18: api.user_center.user.v2.Profile.GetByAccount:input_type -> api.user_center.user.v2.GetByAccountReq
	3,  // 19: api.user_center.user.v2.Profile.GetByPhone:input_type -> api.user_center.user.v2.GetByPhoneReq
	5,  // 20: api.user_center.user.v2.Profile.GetByEmail:input_type -> api.user_center.user.v2.GetByEmailReq
	7,  // 21: api.user_center.user.v2.Profile.GetByCode:input_type -> api.user_center.user.v2.GetByCodeReq
	9,  // 22: api.user_center.user.v2.Profile.FindProfileByUserId:input_type -> api.user_center.user.v2.FindProfileByUserReq
	19, // 23: api.user_center.user.v2.Profile.BatchInsert:input_type -> api.user_center.user.v2.BatchInsertProfileReq
	21, // 24: api.user_center.user.v2.Profile.IsReal:input_type -> api.user_center.user.v2.IsRealReq
	14, // 25: api.user_center.user.v2.Profile.GetProfile:output_type -> api.user_center.user.v2.GetProfileReply
	12, // 26: api.user_center.user.v2.Profile.UpdateProfile:output_type -> api.user_center.user.v2.UpdateProfileReply
	16, // 27: api.user_center.user.v2.Profile.ListProfile:output_type -> api.user_center.user.v2.ListProfileReply
	18, // 28: api.user_center.user.v2.Profile.GetList:output_type -> api.user_center.user.v2.GetListReply
	2,  // 29: api.user_center.user.v2.Profile.GetByAccount:output_type -> api.user_center.user.v2.GetByAccountReply
	4,  // 30: api.user_center.user.v2.Profile.GetByPhone:output_type -> api.user_center.user.v2.GetByPhoneReply
	6,  // 31: api.user_center.user.v2.Profile.GetByEmail:output_type -> api.user_center.user.v2.GetByEmailReply
	8,  // 32: api.user_center.user.v2.Profile.GetByCode:output_type -> api.user_center.user.v2.GetByCodeReply
	10, // 33: api.user_center.user.v2.Profile.FindProfileByUserId:output_type -> api.user_center.user.v2.FindProfileByUserReply
	20, // 34: api.user_center.user.v2.Profile.BatchInsert:output_type -> api.user_center.user.v2.BatchInsertProfileReply
	22, // 35: api.user_center.user.v2.Profile.IsReal:output_type -> api.user_center.user.v2.IsRealReply
	25, // [25:36] is the sub-list for method output_type
	14, // [14:25] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_user_center_user_v2_profile_proto_init() }
func file_user_center_user_v2_profile_proto_init() {
	if File_user_center_user_v2_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_center_user_v2_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByPhoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByEmailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByCodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindProfileByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindProfileByUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInsertProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInsertProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRealReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_center_user_v2_profile_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRealReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_center_user_v2_profile_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_user_center_user_v2_profile_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_center_user_v2_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_center_user_v2_profile_proto_goTypes,
		DependencyIndexes: file_user_center_user_v2_profile_proto_depIdxs,
		MessageInfos:      file_user_center_user_v2_profile_proto_msgTypes,
	}.Build()
	File_user_center_user_v2_profile_proto = out.File
	file_user_center_user_v2_profile_proto_rawDesc = nil
	file_user_center_user_v2_profile_proto_goTypes = nil
	file_user_center_user_v2_profile_proto_depIdxs = nil
}
