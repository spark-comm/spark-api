// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 节点信息未找到
func IsNodeNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_NODE_NOT_FOUND.String() && e.Code == 404
}

// 节点信息未找到
func ErrorNodeNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorNodeReason_NODE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 主节点必须包含服务器信息
func IsMasterNodeMustIncludeServerInformation(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_MASTER_NODE_MUST_INCLUDE_SERVER_INFORMATION.String() && e.Code == 400
}

// 主节点必须包含服务器信息
func ErrorMasterNodeMustIncludeServerInformation(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorNodeReason_MASTER_NODE_MUST_INCLUDE_SERVER_INFORMATION.String(), fmt.Sprintf(format, args...))
}

// 代理节点必须指定主节点
func IsProxyNodeMustSpecifyTheMasterNode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_PROXY_NODE_MUST_SPECIFY_THE_MASTER_NODE.String() && e.Code == 400
}

// 代理节点必须指定主节点
func ErrorProxyNodeMustSpecifyTheMasterNode(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorNodeReason_PROXY_NODE_MUST_SPECIFY_THE_MASTER_NODE.String(), fmt.Sprintf(format, args...))
}

// 受时间控制的节点必须指定时间
func IsTimeControlledNodesMustSpecifyTime(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_TIME_CONTROLLED_NODES_MUST_SPECIFY_TIME.String() && e.Code == 400
}

// 受时间控制的节点必须指定时间
func ErrorTimeControlledNodesMustSpecifyTime(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorNodeReason_TIME_CONTROLLED_NODES_MUST_SPECIFY_TIME.String(), fmt.Sprintf(format, args...))
}

// 结束时间不能小于开始时间
func IsTheEndTimeCannotBeLessThanTheStartTime(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_THE_END_TIME_CANNOT_BE_LESS_THAN_THE_START_TIME.String() && e.Code == 400
}

// 结束时间不能小于开始时间
func ErrorTheEndTimeCannotBeLessThanTheStartTime(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorNodeReason_THE_END_TIME_CANNOT_BE_LESS_THAN_THE_START_TIME.String(), fmt.Sprintf(format, args...))
}

// 节点下包含可用的代理节点无法删除
func IsNodeContainsChildNodesUnderIt(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_NODE_CONTAINS_CHILD_NODES_UNDER_IT.String() && e.Code == 500
}

// 节点下包含可用的代理节点无法删除
func ErrorNodeContainsChildNodesUnderIt(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNodeReason_NODE_CONTAINS_CHILD_NODES_UNDER_IT.String(), fmt.Sprintf(format, args...))
}

// 节点已存在
func IsNodeIsExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_NODE_IS_EXIST_ERROR.String() && e.Code == 400
}

// 节点已存在
func ErrorNodeIsExistError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorNodeReason_NODE_IS_EXIST_ERROR.String(), fmt.Sprintf(format, args...))
}

// c重置密钥失败
func IsResetKeyError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_RESET_KEY_ERROR.String() && e.Code == 500
}

// c重置密钥失败
func ErrorResetKeyError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNodeReason_RESET_KEY_ERROR.String(), fmt.Sprintf(format, args...))
}

// 设置默认节点失败
func IsSetDefaultNodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNodeReason_SET_DEFAULT_NODE_ERROR.String() && e.Code == 500
}

// 设置默认节点失败
func ErrorSetDefaultNodeError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNodeReason_SET_DEFAULT_NODE_ERROR.String(), fmt.Sprintf(format, args...))
}
