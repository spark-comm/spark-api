// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/node/v2/platform_node.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PlatformNodeInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlatformNodeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformNodeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatformNodeInfoMultiError, or nil if none found.
func (m *PlatformNodeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformNodeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for Weight

	if len(errors) > 0 {
		return PlatformNodeInfoMultiError(errors)
	}

	return nil
}

// PlatformNodeInfoMultiError is an error wrapping multiple validation errors
// returned by PlatformNodeInfo.ValidateAll() if the designated constraints
// aren't met.
type PlatformNodeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformNodeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformNodeInfoMultiError) AllErrors() []error { return m }

// PlatformNodeInfoValidationError is the validation error returned by
// PlatformNodeInfo.Validate if the designated constraints aren't met.
type PlatformNodeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformNodeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformNodeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformNodeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformNodeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformNodeInfoValidationError) ErrorName() string { return "PlatformNodeInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlatformNodeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformNodeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformNodeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformNodeInfoValidationError{}

// Validate checks the field values on AddPlatformNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPlatformNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPlatformNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPlatformNodeReqMultiError, or nil if none found.
func (m *AddPlatformNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPlatformNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Weight

	if len(errors) > 0 {
		return AddPlatformNodeReqMultiError(errors)
	}

	return nil
}

// AddPlatformNodeReqMultiError is an error wrapping multiple validation errors
// returned by AddPlatformNodeReq.ValidateAll() if the designated constraints
// aren't met.
type AddPlatformNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPlatformNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPlatformNodeReqMultiError) AllErrors() []error { return m }

// AddPlatformNodeReqValidationError is the validation error returned by
// AddPlatformNodeReq.Validate if the designated constraints aren't met.
type AddPlatformNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPlatformNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPlatformNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPlatformNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPlatformNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPlatformNodeReqValidationError) ErrorName() string {
	return "AddPlatformNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddPlatformNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPlatformNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPlatformNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPlatformNodeReqValidationError{}

// Validate checks the field values on AddPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPlatformNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPlatformNodeReplyMultiError, or nil if none found.
func (m *AddPlatformNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPlatformNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return AddPlatformNodeReplyMultiError(errors)
	}

	return nil
}

// AddPlatformNodeReplyMultiError is an error wrapping multiple validation
// errors returned by AddPlatformNodeReply.ValidateAll() if the designated
// constraints aren't met.
type AddPlatformNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPlatformNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPlatformNodeReplyMultiError) AllErrors() []error { return m }

// AddPlatformNodeReplyValidationError is the validation error returned by
// AddPlatformNodeReply.Validate if the designated constraints aren't met.
type AddPlatformNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPlatformNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPlatformNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPlatformNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPlatformNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPlatformNodeReplyValidationError) ErrorName() string {
	return "AddPlatformNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddPlatformNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPlatformNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPlatformNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPlatformNodeReplyValidationError{}

// Validate checks the field values on DelPlatformNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelPlatformNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelPlatformNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelPlatformNodeReqMultiError, or nil if none found.
func (m *DelPlatformNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelPlatformNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DelPlatformNodeReqMultiError(errors)
	}

	return nil
}

// DelPlatformNodeReqMultiError is an error wrapping multiple validation errors
// returned by DelPlatformNodeReq.ValidateAll() if the designated constraints
// aren't met.
type DelPlatformNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelPlatformNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelPlatformNodeReqMultiError) AllErrors() []error { return m }

// DelPlatformNodeReqValidationError is the validation error returned by
// DelPlatformNodeReq.Validate if the designated constraints aren't met.
type DelPlatformNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelPlatformNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelPlatformNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelPlatformNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelPlatformNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelPlatformNodeReqValidationError) ErrorName() string {
	return "DelPlatformNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelPlatformNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelPlatformNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelPlatformNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelPlatformNodeReqValidationError{}

// Validate checks the field values on DelPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelPlatformNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelPlatformNodeReplyMultiError, or nil if none found.
func (m *DelPlatformNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelPlatformNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelPlatformNodeReplyMultiError(errors)
	}

	return nil
}

// DelPlatformNodeReplyMultiError is an error wrapping multiple validation
// errors returned by DelPlatformNodeReply.ValidateAll() if the designated
// constraints aren't met.
type DelPlatformNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelPlatformNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelPlatformNodeReplyMultiError) AllErrors() []error { return m }

// DelPlatformNodeReplyValidationError is the validation error returned by
// DelPlatformNodeReply.Validate if the designated constraints aren't met.
type DelPlatformNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelPlatformNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelPlatformNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelPlatformNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelPlatformNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelPlatformNodeReplyValidationError) ErrorName() string {
	return "DelPlatformNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelPlatformNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelPlatformNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelPlatformNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelPlatformNodeReplyValidationError{}

// Validate checks the field values on EditPlatformNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPlatformNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPlatformNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPlatformNodeReqMultiError, or nil if none found.
func (m *EditPlatformNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPlatformNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Address != nil {
		// no validation rules for Address
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if len(errors) > 0 {
		return EditPlatformNodeReqMultiError(errors)
	}

	return nil
}

// EditPlatformNodeReqMultiError is an error wrapping multiple validation
// errors returned by EditPlatformNodeReq.ValidateAll() if the designated
// constraints aren't met.
type EditPlatformNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPlatformNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPlatformNodeReqMultiError) AllErrors() []error { return m }

// EditPlatformNodeReqValidationError is the validation error returned by
// EditPlatformNodeReq.Validate if the designated constraints aren't met.
type EditPlatformNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPlatformNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPlatformNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPlatformNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPlatformNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPlatformNodeReqValidationError) ErrorName() string {
	return "EditPlatformNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditPlatformNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPlatformNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPlatformNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPlatformNodeReqValidationError{}

// Validate checks the field values on EditPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPlatformNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPlatformNodeReplyMultiError, or nil if none found.
func (m *EditPlatformNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPlatformNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditPlatformNodeReplyMultiError(errors)
	}

	return nil
}

// EditPlatformNodeReplyMultiError is an error wrapping multiple validation
// errors returned by EditPlatformNodeReply.ValidateAll() if the designated
// constraints aren't met.
type EditPlatformNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPlatformNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPlatformNodeReplyMultiError) AllErrors() []error { return m }

// EditPlatformNodeReplyValidationError is the validation error returned by
// EditPlatformNodeReply.Validate if the designated constraints aren't met.
type EditPlatformNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPlatformNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPlatformNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPlatformNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPlatformNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPlatformNodeReplyValidationError) ErrorName() string {
	return "EditPlatformNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EditPlatformNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPlatformNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPlatformNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPlatformNodeReplyValidationError{}

// Validate checks the field values on GetPlatformNodeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlatformNodeListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlatformNodeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlatformNodeListReqMultiError, or nil if none found.
func (m *GetPlatformNodeListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlatformNodeListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPlatformNodeListReqMultiError(errors)
	}

	return nil
}

// GetPlatformNodeListReqMultiError is an error wrapping multiple validation
// errors returned by GetPlatformNodeListReq.ValidateAll() if the designated
// constraints aren't met.
type GetPlatformNodeListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlatformNodeListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlatformNodeListReqMultiError) AllErrors() []error { return m }

// GetPlatformNodeListReqValidationError is the validation error returned by
// GetPlatformNodeListReq.Validate if the designated constraints aren't met.
type GetPlatformNodeListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlatformNodeListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlatformNodeListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlatformNodeListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlatformNodeListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlatformNodeListReqValidationError) ErrorName() string {
	return "GetPlatformNodeListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlatformNodeListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlatformNodeListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlatformNodeListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlatformNodeListReqValidationError{}

// Validate checks the field values on GetListPlatformNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListPlatformNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListPlatformNodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListPlatformNodeReplyMultiError, or nil if none found.
func (m *GetListPlatformNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListPlatformNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListPlatformNodeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListPlatformNodeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListPlatformNodeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListPlatformNodeReplyMultiError(errors)
	}

	return nil
}

// GetListPlatformNodeReplyMultiError is an error wrapping multiple validation
// errors returned by GetListPlatformNodeReply.ValidateAll() if the designated
// constraints aren't met.
type GetListPlatformNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListPlatformNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListPlatformNodeReplyMultiError) AllErrors() []error { return m }

// GetListPlatformNodeReplyValidationError is the validation error returned by
// GetListPlatformNodeReply.Validate if the designated constraints aren't met.
type GetListPlatformNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPlatformNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPlatformNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPlatformNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPlatformNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPlatformNodeReplyValidationError) ErrorName() string {
	return "GetListPlatformNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetListPlatformNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPlatformNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPlatformNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPlatformNodeReplyValidationError{}

// Validate checks the field values on GetAllAddressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAddressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAddressReqMultiError, or nil if none found.
func (m *GetAllAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllAddressReqMultiError(errors)
	}

	return nil
}

// GetAllAddressReqMultiError is an error wrapping multiple validation errors
// returned by GetAllAddressReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAddressReqMultiError) AllErrors() []error { return m }

// GetAllAddressReqValidationError is the validation error returned by
// GetAllAddressReq.Validate if the designated constraints aren't met.
type GetAllAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAddressReqValidationError) ErrorName() string { return "GetAllAddressReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAllAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAddressReqValidationError{}

// Validate checks the field values on GetAllAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllAddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAddressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAddressReplyMultiError, or nil if none found.
func (m *GetAllAddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllAddressReplyMultiError(errors)
	}

	return nil
}

// GetAllAddressReplyMultiError is an error wrapping multiple validation errors
// returned by GetAllAddressReply.ValidateAll() if the designated constraints
// aren't met.
type GetAllAddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAddressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAddressReplyMultiError) AllErrors() []error { return m }

// GetAllAddressReplyValidationError is the validation error returned by
// GetAllAddressReply.Validate if the designated constraints aren't met.
type GetAllAddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAddressReplyValidationError) ErrorName() string {
	return "GetAllAddressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllAddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAddressReplyValidationError{}
