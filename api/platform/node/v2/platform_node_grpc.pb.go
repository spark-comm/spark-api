// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: platform/node/v2/platform_node.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlatformNode_Add_FullMethodName           = "/api.platform.node.v2.PlatformNode/Add"
	PlatformNode_Del_FullMethodName           = "/api.platform.node.v2.PlatformNode/Del"
	PlatformNode_Edit_FullMethodName          = "/api.platform.node.v2.PlatformNode/Edit"
	PlatformNode_GetList_FullMethodName       = "/api.platform.node.v2.PlatformNode/GetList"
	PlatformNode_GetAllAddress_FullMethodName = "/api.platform.node.v2.PlatformNode/GetAllAddress"
)

// PlatformNodeClient is the client API for PlatformNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformNodeClient interface {
	// 新加节点
	Add(ctx context.Context, in *AddPlatformNodeReq, opts ...grpc.CallOption) (*AddPlatformNodeReply, error)
	// 删除节点
	Del(ctx context.Context, in *DelPlatformNodeReq, opts ...grpc.CallOption) (*DelPlatformNodeReply, error)
	// 编辑节点
	Edit(ctx context.Context, in *EditPlatformNodeReq, opts ...grpc.CallOption) (*EditPlatformNodeReply, error)
	// 获取节点列表
	GetList(ctx context.Context, in *GetPlatformNodeListReq, opts ...grpc.CallOption) (*GetListPlatformNodeReply, error)
	// 获取所有节点列表
	GetAllAddress(ctx context.Context, in *GetAllAddressReq, opts ...grpc.CallOption) (*GetAllAddressReply, error)
}

type platformNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformNodeClient(cc grpc.ClientConnInterface) PlatformNodeClient {
	return &platformNodeClient{cc}
}

func (c *platformNodeClient) Add(ctx context.Context, in *AddPlatformNodeReq, opts ...grpc.CallOption) (*AddPlatformNodeReply, error) {
	out := new(AddPlatformNodeReply)
	err := c.cc.Invoke(ctx, PlatformNode_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformNodeClient) Del(ctx context.Context, in *DelPlatformNodeReq, opts ...grpc.CallOption) (*DelPlatformNodeReply, error) {
	out := new(DelPlatformNodeReply)
	err := c.cc.Invoke(ctx, PlatformNode_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformNodeClient) Edit(ctx context.Context, in *EditPlatformNodeReq, opts ...grpc.CallOption) (*EditPlatformNodeReply, error) {
	out := new(EditPlatformNodeReply)
	err := c.cc.Invoke(ctx, PlatformNode_Edit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformNodeClient) GetList(ctx context.Context, in *GetPlatformNodeListReq, opts ...grpc.CallOption) (*GetListPlatformNodeReply, error) {
	out := new(GetListPlatformNodeReply)
	err := c.cc.Invoke(ctx, PlatformNode_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformNodeClient) GetAllAddress(ctx context.Context, in *GetAllAddressReq, opts ...grpc.CallOption) (*GetAllAddressReply, error) {
	out := new(GetAllAddressReply)
	err := c.cc.Invoke(ctx, PlatformNode_GetAllAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformNodeServer is the server API for PlatformNode service.
// All implementations must embed UnimplementedPlatformNodeServer
// for forward compatibility
type PlatformNodeServer interface {
	// 新加节点
	Add(context.Context, *AddPlatformNodeReq) (*AddPlatformNodeReply, error)
	// 删除节点
	Del(context.Context, *DelPlatformNodeReq) (*DelPlatformNodeReply, error)
	// 编辑节点
	Edit(context.Context, *EditPlatformNodeReq) (*EditPlatformNodeReply, error)
	// 获取节点列表
	GetList(context.Context, *GetPlatformNodeListReq) (*GetListPlatformNodeReply, error)
	// 获取所有节点列表
	GetAllAddress(context.Context, *GetAllAddressReq) (*GetAllAddressReply, error)
	mustEmbedUnimplementedPlatformNodeServer()
}

// UnimplementedPlatformNodeServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformNodeServer struct {
}

func (UnimplementedPlatformNodeServer) Add(context.Context, *AddPlatformNodeReq) (*AddPlatformNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPlatformNodeServer) Del(context.Context, *DelPlatformNodeReq) (*DelPlatformNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedPlatformNodeServer) Edit(context.Context, *EditPlatformNodeReq) (*EditPlatformNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedPlatformNodeServer) GetList(context.Context, *GetPlatformNodeListReq) (*GetListPlatformNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPlatformNodeServer) GetAllAddress(context.Context, *GetAllAddressReq) (*GetAllAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAddress not implemented")
}
func (UnimplementedPlatformNodeServer) mustEmbedUnimplementedPlatformNodeServer() {}

// UnsafePlatformNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformNodeServer will
// result in compilation errors.
type UnsafePlatformNodeServer interface {
	mustEmbedUnimplementedPlatformNodeServer()
}

func RegisterPlatformNodeServer(s grpc.ServiceRegistrar, srv PlatformNodeServer) {
	s.RegisterService(&PlatformNode_ServiceDesc, srv)
}

func _PlatformNode_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlatformNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformNodeServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformNode_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformNodeServer).Add(ctx, req.(*AddPlatformNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformNode_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPlatformNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformNodeServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformNode_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformNodeServer).Del(ctx, req.(*DelPlatformNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformNode_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPlatformNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformNodeServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformNode_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformNodeServer).Edit(ctx, req.(*EditPlatformNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformNode_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformNodeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformNodeServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformNode_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformNodeServer).GetList(ctx, req.(*GetPlatformNodeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformNode_GetAllAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformNodeServer).GetAllAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformNode_GetAllAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformNodeServer).GetAllAddress(ctx, req.(*GetAllAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformNode_ServiceDesc is the grpc.ServiceDesc for PlatformNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.platform.node.v2.PlatformNode",
	HandlerType: (*PlatformNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PlatformNode_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _PlatformNode_Del_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _PlatformNode_Edit_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PlatformNode_GetList_Handler,
		},
		{
			MethodName: "GetAllAddress",
			Handler:    _PlatformNode_GetAllAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/node/v2/platform_node.proto",
}
