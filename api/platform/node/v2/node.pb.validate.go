// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/node/v2/node.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NodeDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeDetailsMultiError, or
// nil if none found.
func (m *NodeDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PubKey

	// no validation rules for PriKey

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeDetailsValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeDetailsValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeDetailsValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodeDetailsMultiError(errors)
	}

	return nil
}

// NodeDetailsMultiError is an error wrapping multiple validation errors
// returned by NodeDetails.ValidateAll() if the designated constraints aren't met.
type NodeDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeDetailsMultiError) AllErrors() []error { return m }

// NodeDetailsValidationError is the validation error returned by
// NodeDetails.Validate if the designated constraints aren't met.
type NodeDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeDetailsValidationError) ErrorName() string { return "NodeDetailsValidationError" }

// Error satisfies the builtin error interface
func (e NodeDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeDetailsValidationError{}

// Validate checks the field values on AddNodeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddNodeReqMultiError, or
// nil if none found.
func (m *AddNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddNodeReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MasterApi

	if utf8.RuneCountInString(m.GetCode()) < 4 {
		err := AddNodeReqValidationError{
			field:  "Code",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ImApiUrl

	// no validation rules for ImWsUrl

	// no validation rules for AvAppid

	// no validation rules for AvSecret

	// no validation rules for Logo

	// no validation rules for Version

	// no validation rules for NodeType

	// no validation rules for MasterNodeId

	// no validation rules for PromotionCode

	// no validation rules for ManageApi

	if len(errors) > 0 {
		return AddNodeReqMultiError(errors)
	}

	return nil
}

// AddNodeReqMultiError is an error wrapping multiple validation errors
// returned by AddNodeReq.ValidateAll() if the designated constraints aren't met.
type AddNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodeReqMultiError) AllErrors() []error { return m }

// AddNodeReqValidationError is the validation error returned by
// AddNodeReq.Validate if the designated constraints aren't met.
type AddNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodeReqValidationError) ErrorName() string { return "AddNodeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodeReqValidationError{}

// Validate checks the field values on AddNodeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddNodeReplyMultiError, or
// nil if none found.
func (m *AddNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return AddNodeReplyMultiError(errors)
	}

	return nil
}

// AddNodeReplyMultiError is an error wrapping multiple validation errors
// returned by AddNodeReply.ValidateAll() if the designated constraints aren't met.
type AddNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodeReplyMultiError) AllErrors() []error { return m }

// AddNodeReplyValidationError is the validation error returned by
// AddNodeReply.Validate if the designated constraints aren't met.
type AddNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodeReplyValidationError) ErrorName() string { return "AddNodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodeReplyValidationError{}

// Validate checks the field values on DelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DelReqMultiError, or nil if none found.
func (m *DelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return DelReqMultiError(errors)
	}

	return nil
}

// DelReqMultiError is an error wrapping multiple validation errors returned by
// DelReq.ValidateAll() if the designated constraints aren't met.
type DelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelReqMultiError) AllErrors() []error { return m }

// DelReqValidationError is the validation error returned by DelReq.Validate if
// the designated constraints aren't met.
type DelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelReqValidationError) ErrorName() string { return "DelReqValidationError" }

// Error satisfies the builtin error interface
func (e DelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelReqValidationError{}

// Validate checks the field values on DelReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelReplyMultiError, or nil
// if none found.
func (m *DelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelReplyMultiError(errors)
	}

	return nil
}

// DelReplyMultiError is an error wrapping multiple validation errors returned
// by DelReply.ValidateAll() if the designated constraints aren't met.
type DelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelReplyMultiError) AllErrors() []error { return m }

// DelReplyValidationError is the validation error returned by
// DelReply.Validate if the designated constraints aren't met.
type DelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelReplyValidationError) ErrorName() string { return "DelReplyValidationError" }

// Error satisfies the builtin error interface
func (e DelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelReplyValidationError{}

// Validate checks the field values on EditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EditReqMultiError, or nil if none found.
func (m *EditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.MasterApi != nil {
		// no validation rules for MasterApi
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.ImApiUrl != nil {
		// no validation rules for ImApiUrl
	}

	if m.ImWsUrl != nil {
		// no validation rules for ImWsUrl
	}

	if m.AvAppid != nil {
		// no validation rules for AvAppid
	}

	if m.AvSecret != nil {
		// no validation rules for AvSecret
	}

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.PromotionCode != nil {
		// no validation rules for PromotionCode
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if len(errors) > 0 {
		return EditReqMultiError(errors)
	}

	return nil
}

// EditReqMultiError is an error wrapping multiple validation errors returned
// by EditReq.ValidateAll() if the designated constraints aren't met.
type EditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditReqMultiError) AllErrors() []error { return m }

// EditReqValidationError is the validation error returned by EditReq.Validate
// if the designated constraints aren't met.
type EditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditReqValidationError) ErrorName() string { return "EditReqValidationError" }

// Error satisfies the builtin error interface
func (e EditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditReqValidationError{}

// Validate checks the field values on EditReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditReplyMultiError, or nil
// if none found.
func (m *EditReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EditReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditReplyMultiError(errors)
	}

	return nil
}

// EditReplyMultiError is an error wrapping multiple validation errors returned
// by EditReply.ValidateAll() if the designated constraints aren't met.
type EditReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditReplyMultiError) AllErrors() []error { return m }

// EditReplyValidationError is the validation error returned by
// EditReply.Validate if the designated constraints aren't met.
type EditReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditReplyValidationError) ErrorName() string { return "EditReplyValidationError" }

// Error satisfies the builtin error interface
func (e EditReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditReplyValidationError{}

// Validate checks the field values on EditStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditStatusReqMultiError, or
// nil if none found.
func (m *EditStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Status

	if m.StartTime != nil {
		// no validation rules for StartTime
	}

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if len(errors) > 0 {
		return EditStatusReqMultiError(errors)
	}

	return nil
}

// EditStatusReqMultiError is an error wrapping multiple validation errors
// returned by EditStatusReq.ValidateAll() if the designated constraints
// aren't met.
type EditStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditStatusReqMultiError) AllErrors() []error { return m }

// EditStatusReqValidationError is the validation error returned by
// EditStatusReq.Validate if the designated constraints aren't met.
type EditStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditStatusReqValidationError) ErrorName() string { return "EditStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e EditStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditStatusReqValidationError{}

// Validate checks the field values on EditStatusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditStatusReplyMultiError, or nil if none found.
func (m *EditStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EditStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditStatusReplyMultiError(errors)
	}

	return nil
}

// EditStatusReplyMultiError is an error wrapping multiple validation errors
// returned by EditStatusReply.ValidateAll() if the designated constraints
// aren't met.
type EditStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditStatusReplyMultiError) AllErrors() []error { return m }

// EditStatusReplyValidationError is the validation error returned by
// EditStatusReply.Validate if the designated constraints aren't met.
type EditStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditStatusReplyValidationError) ErrorName() string { return "EditStatusReplyValidationError" }

// Error satisfies the builtin error interface
func (e EditStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditStatusReplyValidationError{}

// Validate checks the field values on ResetKeyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetKeyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetKeyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetKeyReqMultiError, or
// nil if none found.
func (m *ResetKeyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetKeyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return ResetKeyReqMultiError(errors)
	}

	return nil
}

// ResetKeyReqMultiError is an error wrapping multiple validation errors
// returned by ResetKeyReq.ValidateAll() if the designated constraints aren't met.
type ResetKeyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetKeyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetKeyReqMultiError) AllErrors() []error { return m }

// ResetKeyReqValidationError is the validation error returned by
// ResetKeyReq.Validate if the designated constraints aren't met.
type ResetKeyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetKeyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetKeyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetKeyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetKeyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetKeyReqValidationError) ErrorName() string { return "ResetKeyReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetKeyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetKeyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetKeyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetKeyReqValidationError{}

// Validate checks the field values on ResetKeyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetKeyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetKeyReplyMultiError, or
// nil if none found.
func (m *ResetKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetKeyReplyMultiError(errors)
	}

	return nil
}

// ResetKeyReplyMultiError is an error wrapping multiple validation errors
// returned by ResetKeyReply.ValidateAll() if the designated constraints
// aren't met.
type ResetKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetKeyReplyMultiError) AllErrors() []error { return m }

// ResetKeyReplyValidationError is the validation error returned by
// ResetKeyReply.Validate if the designated constraints aren't met.
type ResetKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetKeyReplyValidationError) ErrorName() string { return "ResetKeyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ResetKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetKeyReplyValidationError{}

// Validate checks the field values on GetInfoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetInfoReqMultiError, or
// nil if none found.
func (m *GetInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetInfoReqMultiError(errors)
	}

	return nil
}

// GetInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetInfoReq.ValidateAll() if the designated constraints aren't met.
type GetInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInfoReqMultiError) AllErrors() []error { return m }

// GetInfoReqValidationError is the validation error returned by
// GetInfoReq.Validate if the designated constraints aren't met.
type GetInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoReqValidationError) ErrorName() string { return "GetInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoReqValidationError{}

// Validate checks the field values on GetInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetInfoReplyMultiError, or
// nil if none found.
func (m *GetInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInfoReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInfoReplyMultiError(errors)
	}

	return nil
}

// GetInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetInfoReply.ValidateAll() if the designated constraints aren't met.
type GetInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInfoReplyMultiError) AllErrors() []error { return m }

// GetInfoReplyValidationError is the validation error returned by
// GetInfoReply.Validate if the designated constraints aren't met.
type GetInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoReplyValidationError) ErrorName() string { return "GetInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoReplyValidationError{}

// Validate checks the field values on GetNodeByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeByCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeByCodeReqMultiError, or nil if none found.
func (m *GetNodeByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetNodeByCodeReqMultiError(errors)
	}

	return nil
}

// GetNodeByCodeReqMultiError is an error wrapping multiple validation errors
// returned by GetNodeByCodeReq.ValidateAll() if the designated constraints
// aren't met.
type GetNodeByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeByCodeReqMultiError) AllErrors() []error { return m }

// GetNodeByCodeReqValidationError is the validation error returned by
// GetNodeByCodeReq.Validate if the designated constraints aren't met.
type GetNodeByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeByCodeReqValidationError) ErrorName() string { return "GetNodeByCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeByCodeReqValidationError{}

// Validate checks the field values on GetNodeByCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeByCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeByCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeByCodeReplyMultiError, or nil if none found.
func (m *GetNodeByCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeByCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeByCodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeByCodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeByCodeReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNodeByCodeReplyMultiError(errors)
	}

	return nil
}

// GetNodeByCodeReplyMultiError is an error wrapping multiple validation errors
// returned by GetNodeByCodeReply.ValidateAll() if the designated constraints
// aren't met.
type GetNodeByCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeByCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeByCodeReplyMultiError) AllErrors() []error { return m }

// GetNodeByCodeReplyValidationError is the validation error returned by
// GetNodeByCodeReply.Validate if the designated constraints aren't met.
type GetNodeByCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeByCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeByCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeByCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeByCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeByCodeReplyValidationError) ErrorName() string {
	return "GetNodeByCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeByCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeByCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeByCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeByCodeReplyValidationError{}

// Validate checks the field values on GetListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReqMultiError, or
// nil if none found.
func (m *GetListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Version

	// no validation rules for Code

	if len(errors) > 0 {
		return GetListReqMultiError(errors)
	}

	return nil
}

// GetListReqMultiError is an error wrapping multiple validation errors
// returned by GetListReq.ValidateAll() if the designated constraints aren't met.
type GetListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReqMultiError) AllErrors() []error { return m }

// GetListReqValidationError is the validation error returned by
// GetListReq.Validate if the designated constraints aren't met.
type GetListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReqValidationError) ErrorName() string { return "GetListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReqValidationError{}

// Validate checks the field values on GetListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReplyMultiError, or
// nil if none found.
func (m *GetListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListReplyMultiError(errors)
	}

	return nil
}

// GetListReplyMultiError is an error wrapping multiple validation errors
// returned by GetListReply.ValidateAll() if the designated constraints aren't met.
type GetListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReplyMultiError) AllErrors() []error { return m }

// GetListReplyValidationError is the validation error returned by
// GetListReply.Validate if the designated constraints aren't met.
type GetListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReplyValidationError) ErrorName() string { return "GetListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReplyValidationError{}

// Validate checks the field values on GetAllListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllListReqMultiError, or
// nil if none found.
func (m *GetAllListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Version

	// no validation rules for Code

	if len(errors) > 0 {
		return GetAllListReqMultiError(errors)
	}

	return nil
}

// GetAllListReqMultiError is an error wrapping multiple validation errors
// returned by GetAllListReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllListReqMultiError) AllErrors() []error { return m }

// GetAllListReqValidationError is the validation error returned by
// GetAllListReq.Validate if the designated constraints aren't met.
type GetAllListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllListReqValidationError) ErrorName() string { return "GetAllListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAllListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllListReqValidationError{}

// Validate checks the field values on GetAllListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllListReplyMultiError, or nil if none found.
func (m *GetAllListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllListReplyMultiError(errors)
	}

	return nil
}

// GetAllListReplyMultiError is an error wrapping multiple validation errors
// returned by GetAllListReply.ValidateAll() if the designated constraints
// aren't met.
type GetAllListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllListReplyMultiError) AllErrors() []error { return m }

// GetAllListReplyValidationError is the validation error returned by
// GetAllListReply.Validate if the designated constraints aren't met.
type GetAllListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllListReplyValidationError) ErrorName() string { return "GetAllListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAllListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllListReplyValidationError{}

// Validate checks the field values on GetDefNodeNodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDefNodeNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefNodeNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefNodeNodeReqMultiError, or nil if none found.
func (m *GetDefNodeNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefNodeNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDefNodeNodeReqMultiError(errors)
	}

	return nil
}

// GetDefNodeNodeReqMultiError is an error wrapping multiple validation errors
// returned by GetDefNodeNodeReq.ValidateAll() if the designated constraints
// aren't met.
type GetDefNodeNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefNodeNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefNodeNodeReqMultiError) AllErrors() []error { return m }

// GetDefNodeNodeReqValidationError is the validation error returned by
// GetDefNodeNodeReq.Validate if the designated constraints aren't met.
type GetDefNodeNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefNodeNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefNodeNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefNodeNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefNodeNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefNodeNodeReqValidationError) ErrorName() string {
	return "GetDefNodeNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefNodeNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefNodeNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefNodeNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefNodeNodeReqValidationError{}

// Validate checks the field values on GetDefNodeNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefNodeNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefNodeNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefNodeNodeReplyMultiError, or nil if none found.
func (m *GetDefNodeNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefNodeNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefNodeNodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefNodeNodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefNodeNodeReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDefNodeNodeReplyMultiError(errors)
	}

	return nil
}

// GetDefNodeNodeReplyMultiError is an error wrapping multiple validation
// errors returned by GetDefNodeNodeReply.ValidateAll() if the designated
// constraints aren't met.
type GetDefNodeNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefNodeNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefNodeNodeReplyMultiError) AllErrors() []error { return m }

// GetDefNodeNodeReplyValidationError is the validation error returned by
// GetDefNodeNodeReply.Validate if the designated constraints aren't met.
type GetDefNodeNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefNodeNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefNodeNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefNodeNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefNodeNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefNodeNodeReplyValidationError) ErrorName() string {
	return "GetDefNodeNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefNodeNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefNodeNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefNodeNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefNodeNodeReplyValidationError{}

// Validate checks the field values on SetDefNodeNodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetDefNodeNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefNodeNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDefNodeNodeReqMultiError, or nil if none found.
func (m *SetDefNodeNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefNodeNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return SetDefNodeNodeReqMultiError(errors)
	}

	return nil
}

// SetDefNodeNodeReqMultiError is an error wrapping multiple validation errors
// returned by SetDefNodeNodeReq.ValidateAll() if the designated constraints
// aren't met.
type SetDefNodeNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefNodeNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefNodeNodeReqMultiError) AllErrors() []error { return m }

// SetDefNodeNodeReqValidationError is the validation error returned by
// SetDefNodeNodeReq.Validate if the designated constraints aren't met.
type SetDefNodeNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefNodeNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefNodeNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefNodeNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefNodeNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefNodeNodeReqValidationError) ErrorName() string {
	return "SetDefNodeNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefNodeNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefNodeNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefNodeNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefNodeNodeReqValidationError{}

// Validate checks the field values on SetDefNodeNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDefNodeNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefNodeNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDefNodeNodeReplyMultiError, or nil if none found.
func (m *SetDefNodeNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefNodeNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDefNodeNodeReplyMultiError(errors)
	}

	return nil
}

// SetDefNodeNodeReplyMultiError is an error wrapping multiple validation
// errors returned by SetDefNodeNodeReply.ValidateAll() if the designated
// constraints aren't met.
type SetDefNodeNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefNodeNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefNodeNodeReplyMultiError) AllErrors() []error { return m }

// SetDefNodeNodeReplyValidationError is the validation error returned by
// SetDefNodeNodeReply.Validate if the designated constraints aren't met.
type SetDefNodeNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefNodeNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefNodeNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefNodeNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefNodeNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefNodeNodeReplyValidationError) ErrorName() string {
	return "SetDefNodeNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefNodeNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefNodeNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefNodeNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefNodeNodeReplyValidationError{}

// Validate checks the field values on GetMasterSyncInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterSyncInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterSyncInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMasterSyncInfoReqMultiError, or nil if none found.
func (m *GetMasterSyncInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSyncInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetMasterSyncInfoReqMultiError(errors)
	}

	return nil
}

// GetMasterSyncInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetMasterSyncInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetMasterSyncInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSyncInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSyncInfoReqMultiError) AllErrors() []error { return m }

// GetMasterSyncInfoReqValidationError is the validation error returned by
// GetMasterSyncInfoReq.Validate if the designated constraints aren't met.
type GetMasterSyncInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSyncInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSyncInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSyncInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSyncInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSyncInfoReqValidationError) ErrorName() string {
	return "GetMasterSyncInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSyncInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSyncInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSyncInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSyncInfoReqValidationError{}

// Validate checks the field values on GetMasterSyncInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterSyncInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterSyncInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMasterSyncInfoReplyMultiError, or nil if none found.
func (m *GetMasterSyncInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterSyncInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMasterSyncInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMasterSyncInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMasterSyncInfoReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMasterSyncInfoReplyMultiError(errors)
	}

	return nil
}

// GetMasterSyncInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetMasterSyncInfoReply.ValidateAll() if the designated
// constraints aren't met.
type GetMasterSyncInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterSyncInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterSyncInfoReplyMultiError) AllErrors() []error { return m }

// GetMasterSyncInfoReplyValidationError is the validation error returned by
// GetMasterSyncInfoReply.Validate if the designated constraints aren't met.
type GetMasterSyncInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterSyncInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterSyncInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterSyncInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterSyncInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterSyncInfoReplyValidationError) ErrorName() string {
	return "GetMasterSyncInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterSyncInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterSyncInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterSyncInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterSyncInfoReplyValidationError{}

// Validate checks the field values on GetMasterInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMasterInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMasterInfoReqMultiError, or nil if none found.
func (m *GetMasterInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetMasterInfoReqMultiError(errors)
	}

	return nil
}

// GetMasterInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetMasterInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetMasterInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterInfoReqMultiError) AllErrors() []error { return m }

// GetMasterInfoReqValidationError is the validation error returned by
// GetMasterInfoReq.Validate if the designated constraints aren't met.
type GetMasterInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterInfoReqValidationError) ErrorName() string { return "GetMasterInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMasterInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterInfoReqValidationError{}

// Validate checks the field values on GetMasterInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMasterInfoReplyMultiError, or nil if none found.
func (m *GetMasterInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMasterInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMasterInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMasterInfoReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMasterInfoReplyMultiError(errors)
	}

	return nil
}

// GetMasterInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetMasterInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetMasterInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterInfoReplyMultiError) AllErrors() []error { return m }

// GetMasterInfoReplyValidationError is the validation error returned by
// GetMasterInfoReply.Validate if the designated constraints aren't met.
type GetMasterInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterInfoReplyValidationError) ErrorName() string {
	return "GetMasterInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterInfoReplyValidationError{}

// Validate checks the field values on GetDistributeInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDistributeInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDistributeInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDistributeInfoReqMultiError, or nil if none found.
func (m *GetDistributeInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDistributeInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetDistributeInfoReqMultiError(errors)
	}

	return nil
}

// GetDistributeInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetDistributeInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetDistributeInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDistributeInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDistributeInfoReqMultiError) AllErrors() []error { return m }

// GetDistributeInfoReqValidationError is the validation error returned by
// GetDistributeInfoReq.Validate if the designated constraints aren't met.
type GetDistributeInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDistributeInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDistributeInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDistributeInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDistributeInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDistributeInfoReqValidationError) ErrorName() string {
	return "GetDistributeInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDistributeInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDistributeInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDistributeInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDistributeInfoReqValidationError{}

// Validate checks the field values on DistributeInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeInfoReplyMultiError, or nil if none found.
func (m *DistributeInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributeInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributeInfoReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributeInfoReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeType

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributeInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributeInfoReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributeInfoReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DistributeInfoReplyMultiError(errors)
	}

	return nil
}

// DistributeInfoReplyMultiError is an error wrapping multiple validation
// errors returned by DistributeInfoReply.ValidateAll() if the designated
// constraints aren't met.
type DistributeInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeInfoReplyMultiError) AllErrors() []error { return m }

// DistributeInfoReplyValidationError is the validation error returned by
// DistributeInfoReply.Validate if the designated constraints aren't met.
type DistributeInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeInfoReplyValidationError) ErrorName() string {
	return "DistributeInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeInfoReplyValidationError{}

// Validate checks the field values on GetMasterNodeDetailsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterNodeDetailsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterNodeDetailsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMasterNodeDetailsReqMultiError, or nil if none found.
func (m *GetMasterNodeDetailsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterNodeDetailsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetMasterNodeDetailsReqMultiError(errors)
	}

	return nil
}

// GetMasterNodeDetailsReqMultiError is an error wrapping multiple validation
// errors returned by GetMasterNodeDetailsReq.ValidateAll() if the designated
// constraints aren't met.
type GetMasterNodeDetailsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterNodeDetailsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterNodeDetailsReqMultiError) AllErrors() []error { return m }

// GetMasterNodeDetailsReqValidationError is the validation error returned by
// GetMasterNodeDetailsReq.Validate if the designated constraints aren't met.
type GetMasterNodeDetailsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterNodeDetailsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterNodeDetailsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterNodeDetailsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterNodeDetailsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterNodeDetailsReqValidationError) ErrorName() string {
	return "GetMasterNodeDetailsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterNodeDetailsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterNodeDetailsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterNodeDetailsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterNodeDetailsReqValidationError{}

// Validate checks the field values on GetMasterNodeDetailsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMasterNodeDetailsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMasterNodeDetailsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMasterNodeDetailsReplyMultiError, or nil if none found.
func (m *GetMasterNodeDetailsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMasterNodeDetailsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMasterNodeDetailsReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMasterNodeDetailsReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMasterNodeDetailsReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMasterNodeDetailsReplyMultiError(errors)
	}

	return nil
}

// GetMasterNodeDetailsReplyMultiError is an error wrapping multiple validation
// errors returned by GetMasterNodeDetailsReply.ValidateAll() if the
// designated constraints aren't met.
type GetMasterNodeDetailsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMasterNodeDetailsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMasterNodeDetailsReplyMultiError) AllErrors() []error { return m }

// GetMasterNodeDetailsReplyValidationError is the validation error returned by
// GetMasterNodeDetailsReply.Validate if the designated constraints aren't met.
type GetMasterNodeDetailsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMasterNodeDetailsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMasterNodeDetailsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMasterNodeDetailsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMasterNodeDetailsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMasterNodeDetailsReplyValidationError) ErrorName() string {
	return "GetMasterNodeDetailsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMasterNodeDetailsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMasterNodeDetailsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMasterNodeDetailsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMasterNodeDetailsReplyValidationError{}

// Validate checks the field values on GetAllMasterListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMasterListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMasterListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMasterListReqMultiError, or nil if none found.
func (m *GetAllMasterListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMasterListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllMasterListReqMultiError(errors)
	}

	return nil
}

// GetAllMasterListReqMultiError is an error wrapping multiple validation
// errors returned by GetAllMasterListReq.ValidateAll() if the designated
// constraints aren't met.
type GetAllMasterListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMasterListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMasterListReqMultiError) AllErrors() []error { return m }

// GetAllMasterListReqValidationError is the validation error returned by
// GetAllMasterListReq.Validate if the designated constraints aren't met.
type GetAllMasterListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMasterListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMasterListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMasterListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMasterListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMasterListReqValidationError) ErrorName() string {
	return "GetAllMasterListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMasterListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMasterListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMasterListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMasterListReqValidationError{}

// Validate checks the field values on GetAllMasterListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMasterListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMasterListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMasterListReplyMultiError, or nil if none found.
func (m *GetAllMasterListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMasterListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllMasterListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllMasterListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllMasterListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllMasterListReplyMultiError(errors)
	}

	return nil
}

// GetAllMasterListReplyMultiError is an error wrapping multiple validation
// errors returned by GetAllMasterListReply.ValidateAll() if the designated
// constraints aren't met.
type GetAllMasterListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMasterListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMasterListReplyMultiError) AllErrors() []error { return m }

// GetAllMasterListReplyValidationError is the validation error returned by
// GetAllMasterListReply.Validate if the designated constraints aren't met.
type GetAllMasterListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMasterListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMasterListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMasterListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMasterListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMasterListReplyValidationError) ErrorName() string {
	return "GetAllMasterListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMasterListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMasterListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMasterListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMasterListReplyValidationError{}

// Validate checks the field values on EscalationReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EscalationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EscalationReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EscalationReqMultiError, or
// nil if none found.
func (m *EscalationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EscalationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EscalationReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EscalationReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EscalationReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EscalationReqMultiError(errors)
	}

	return nil
}

// EscalationReqMultiError is an error wrapping multiple validation errors
// returned by EscalationReq.ValidateAll() if the designated constraints
// aren't met.
type EscalationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EscalationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EscalationReqMultiError) AllErrors() []error { return m }

// EscalationReqValidationError is the validation error returned by
// EscalationReq.Validate if the designated constraints aren't met.
type EscalationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EscalationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EscalationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EscalationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EscalationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EscalationReqValidationError) ErrorName() string { return "EscalationReqValidationError" }

// Error satisfies the builtin error interface
func (e EscalationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEscalationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EscalationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EscalationReqValidationError{}

// Validate checks the field values on EscalationReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EscalationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EscalationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EscalationReplyMultiError, or nil if none found.
func (m *EscalationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EscalationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EscalationReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EscalationReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EscalationReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EscalationReplyMultiError(errors)
	}

	return nil
}

// EscalationReplyMultiError is an error wrapping multiple validation errors
// returned by EscalationReply.ValidateAll() if the designated constraints
// aren't met.
type EscalationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EscalationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EscalationReplyMultiError) AllErrors() []error { return m }

// EscalationReplyValidationError is the validation error returned by
// EscalationReply.Validate if the designated constraints aren't met.
type EscalationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EscalationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EscalationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EscalationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EscalationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EscalationReplyValidationError) ErrorName() string { return "EscalationReplyValidationError" }

// Error satisfies the builtin error interface
func (e EscalationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEscalationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EscalationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EscalationReplyValidationError{}

// Validate checks the field values on NodeAndManager with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeAndManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeAndManager with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeAndManagerMultiError,
// or nil if none found.
func (m *NodeAndManager) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeAndManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeAndManagerValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeAndManagerValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeAndManagerValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodeAndManagerMultiError(errors)
	}

	return nil
}

// NodeAndManagerMultiError is an error wrapping multiple validation errors
// returned by NodeAndManager.ValidateAll() if the designated constraints
// aren't met.
type NodeAndManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeAndManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeAndManagerMultiError) AllErrors() []error { return m }

// NodeAndManagerValidationError is the validation error returned by
// NodeAndManager.Validate if the designated constraints aren't met.
type NodeAndManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeAndManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeAndManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeAndManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeAndManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeAndManagerValidationError) ErrorName() string { return "NodeAndManagerValidationError" }

// Error satisfies the builtin error interface
func (e NodeAndManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeAndManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeAndManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeAndManagerValidationError{}

// Validate checks the field values on GetNodesAndManagersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodesAndManagersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodesAndManagersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodesAndManagersReqMultiError, or nil if none found.
func (m *GetNodesAndManagersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodesAndManagersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Version

	if len(errors) > 0 {
		return GetNodesAndManagersReqMultiError(errors)
	}

	return nil
}

// GetNodesAndManagersReqMultiError is an error wrapping multiple validation
// errors returned by GetNodesAndManagersReq.ValidateAll() if the designated
// constraints aren't met.
type GetNodesAndManagersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodesAndManagersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodesAndManagersReqMultiError) AllErrors() []error { return m }

// GetNodesAndManagersReqValidationError is the validation error returned by
// GetNodesAndManagersReq.Validate if the designated constraints aren't met.
type GetNodesAndManagersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodesAndManagersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodesAndManagersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodesAndManagersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodesAndManagersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodesAndManagersReqValidationError) ErrorName() string {
	return "GetNodesAndManagersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodesAndManagersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodesAndManagersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodesAndManagersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodesAndManagersReqValidationError{}

// Validate checks the field values on GetNodesAndManagersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodesAndManagersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodesAndManagersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodesAndManagersReplyMultiError, or nil if none found.
func (m *GetNodesAndManagersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodesAndManagersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefNodeName

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodesAndManagersReplyValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodesAndManagersReplyValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodesAndManagersReplyValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodesAndManagersReplyMultiError(errors)
	}

	return nil
}

// GetNodesAndManagersReplyMultiError is an error wrapping multiple validation
// errors returned by GetNodesAndManagersReply.ValidateAll() if the designated
// constraints aren't met.
type GetNodesAndManagersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodesAndManagersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodesAndManagersReplyMultiError) AllErrors() []error { return m }

// GetNodesAndManagersReplyValidationError is the validation error returned by
// GetNodesAndManagersReply.Validate if the designated constraints aren't met.
type GetNodesAndManagersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodesAndManagersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodesAndManagersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodesAndManagersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodesAndManagersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodesAndManagersReplyValidationError) ErrorName() string {
	return "GetNodesAndManagersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodesAndManagersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodesAndManagersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodesAndManagersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodesAndManagersReplyValidationError{}

// Validate checks the field values on GetNodeByIDReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNodeByIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeByIDReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNodeByIDReqMultiError,
// or nil if none found.
func (m *GetNodeByIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeByIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNodeByIDReqMultiError(errors)
	}

	return nil
}

// GetNodeByIDReqMultiError is an error wrapping multiple validation errors
// returned by GetNodeByIDReq.ValidateAll() if the designated constraints
// aren't met.
type GetNodeByIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeByIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeByIDReqMultiError) AllErrors() []error { return m }

// GetNodeByIDReqValidationError is the validation error returned by
// GetNodeByIDReq.Validate if the designated constraints aren't met.
type GetNodeByIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeByIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeByIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeByIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeByIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeByIDReqValidationError) ErrorName() string { return "GetNodeByIDReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeByIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeByIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeByIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeByIDReqValidationError{}

// Validate checks the field values on GetNodeByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeByIDReplyMultiError, or nil if none found.
func (m *GetNodeByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeByIDReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeByIDReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeByIDReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodeByIDReplyMultiError(errors)
	}

	return nil
}

// GetNodeByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetNodeByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetNodeByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeByIDReplyMultiError) AllErrors() []error { return m }

// GetNodeByIDReplyValidationError is the validation error returned by
// GetNodeByIDReply.Validate if the designated constraints aren't met.
type GetNodeByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeByIDReplyValidationError) ErrorName() string { return "GetNodeByIDReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeByIDReplyValidationError{}
