// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: platform/node/v2/node.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Node_Add_FullMethodName                  = "/api.platform.node.v2.Node/Add"
	Node_Del_FullMethodName                  = "/api.platform.node.v2.Node/Del"
	Node_Edit_FullMethodName                 = "/api.platform.node.v2.Node/Edit"
	Node_EditStatus_FullMethodName           = "/api.platform.node.v2.Node/EditStatus"
	Node_ResetKey_FullMethodName             = "/api.platform.node.v2.Node/ResetKey"
	Node_GetInfo_FullMethodName              = "/api.platform.node.v2.Node/GetInfo"
	Node_GetNodeByCode_FullMethodName        = "/api.platform.node.v2.Node/GetNodeByCode"
	Node_GetList_FullMethodName              = "/api.platform.node.v2.Node/GetList"
	Node_GetAllList_FullMethodName           = "/api.platform.node.v2.Node/GetAllList"
	Node_GetDefNodeNode_FullMethodName       = "/api.platform.node.v2.Node/GetDefNodeNode"
	Node_SetDefNodeNode_FullMethodName       = "/api.platform.node.v2.Node/SetDefNodeNode"
	Node_GetMasterSyncInfo_FullMethodName    = "/api.platform.node.v2.Node/GetMasterSyncInfo"
	Node_GetMasterInfo_FullMethodName        = "/api.platform.node.v2.Node/GetMasterInfo"
	Node_GetDistributeInfo_FullMethodName    = "/api.platform.node.v2.Node/GetDistributeInfo"
	Node_Escalation_FullMethodName           = "/api.platform.node.v2.Node/Escalation"
	Node_GetMasterNodeDetails_FullMethodName = "/api.platform.node.v2.Node/GetMasterNodeDetails"
	Node_GetInfoAndManager_FullMethodName    = "/api.platform.node.v2.Node/GetInfoAndManager"
	Node_GetNodesAndManagers_FullMethodName  = "/api.platform.node.v2.Node/GetNodesAndManagers"
	Node_GetAllMasterList_FullMethodName     = "/api.platform.node.v2.Node/GetAllMasterList"
	Node_GetNodeByID_FullMethodName          = "/api.platform.node.v2.Node/GetNodeByID"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	// 新加节点
	Add(ctx context.Context, in *AddNodeReq, opts ...grpc.CallOption) (*AddNodeReply, error)
	// 删除节点
	Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelReply, error)
	// 编辑节点
	Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditReply, error)
	// 编辑节点状态
	EditStatus(ctx context.Context, in *EditStatusReq, opts ...grpc.CallOption) (*EditStatusReply, error)
	// 重置节点的key
	ResetKey(ctx context.Context, in *ResetKeyReq, opts ...grpc.CallOption) (*ResetKeyReply, error)
	// 获取节点信息
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoReply, error)
	// 根据code获取节点信息
	GetNodeByCode(ctx context.Context, in *GetNodeByCodeReq, opts ...grpc.CallOption) (*GetNodeByCodeReply, error)
	// 获取节点列表
	GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListReply, error)
	// 工具方法
	// 获取所有数据
	GetAllList(ctx context.Context, in *GetAllListReq, opts ...grpc.CallOption) (*GetAllListReply, error)
	// 获取默认节点
	GetDefNodeNode(ctx context.Context, in *GetDefNodeNodeReq, opts ...grpc.CallOption) (*GetDefNodeNodeReply, error)
	// 设置默认节点
	SetDefNodeNode(ctx context.Context, in *SetDefNodeNodeReq, opts ...grpc.CallOption) (*SetDefNodeNodeReply, error)
	// 获取主节点配置
	GetMasterSyncInfo(ctx context.Context, in *GetMasterSyncInfoReq, opts ...grpc.CallOption) (*GetMasterSyncInfoReply, error)
	// 获取主节点
	GetMasterInfo(ctx context.Context, in *GetMasterInfoReq, opts ...grpc.CallOption) (*GetMasterInfoReply, error)
	// 根据租户id获取租户下发信息
	GetDistributeInfo(ctx context.Context, in *GetDistributeInfoReq, opts ...grpc.CallOption) (*DistributeInfoReply, error)
	// 租户上报信息
	Escalation(ctx context.Context, in *EscalationReq, opts ...grpc.CallOption) (*EscalationReply, error)
	// 根据给定的节点获取对应的主节点信息
	GetMasterNodeDetails(ctx context.Context, in *GetMasterNodeDetailsReq, opts ...grpc.CallOption) (*GetMasterNodeDetailsReply, error)
	// 查询节点以及管理节点列表
	GetInfoAndManager(ctx context.Context, in *GetNodeByCodeReq, opts ...grpc.CallOption) (*NodeAndManager, error)
	// 查询节点列表以及管理节点列表
	GetNodesAndManagers(ctx context.Context, in *GetNodesAndManagersReq, opts ...grpc.CallOption) (*GetNodesAndManagersReply, error)
	// 获取所有主节点数据
	GetAllMasterList(ctx context.Context, in *GetAllMasterListReq, opts ...grpc.CallOption) (*GetAllMasterListReply, error)
	// GetNodeByID 根据id获取节点数据
	GetNodeByID(ctx context.Context, in *GetNodeByIDReq, opts ...grpc.CallOption) (*GetNodeByIDReply, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Add(ctx context.Context, in *AddNodeReq, opts ...grpc.CallOption) (*AddNodeReply, error) {
	out := new(AddNodeReply)
	err := c.cc.Invoke(ctx, Node_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelReply, error) {
	out := new(DelReply)
	err := c.cc.Invoke(ctx, Node_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditReply, error) {
	out := new(EditReply)
	err := c.cc.Invoke(ctx, Node_Edit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) EditStatus(ctx context.Context, in *EditStatusReq, opts ...grpc.CallOption) (*EditStatusReply, error) {
	out := new(EditStatusReply)
	err := c.cc.Invoke(ctx, Node_EditStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ResetKey(ctx context.Context, in *ResetKeyReq, opts ...grpc.CallOption) (*ResetKeyReply, error) {
	out := new(ResetKeyReply)
	err := c.cc.Invoke(ctx, Node_ResetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := c.cc.Invoke(ctx, Node_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNodeByCode(ctx context.Context, in *GetNodeByCodeReq, opts ...grpc.CallOption) (*GetNodeByCodeReply, error) {
	out := new(GetNodeByCodeReply)
	err := c.cc.Invoke(ctx, Node_GetNodeByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListReply, error) {
	out := new(GetListReply)
	err := c.cc.Invoke(ctx, Node_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllList(ctx context.Context, in *GetAllListReq, opts ...grpc.CallOption) (*GetAllListReply, error) {
	out := new(GetAllListReply)
	err := c.cc.Invoke(ctx, Node_GetAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetDefNodeNode(ctx context.Context, in *GetDefNodeNodeReq, opts ...grpc.CallOption) (*GetDefNodeNodeReply, error) {
	out := new(GetDefNodeNodeReply)
	err := c.cc.Invoke(ctx, Node_GetDefNodeNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetDefNodeNode(ctx context.Context, in *SetDefNodeNodeReq, opts ...grpc.CallOption) (*SetDefNodeNodeReply, error) {
	out := new(SetDefNodeNodeReply)
	err := c.cc.Invoke(ctx, Node_SetDefNodeNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMasterSyncInfo(ctx context.Context, in *GetMasterSyncInfoReq, opts ...grpc.CallOption) (*GetMasterSyncInfoReply, error) {
	out := new(GetMasterSyncInfoReply)
	err := c.cc.Invoke(ctx, Node_GetMasterSyncInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMasterInfo(ctx context.Context, in *GetMasterInfoReq, opts ...grpc.CallOption) (*GetMasterInfoReply, error) {
	out := new(GetMasterInfoReply)
	err := c.cc.Invoke(ctx, Node_GetMasterInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetDistributeInfo(ctx context.Context, in *GetDistributeInfoReq, opts ...grpc.CallOption) (*DistributeInfoReply, error) {
	out := new(DistributeInfoReply)
	err := c.cc.Invoke(ctx, Node_GetDistributeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Escalation(ctx context.Context, in *EscalationReq, opts ...grpc.CallOption) (*EscalationReply, error) {
	out := new(EscalationReply)
	err := c.cc.Invoke(ctx, Node_Escalation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetMasterNodeDetails(ctx context.Context, in *GetMasterNodeDetailsReq, opts ...grpc.CallOption) (*GetMasterNodeDetailsReply, error) {
	out := new(GetMasterNodeDetailsReply)
	err := c.cc.Invoke(ctx, Node_GetMasterNodeDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetInfoAndManager(ctx context.Context, in *GetNodeByCodeReq, opts ...grpc.CallOption) (*NodeAndManager, error) {
	out := new(NodeAndManager)
	err := c.cc.Invoke(ctx, Node_GetInfoAndManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNodesAndManagers(ctx context.Context, in *GetNodesAndManagersReq, opts ...grpc.CallOption) (*GetNodesAndManagersReply, error) {
	out := new(GetNodesAndManagersReply)
	err := c.cc.Invoke(ctx, Node_GetNodesAndManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllMasterList(ctx context.Context, in *GetAllMasterListReq, opts ...grpc.CallOption) (*GetAllMasterListReply, error) {
	out := new(GetAllMasterListReply)
	err := c.cc.Invoke(ctx, Node_GetAllMasterList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNodeByID(ctx context.Context, in *GetNodeByIDReq, opts ...grpc.CallOption) (*GetNodeByIDReply, error) {
	out := new(GetNodeByIDReply)
	err := c.cc.Invoke(ctx, Node_GetNodeByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	// 新加节点
	Add(context.Context, *AddNodeReq) (*AddNodeReply, error)
	// 删除节点
	Del(context.Context, *DelReq) (*DelReply, error)
	// 编辑节点
	Edit(context.Context, *EditReq) (*EditReply, error)
	// 编辑节点状态
	EditStatus(context.Context, *EditStatusReq) (*EditStatusReply, error)
	// 重置节点的key
	ResetKey(context.Context, *ResetKeyReq) (*ResetKeyReply, error)
	// 获取节点信息
	GetInfo(context.Context, *GetInfoReq) (*GetInfoReply, error)
	// 根据code获取节点信息
	GetNodeByCode(context.Context, *GetNodeByCodeReq) (*GetNodeByCodeReply, error)
	// 获取节点列表
	GetList(context.Context, *GetListReq) (*GetListReply, error)
	// 工具方法
	// 获取所有数据
	GetAllList(context.Context, *GetAllListReq) (*GetAllListReply, error)
	// 获取默认节点
	GetDefNodeNode(context.Context, *GetDefNodeNodeReq) (*GetDefNodeNodeReply, error)
	// 设置默认节点
	SetDefNodeNode(context.Context, *SetDefNodeNodeReq) (*SetDefNodeNodeReply, error)
	// 获取主节点配置
	GetMasterSyncInfo(context.Context, *GetMasterSyncInfoReq) (*GetMasterSyncInfoReply, error)
	// 获取主节点
	GetMasterInfo(context.Context, *GetMasterInfoReq) (*GetMasterInfoReply, error)
	// 根据租户id获取租户下发信息
	GetDistributeInfo(context.Context, *GetDistributeInfoReq) (*DistributeInfoReply, error)
	// 租户上报信息
	Escalation(context.Context, *EscalationReq) (*EscalationReply, error)
	// 根据给定的节点获取对应的主节点信息
	GetMasterNodeDetails(context.Context, *GetMasterNodeDetailsReq) (*GetMasterNodeDetailsReply, error)
	// 查询节点以及管理节点列表
	GetInfoAndManager(context.Context, *GetNodeByCodeReq) (*NodeAndManager, error)
	// 查询节点列表以及管理节点列表
	GetNodesAndManagers(context.Context, *GetNodesAndManagersReq) (*GetNodesAndManagersReply, error)
	// 获取所有主节点数据
	GetAllMasterList(context.Context, *GetAllMasterListReq) (*GetAllMasterListReply, error)
	// GetNodeByID 根据id获取节点数据
	GetNodeByID(context.Context, *GetNodeByIDReq) (*GetNodeByIDReply, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) Add(context.Context, *AddNodeReq) (*AddNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedNodeServer) Del(context.Context, *DelReq) (*DelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedNodeServer) Edit(context.Context, *EditReq) (*EditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedNodeServer) EditStatus(context.Context, *EditStatusReq) (*EditStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditStatus not implemented")
}
func (UnimplementedNodeServer) ResetKey(context.Context, *ResetKeyReq) (*ResetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetKey not implemented")
}
func (UnimplementedNodeServer) GetInfo(context.Context, *GetInfoReq) (*GetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedNodeServer) GetNodeByCode(context.Context, *GetNodeByCodeReq) (*GetNodeByCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeByCode not implemented")
}
func (UnimplementedNodeServer) GetList(context.Context, *GetListReq) (*GetListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedNodeServer) GetAllList(context.Context, *GetAllListReq) (*GetAllListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllList not implemented")
}
func (UnimplementedNodeServer) GetDefNodeNode(context.Context, *GetDefNodeNodeReq) (*GetDefNodeNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefNodeNode not implemented")
}
func (UnimplementedNodeServer) SetDefNodeNode(context.Context, *SetDefNodeNodeReq) (*SetDefNodeNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefNodeNode not implemented")
}
func (UnimplementedNodeServer) GetMasterSyncInfo(context.Context, *GetMasterSyncInfoReq) (*GetMasterSyncInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterSyncInfo not implemented")
}
func (UnimplementedNodeServer) GetMasterInfo(context.Context, *GetMasterInfoReq) (*GetMasterInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterInfo not implemented")
}
func (UnimplementedNodeServer) GetDistributeInfo(context.Context, *GetDistributeInfoReq) (*DistributeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistributeInfo not implemented")
}
func (UnimplementedNodeServer) Escalation(context.Context, *EscalationReq) (*EscalationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Escalation not implemented")
}
func (UnimplementedNodeServer) GetMasterNodeDetails(context.Context, *GetMasterNodeDetailsReq) (*GetMasterNodeDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterNodeDetails not implemented")
}
func (UnimplementedNodeServer) GetInfoAndManager(context.Context, *GetNodeByCodeReq) (*NodeAndManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoAndManager not implemented")
}
func (UnimplementedNodeServer) GetNodesAndManagers(context.Context, *GetNodesAndManagersReq) (*GetNodesAndManagersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesAndManagers not implemented")
}
func (UnimplementedNodeServer) GetAllMasterList(context.Context, *GetAllMasterListReq) (*GetAllMasterListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMasterList not implemented")
}
func (UnimplementedNodeServer) GetNodeByID(context.Context, *GetNodeByIDReq) (*GetNodeByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeByID not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Add(ctx, req.(*AddNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Del(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Edit(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_EditStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).EditStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_EditStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).EditStatus(ctx, req.(*EditStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ResetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ResetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ResetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ResetKey(ctx, req.(*ResetKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNodeByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNodeByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetNodeByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNodeByCode(ctx, req.(*GetNodeByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetList(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAllList(ctx, req.(*GetAllListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetDefNodeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefNodeNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetDefNodeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetDefNodeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetDefNodeNode(ctx, req.(*GetDefNodeNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetDefNodeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefNodeNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetDefNodeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SetDefNodeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetDefNodeNode(ctx, req.(*SetDefNodeNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMasterSyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterSyncInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMasterSyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetMasterSyncInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMasterSyncInfo(ctx, req.(*GetMasterSyncInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMasterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMasterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetMasterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMasterInfo(ctx, req.(*GetMasterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetDistributeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistributeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetDistributeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetDistributeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetDistributeInfo(ctx, req.(*GetDistributeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Escalation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Escalation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Escalation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Escalation(ctx, req.(*EscalationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetMasterNodeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterNodeDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetMasterNodeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetMasterNodeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetMasterNodeDetails(ctx, req.(*GetMasterNodeDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetInfoAndManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetInfoAndManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetInfoAndManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetInfoAndManager(ctx, req.(*GetNodeByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNodesAndManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesAndManagersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNodesAndManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetNodesAndManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNodesAndManagers(ctx, req.(*GetNodesAndManagersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllMasterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMasterListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAllMasterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetAllMasterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAllMasterList(ctx, req.(*GetAllMasterListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetNodeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNodeByID(ctx, req.(*GetNodeByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.platform.node.v2.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Node_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Node_Del_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _Node_Edit_Handler,
		},
		{
			MethodName: "EditStatus",
			Handler:    _Node_EditStatus_Handler,
		},
		{
			MethodName: "ResetKey",
			Handler:    _Node_ResetKey_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Node_GetInfo_Handler,
		},
		{
			MethodName: "GetNodeByCode",
			Handler:    _Node_GetNodeByCode_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _Node_GetList_Handler,
		},
		{
			MethodName: "GetAllList",
			Handler:    _Node_GetAllList_Handler,
		},
		{
			MethodName: "GetDefNodeNode",
			Handler:    _Node_GetDefNodeNode_Handler,
		},
		{
			MethodName: "SetDefNodeNode",
			Handler:    _Node_SetDefNodeNode_Handler,
		},
		{
			MethodName: "GetMasterSyncInfo",
			Handler:    _Node_GetMasterSyncInfo_Handler,
		},
		{
			MethodName: "GetMasterInfo",
			Handler:    _Node_GetMasterInfo_Handler,
		},
		{
			MethodName: "GetDistributeInfo",
			Handler:    _Node_GetDistributeInfo_Handler,
		},
		{
			MethodName: "Escalation",
			Handler:    _Node_Escalation_Handler,
		},
		{
			MethodName: "GetMasterNodeDetails",
			Handler:    _Node_GetMasterNodeDetails_Handler,
		},
		{
			MethodName: "GetInfoAndManager",
			Handler:    _Node_GetInfoAndManager_Handler,
		},
		{
			MethodName: "GetNodesAndManagers",
			Handler:    _Node_GetNodesAndManagers_Handler,
		},
		{
			MethodName: "GetAllMasterList",
			Handler:    _Node_GetAllMasterList_Handler,
		},
		{
			MethodName: "GetNodeByID",
			Handler:    _Node_GetNodeByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/node/v2/node.proto",
}
