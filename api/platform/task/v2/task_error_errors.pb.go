// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 节点信息未找到
func IsNodeNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorTaskReason_NODE_NOT_FOUND.String() && e.Code == 404
}

// 节点信息未找到
func ErrorNodeNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorTaskReason_NODE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 添加任务失败
func IsAddTaskError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorTaskReason_ADD_TASK_ERROR.String() && e.Code == 400
}

// 添加任务失败
func ErrorAddTaskError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorTaskReason_ADD_TASK_ERROR.String(), fmt.Sprintf(format, args...))
}

// 执行任务失败
func IsExecutionTaskError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorTaskReason_EXECUTION_TASK_ERROR.String() && e.Code == 500
}

// 执行任务失败
func ErrorExecutionTaskError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorTaskReason_EXECUTION_TASK_ERROR.String(), fmt.Sprintf(format, args...))
}
