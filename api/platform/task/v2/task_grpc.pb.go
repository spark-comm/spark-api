// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: platform/task/v2/task.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Task_Add_FullMethodName            = "/api.platform.task.v2.Task/Add"
	Task_GetList_FullMethodName        = "/api.platform.task.v2.Task/GetList"
	Task_Execution_FullMethodName      = "/api.platform.task.v2.Task/Execution"
	Task_AddEscalation_FullMethodName  = "/api.platform.task.v2.Task/AddEscalation"
	Task_DistributeUser_FullMethodName = "/api.platform.task.v2.Task/DistributeUser"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	// 新加任务
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddReply, error)
	// 获取任务列表
	GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListReply, error)
	// 执行任务
	Execution(ctx context.Context, in *ExecutionReq, opts ...grpc.CallOption) (*ExecutionReply, error)
	// 增加上报任务
	AddEscalation(ctx context.Context, in *AddEscalationReq, opts ...grpc.CallOption) (*AddEscalationReply, error)
	// 下发用户
	DistributeUser(ctx context.Context, in *DistributeUserReq, opts ...grpc.CallOption) (*DistributeUserReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, Task_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListReply, error) {
	out := new(GetListReply)
	err := c.cc.Invoke(ctx, Task_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Execution(ctx context.Context, in *ExecutionReq, opts ...grpc.CallOption) (*ExecutionReply, error) {
	out := new(ExecutionReply)
	err := c.cc.Invoke(ctx, Task_Execution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) AddEscalation(ctx context.Context, in *AddEscalationReq, opts ...grpc.CallOption) (*AddEscalationReply, error) {
	out := new(AddEscalationReply)
	err := c.cc.Invoke(ctx, Task_AddEscalation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DistributeUser(ctx context.Context, in *DistributeUserReq, opts ...grpc.CallOption) (*DistributeUserReply, error) {
	out := new(DistributeUserReply)
	err := c.cc.Invoke(ctx, Task_DistributeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	// 新加任务
	Add(context.Context, *AddReq) (*AddReply, error)
	// 获取任务列表
	GetList(context.Context, *GetListReq) (*GetListReply, error)
	// 执行任务
	Execution(context.Context, *ExecutionReq) (*ExecutionReply, error)
	// 增加上报任务
	AddEscalation(context.Context, *AddEscalationReq) (*AddEscalationReply, error)
	// 下发用户
	DistributeUser(context.Context, *DistributeUserReq) (*DistributeUserReply, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) Add(context.Context, *AddReq) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTaskServer) GetList(context.Context, *GetListReq) (*GetListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedTaskServer) Execution(context.Context, *ExecutionReq) (*ExecutionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execution not implemented")
}
func (UnimplementedTaskServer) AddEscalation(context.Context, *AddEscalationReq) (*AddEscalationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEscalation not implemented")
}
func (UnimplementedTaskServer) DistributeUser(context.Context, *DistributeUserReq) (*DistributeUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeUser not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetList(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Execution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Execution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_Execution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Execution(ctx, req.(*ExecutionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_AddEscalation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEscalationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AddEscalation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_AddEscalation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AddEscalation(ctx, req.(*AddEscalationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DistributeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DistributeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DistributeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DistributeUser(ctx, req.(*DistributeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.platform.task.v2.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Task_Add_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _Task_GetList_Handler,
		},
		{
			MethodName: "Execution",
			Handler:    _Task_Execution_Handler,
		},
		{
			MethodName: "AddEscalation",
			Handler:    _Task_AddEscalation_Handler,
		},
		{
			MethodName: "DistributeUser",
			Handler:    _Task_DistributeUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/task/v2/task.proto",
}
