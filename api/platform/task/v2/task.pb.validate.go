// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/task/v2/task.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddReqMultiError, or nil if none found.
func (m *AddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for Cron

	// no validation rules for TaskType

	// no validation rules for TaskModel

	// no validation rules for Data

	// no validation rules for Description

	// no validation rules for ContentType

	if len(errors) > 0 {
		return AddReqMultiError(errors)
	}

	return nil
}

// AddReqMultiError is an error wrapping multiple validation errors returned by
// AddReq.ValidateAll() if the designated constraints aren't met.
type AddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReqMultiError) AllErrors() []error { return m }

// AddReqValidationError is the validation error returned by AddReq.Validate if
// the designated constraints aren't met.
type AddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReqValidationError) ErrorName() string { return "AddReqValidationError" }

// Error satisfies the builtin error interface
func (e AddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReqValidationError{}

// Validate checks the field values on AddReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddReplyMultiError, or nil
// if none found.
func (m *AddReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddReplyMultiError(errors)
	}

	return nil
}

// AddReplyMultiError is an error wrapping multiple validation errors returned
// by AddReply.ValidateAll() if the designated constraints aren't met.
type AddReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReplyMultiError) AllErrors() []error { return m }

// AddReplyValidationError is the validation error returned by
// AddReply.Validate if the designated constraints aren't met.
type AddReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReplyValidationError) ErrorName() string { return "AddReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReplyValidationError{}

// Validate checks the field values on GetListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReqMultiError, or
// nil if none found.
func (m *GetListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskType

	// no validation rules for TaskModel

	// no validation rules for Status

	if len(errors) > 0 {
		return GetListReqMultiError(errors)
	}

	return nil
}

// GetListReqMultiError is an error wrapping multiple validation errors
// returned by GetListReq.ValidateAll() if the designated constraints aren't met.
type GetListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReqMultiError) AllErrors() []error { return m }

// GetListReqValidationError is the validation error returned by
// GetListReq.Validate if the designated constraints aren't met.
type GetListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReqValidationError) ErrorName() string { return "GetListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReqValidationError{}

// Validate checks the field values on GetListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReplyMultiError, or
// nil if none found.
func (m *GetListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListReplyMultiError(errors)
	}

	return nil
}

// GetListReplyMultiError is an error wrapping multiple validation errors
// returned by GetListReply.ValidateAll() if the designated constraints aren't met.
type GetListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReplyMultiError) AllErrors() []error { return m }

// GetListReplyValidationError is the validation error returned by
// GetListReply.Validate if the designated constraints aren't met.
type GetListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReplyValidationError) ErrorName() string { return "GetListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReplyValidationError{}

// Validate checks the field values on ExecutionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecutionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecutionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecutionReqMultiError, or
// nil if none found.
func (m *ExecutionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecutionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ExecutionReqMultiError(errors)
	}

	return nil
}

// ExecutionReqMultiError is an error wrapping multiple validation errors
// returned by ExecutionReq.ValidateAll() if the designated constraints aren't met.
type ExecutionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecutionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecutionReqMultiError) AllErrors() []error { return m }

// ExecutionReqValidationError is the validation error returned by
// ExecutionReq.Validate if the designated constraints aren't met.
type ExecutionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecutionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecutionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecutionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecutionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecutionReqValidationError) ErrorName() string { return "ExecutionReqValidationError" }

// Error satisfies the builtin error interface
func (e ExecutionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecutionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecutionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecutionReqValidationError{}

// Validate checks the field values on ExecutionReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecutionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecutionReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecutionReplyMultiError,
// or nil if none found.
func (m *ExecutionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecutionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExecutionReplyMultiError(errors)
	}

	return nil
}

// ExecutionReplyMultiError is an error wrapping multiple validation errors
// returned by ExecutionReply.ValidateAll() if the designated constraints
// aren't met.
type ExecutionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecutionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecutionReplyMultiError) AllErrors() []error { return m }

// ExecutionReplyValidationError is the validation error returned by
// ExecutionReply.Validate if the designated constraints aren't met.
type ExecutionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecutionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecutionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecutionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecutionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecutionReplyValidationError) ErrorName() string { return "ExecutionReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExecutionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecutionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecutionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecutionReplyValidationError{}

// Validate checks the field values on AddEscalationReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddEscalationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEscalationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEscalationReqMultiError, or nil if none found.
func (m *AddEscalationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEscalationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for Cron

	// no validation rules for TaskType

	// no validation rules for TaskModel

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddEscalationReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddEscalationReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddEscalationReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for ContentType

	if len(errors) > 0 {
		return AddEscalationReqMultiError(errors)
	}

	return nil
}

// AddEscalationReqMultiError is an error wrapping multiple validation errors
// returned by AddEscalationReq.ValidateAll() if the designated constraints
// aren't met.
type AddEscalationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEscalationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEscalationReqMultiError) AllErrors() []error { return m }

// AddEscalationReqValidationError is the validation error returned by
// AddEscalationReq.Validate if the designated constraints aren't met.
type AddEscalationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEscalationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEscalationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEscalationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEscalationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEscalationReqValidationError) ErrorName() string { return "AddEscalationReqValidationError" }

// Error satisfies the builtin error interface
func (e AddEscalationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEscalationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEscalationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEscalationReqValidationError{}

// Validate checks the field values on AddEscalationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddEscalationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEscalationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEscalationReplyMultiError, or nil if none found.
func (m *AddEscalationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEscalationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddEscalationReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddEscalationReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddEscalationReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddEscalationReplyMultiError(errors)
	}

	return nil
}

// AddEscalationReplyMultiError is an error wrapping multiple validation errors
// returned by AddEscalationReply.ValidateAll() if the designated constraints
// aren't met.
type AddEscalationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEscalationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEscalationReplyMultiError) AllErrors() []error { return m }

// AddEscalationReplyValidationError is the validation error returned by
// AddEscalationReply.Validate if the designated constraints aren't met.
type AddEscalationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEscalationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEscalationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEscalationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEscalationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEscalationReplyValidationError) ErrorName() string {
	return "AddEscalationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddEscalationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEscalationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEscalationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEscalationReplyValidationError{}

// Validate checks the field values on DistributeUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DistributeUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeUserReqMultiError, or nil if none found.
func (m *DistributeUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributeUserReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributeUserReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributeUserReqValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DistributeUserReqMultiError(errors)
	}

	return nil
}

// DistributeUserReqMultiError is an error wrapping multiple validation errors
// returned by DistributeUserReq.ValidateAll() if the designated constraints
// aren't met.
type DistributeUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeUserReqMultiError) AllErrors() []error { return m }

// DistributeUserReqValidationError is the validation error returned by
// DistributeUserReq.Validate if the designated constraints aren't met.
type DistributeUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeUserReqValidationError) ErrorName() string {
	return "DistributeUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeUserReqValidationError{}

// Validate checks the field values on DistributeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeUserReplyMultiError, or nil if none found.
func (m *DistributeUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DistributeUserReplyMultiError(errors)
	}

	return nil
}

// DistributeUserReplyMultiError is an error wrapping multiple validation
// errors returned by DistributeUserReply.ValidateAll() if the designated
// constraints aren't met.
type DistributeUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeUserReplyMultiError) AllErrors() []error { return m }

// DistributeUserReplyValidationError is the validation error returned by
// DistributeUserReply.Validate if the designated constraints aren't met.
type DistributeUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeUserReplyValidationError) ErrorName() string {
	return "DistributeUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeUserReplyValidationError{}

// Validate checks the field values on TaskDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskDetailsMultiError, or
// nil if none found.
func (m *TaskDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StartTime

	// no validation rules for Cron

	// no validation rules for TaskType

	// no validation rules for TaskModel

	// no validation rules for Data

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for ContentType

	// no validation rules for Reason

	// no validation rules for RetryCount

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TaskDetailsMultiError(errors)
	}

	return nil
}

// TaskDetailsMultiError is an error wrapping multiple validation errors
// returned by TaskDetails.ValidateAll() if the designated constraints aren't met.
type TaskDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskDetailsMultiError) AllErrors() []error { return m }

// TaskDetailsValidationError is the validation error returned by
// TaskDetails.Validate if the designated constraints aren't met.
type TaskDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskDetailsValidationError) ErrorName() string { return "TaskDetailsValidationError" }

// Error satisfies the builtin error interface
func (e TaskDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskDetailsValidationError{}

// Validate checks the field values on UserInfoDistribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInfoDistribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoDistribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoDistributeMultiError, or nil if none found.
func (m *UserInfoDistribute) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoDistribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for NodeId

	if len(errors) > 0 {
		return UserInfoDistributeMultiError(errors)
	}

	return nil
}

// UserInfoDistributeMultiError is an error wrapping multiple validation errors
// returned by UserInfoDistribute.ValidateAll() if the designated constraints
// aren't met.
type UserInfoDistributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoDistributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoDistributeMultiError) AllErrors() []error { return m }

// UserInfoDistributeValidationError is the validation error returned by
// UserInfoDistribute.Validate if the designated constraints aren't met.
type UserInfoDistributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoDistributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoDistributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoDistributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoDistributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoDistributeValidationError) ErrorName() string {
	return "UserInfoDistributeValidationError"
}

// Error satisfies the builtin error interface
func (e UserInfoDistributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoDistribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoDistributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoDistributeValidationError{}

// Validate checks the field values on UserInfoEscalation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInfoEscalation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoEscalation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoEscalationMultiError, or nil if none found.
func (m *UserInfoEscalation) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoEscalation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoEscalationValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoEscalationValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoEscalationValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoEscalationMultiError(errors)
	}

	return nil
}

// UserInfoEscalationMultiError is an error wrapping multiple validation errors
// returned by UserInfoEscalation.ValidateAll() if the designated constraints
// aren't met.
type UserInfoEscalationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoEscalationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoEscalationMultiError) AllErrors() []error { return m }

// UserInfoEscalationValidationError is the validation error returned by
// UserInfoEscalation.Validate if the designated constraints aren't met.
type UserInfoEscalationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoEscalationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoEscalationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoEscalationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoEscalationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoEscalationValidationError) ErrorName() string {
	return "UserInfoEscalationValidationError"
}

// Error satisfies the builtin error interface
func (e UserInfoEscalationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoEscalation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoEscalationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoEscalationValidationError{}

// Validate checks the field values on NodeDistribute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeDistribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeDistribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeDistributeMultiError,
// or nil if none found.
func (m *NodeDistribute) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeDistribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return NodeDistributeMultiError(errors)
	}

	return nil
}

// NodeDistributeMultiError is an error wrapping multiple validation errors
// returned by NodeDistribute.ValidateAll() if the designated constraints
// aren't met.
type NodeDistributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeDistributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeDistributeMultiError) AllErrors() []error { return m }

// NodeDistributeValidationError is the validation error returned by
// NodeDistribute.Validate if the designated constraints aren't met.
type NodeDistributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeDistributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeDistributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeDistributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeDistributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeDistributeValidationError) ErrorName() string { return "NodeDistributeValidationError" }

// Error satisfies the builtin error interface
func (e NodeDistributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeDistribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeDistributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeDistributeValidationError{}
