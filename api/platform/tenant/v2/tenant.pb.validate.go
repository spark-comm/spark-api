// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/tenant/v2/tenant.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for AssociatedUsersID

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Introduce

	// no validation rules for WebsiteAddress

	// no validation rules for WebsiteStatus

	// no validation rules for PackageType

	// no validation rules for MaxNumber

	// no validation rules for MaxGroupNumber

	// no validation rules for Phone

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Code

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}

	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for PackageType

	// no validation rules for MaxNumber

	// no validation rules for MaxGroupNumber

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for AssociatedUserID

	// no validation rules for Phone

	// no validation rules for PubKey

	// no validation rules for PriKey

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReplyMultiError, or
// nil if none found.
func (m *CreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateReplyMultiError(errors)
	}

	return nil
}

// CreateReplyMultiError is an error wrapping multiple validation errors
// returned by CreateReply.ValidateAll() if the designated constraints aren't met.
type CreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReplyMultiError) AllErrors() []error { return m }

// CreateReplyValidationError is the validation error returned by
// CreateReply.Validate if the designated constraints aren't met.
type CreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReplyValidationError) ErrorName() string { return "CreateReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReplyValidationError{}

// Validate checks the field values on ApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationRequestMultiError, or nil if none found.
func (m *ApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for PackageType

	// no validation rules for MaxNumber

	// no validation rules for MaxGroupNumber

	// no validation rules for AssociatedUserID

	// no validation rules for Key

	// no validation rules for Code

	// no validation rules for Phone

	// no validation rules for Duration

	if len(errors) > 0 {
		return ApplicationRequestMultiError(errors)
	}

	return nil
}

// ApplicationRequestMultiError is an error wrapping multiple validation errors
// returned by ApplicationRequest.ValidateAll() if the designated constraints
// aren't met.
type ApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationRequestMultiError) AllErrors() []error { return m }

// ApplicationRequestValidationError is the validation error returned by
// ApplicationRequest.Validate if the designated constraints aren't met.
type ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationRequestValidationError) ErrorName() string {
	return "ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationRequestValidationError{}

// Validate checks the field values on ApplicationReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationReplyMultiError, or nil if none found.
func (m *ApplicationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApplicationReplyMultiError(errors)
	}

	return nil
}

// ApplicationReplyMultiError is an error wrapping multiple validation errors
// returned by ApplicationReply.ValidateAll() if the designated constraints
// aren't met.
type ApplicationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationReplyMultiError) AllErrors() []error { return m }

// ApplicationReplyValidationError is the validation error returned by
// ApplicationReply.Validate if the designated constraints aren't met.
type ApplicationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationReplyValidationError) ErrorName() string { return "ApplicationReplyValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationReplyValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.PackageType != nil {
		// no validation rules for PackageType
	}

	if m.MaxNumber != nil {
		// no validation rules for MaxNumber
	}

	if m.MaxGroupNumber != nil {
		// no validation rules for MaxGroupNumber
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.StartTime != nil {
		// no validation rules for StartTime
	}

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Introduce != nil {
		// no validation rules for Introduce
	}

	if m.WebsiteAddress != nil {
		// no validation rules for WebsiteAddress
	}

	if m.WebsiteStatus != nil {
		// no validation rules for WebsiteStatus
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.PubKey != nil {
		// no validation rules for PubKey
	}

	if m.PriKey != nil {
		// no validation rules for PriKey
	}

	if m.AssociatedUserID != nil {
		// no validation rules for AssociatedUserID
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateReplyMultiError, or
// nil if none found.
func (m *UpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReplyMultiError(errors)
	}

	return nil
}

// UpdateReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateReply.ValidateAll() if the designated constraints aren't met.
type UpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReplyMultiError) AllErrors() []error { return m }

// UpdateReplyValidationError is the validation error returned by
// UpdateReply.Validate if the designated constraints aren't met.
type UpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReplyValidationError) ErrorName() string { return "UpdateReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReplyValidationError{}

// Validate checks the field values on BindingPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindingPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindingPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindingPhoneRequestMultiError, or nil if none found.
func (m *BindingPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindingPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := BindingPhoneRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 0 {
		err := BindingPhoneRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	if len(errors) > 0 {
		return BindingPhoneRequestMultiError(errors)
	}

	return nil
}

// BindingPhoneRequestMultiError is an error wrapping multiple validation
// errors returned by BindingPhoneRequest.ValidateAll() if the designated
// constraints aren't met.
type BindingPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindingPhoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindingPhoneRequestMultiError) AllErrors() []error { return m }

// BindingPhoneRequestValidationError is the validation error returned by
// BindingPhoneRequest.Validate if the designated constraints aren't met.
type BindingPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingPhoneRequestValidationError) ErrorName() string {
	return "BindingPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindingPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingPhoneRequestValidationError{}

// Validate checks the field values on BindingPhoneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BindingPhoneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindingPhoneReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindingPhoneReplyMultiError, or nil if none found.
func (m *BindingPhoneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BindingPhoneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BindingPhoneReplyMultiError(errors)
	}

	return nil
}

// BindingPhoneReplyMultiError is an error wrapping multiple validation errors
// returned by BindingPhoneReply.ValidateAll() if the designated constraints
// aren't met.
type BindingPhoneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindingPhoneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindingPhoneReplyMultiError) AllErrors() []error { return m }

// BindingPhoneReplyValidationError is the validation error returned by
// BindingPhoneReply.Validate if the designated constraints aren't met.
type BindingPhoneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingPhoneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingPhoneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingPhoneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingPhoneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingPhoneReplyValidationError) ErrorName() string {
	return "BindingPhoneReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BindingPhoneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingPhoneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingPhoneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingPhoneReplyValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteReplyMultiError, or
// nil if none found.
func (m *DeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteReplyMultiError(errors)
	}

	return nil
}

// DeleteReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteReply.ValidateAll() if the designated constraints aren't met.
type DeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReplyMultiError) AllErrors() []error { return m }

// DeleteReplyValidationError is the validation error returned by
// DeleteReply.Validate if the designated constraints aren't met.
type DeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReplyValidationError) ErrorName() string { return "DeleteReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReplyValidationError{}

// Validate checks the field values on FindByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByIDRequestMultiError, or nil if none found.
func (m *FindByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return FindByIDRequestMultiError(errors)
	}

	return nil
}

// FindByIDRequestMultiError is an error wrapping multiple validation errors
// returned by FindByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type FindByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByIDRequestMultiError) AllErrors() []error { return m }

// FindByIDRequestValidationError is the validation error returned by
// FindByIDRequest.Validate if the designated constraints aren't met.
type FindByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByIDRequestValidationError) ErrorName() string { return "FindByIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByIDRequestValidationError{}

// Validate checks the field values on FindByIDReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindByIDReplyMultiError, or
// nil if none found.
func (m *FindByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByIDReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByIDReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByIDReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByIDReplyMultiError(errors)
	}

	return nil
}

// FindByIDReplyMultiError is an error wrapping multiple validation errors
// returned by FindByIDReply.ValidateAll() if the designated constraints
// aren't met.
type FindByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByIDReplyMultiError) AllErrors() []error { return m }

// FindByIDReplyValidationError is the validation error returned by
// FindByIDReply.Validate if the designated constraints aren't met.
type FindByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByIDReplyValidationError) ErrorName() string { return "FindByIDReplyValidationError" }

// Error satisfies the builtin error interface
func (e FindByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByIDReplyValidationError{}

// Validate checks the field values on WebsitePathRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebsitePathRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsitePathRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebsitePathRequestMultiError, or nil if none found.
func (m *WebsitePathRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsitePathRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return WebsitePathRequestMultiError(errors)
	}

	return nil
}

// WebsitePathRequestMultiError is an error wrapping multiple validation errors
// returned by WebsitePathRequest.ValidateAll() if the designated constraints
// aren't met.
type WebsitePathRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsitePathRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsitePathRequestMultiError) AllErrors() []error { return m }

// WebsitePathRequestValidationError is the validation error returned by
// WebsitePathRequest.Validate if the designated constraints aren't met.
type WebsitePathRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsitePathRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsitePathRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsitePathRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsitePathRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsitePathRequestValidationError) ErrorName() string {
	return "WebsitePathRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WebsitePathRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsitePathRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsitePathRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsitePathRequestValidationError{}

// Validate checks the field values on WebsitePathReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WebsitePathReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsitePathReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebsitePathReplyMultiError, or nil if none found.
func (m *WebsitePathReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsitePathReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return WebsitePathReplyMultiError(errors)
	}

	return nil
}

// WebsitePathReplyMultiError is an error wrapping multiple validation errors
// returned by WebsitePathReply.ValidateAll() if the designated constraints
// aren't met.
type WebsitePathReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsitePathReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsitePathReplyMultiError) AllErrors() []error { return m }

// WebsitePathReplyValidationError is the validation error returned by
// WebsitePathReply.Validate if the designated constraints aren't met.
type WebsitePathReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsitePathReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsitePathReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsitePathReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsitePathReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsitePathReplyValidationError) ErrorName() string { return "WebsitePathReplyValidationError" }

// Error satisfies the builtin error interface
func (e WebsitePathReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsitePathReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsitePathReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsitePathReplyValidationError{}

// Validate checks the field values on GetListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListRequestMultiError,
// or nil if none found.
func (m *GetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.PackageType != nil {
		// no validation rules for PackageType
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return GetListRequestMultiError(errors)
	}

	return nil
}

// GetListRequestMultiError is an error wrapping multiple validation errors
// returned by GetListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListRequestMultiError) AllErrors() []error { return m }

// GetListRequestValidationError is the validation error returned by
// GetListRequest.Validate if the designated constraints aren't met.
type GetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListRequestValidationError) ErrorName() string { return "GetListRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListRequestValidationError{}

// Validate checks the field values on GetListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReplyMultiError, or
// nil if none found.
func (m *GetListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListReplyMultiError(errors)
	}

	return nil
}

// GetListReplyMultiError is an error wrapping multiple validation errors
// returned by GetListReply.ValidateAll() if the designated constraints aren't met.
type GetListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReplyMultiError) AllErrors() []error { return m }

// GetListReplyValidationError is the validation error returned by
// GetListReply.Validate if the designated constraints aren't met.
type GetListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReplyValidationError) ErrorName() string { return "GetListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReplyValidationError{}

// Validate checks the field values on FindByAssociatedUsersIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByAssociatedUsersIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByAssociatedUsersIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindByAssociatedUsersIDRequestMultiError, or nil if none found.
func (m *FindByAssociatedUsersIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByAssociatedUsersIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssociatedUsersID

	if len(errors) > 0 {
		return FindByAssociatedUsersIDRequestMultiError(errors)
	}

	return nil
}

// FindByAssociatedUsersIDRequestMultiError is an error wrapping multiple
// validation errors returned by FindByAssociatedUsersIDRequest.ValidateAll()
// if the designated constraints aren't met.
type FindByAssociatedUsersIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByAssociatedUsersIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByAssociatedUsersIDRequestMultiError) AllErrors() []error { return m }

// FindByAssociatedUsersIDRequestValidationError is the validation error
// returned by FindByAssociatedUsersIDRequest.Validate if the designated
// constraints aren't met.
type FindByAssociatedUsersIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByAssociatedUsersIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByAssociatedUsersIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByAssociatedUsersIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByAssociatedUsersIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByAssociatedUsersIDRequestValidationError) ErrorName() string {
	return "FindByAssociatedUsersIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByAssociatedUsersIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByAssociatedUsersIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByAssociatedUsersIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByAssociatedUsersIDRequestValidationError{}

// Validate checks the field values on FindByAssociatedUsersIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByAssociatedUsersIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByAssociatedUsersIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByAssociatedUsersIDReplyMultiError, or nil if none found.
func (m *FindByAssociatedUsersIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByAssociatedUsersIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByAssociatedUsersIDReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByAssociatedUsersIDReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByAssociatedUsersIDReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByAssociatedUsersIDReplyMultiError(errors)
	}

	return nil
}

// FindByAssociatedUsersIDReplyMultiError is an error wrapping multiple
// validation errors returned by FindByAssociatedUsersIDReply.ValidateAll() if
// the designated constraints aren't met.
type FindByAssociatedUsersIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByAssociatedUsersIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByAssociatedUsersIDReplyMultiError) AllErrors() []error { return m }

// FindByAssociatedUsersIDReplyValidationError is the validation error returned
// by FindByAssociatedUsersIDReply.Validate if the designated constraints
// aren't met.
type FindByAssociatedUsersIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByAssociatedUsersIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByAssociatedUsersIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByAssociatedUsersIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByAssociatedUsersIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByAssociatedUsersIDReplyValidationError) ErrorName() string {
	return "FindByAssociatedUsersIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FindByAssociatedUsersIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByAssociatedUsersIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByAssociatedUsersIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByAssociatedUsersIDReplyValidationError{}
