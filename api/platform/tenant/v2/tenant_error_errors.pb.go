// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 创建租户失败
func IsCreateTenantError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_CREATE_TENANT_ERROR.String() && e.Code == 401
}

// 创建租户失败
func ErrorCreateTenantError(format string, args ...interface{}) *errors.Error {
	return errors.New(401, TenantErrorReason_CREATE_TENANT_ERROR.String(), fmt.Sprintf(format, args...))
}

// 更新租户信息失败
func IsUpdateTenantError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_UPDATE_TENANT_ERROR.String() && e.Code == 505
}

// 更新租户信息失败
func ErrorUpdateTenantError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_UPDATE_TENANT_ERROR.String(), fmt.Sprintf(format, args...))
}

// 绑定手机号失败
func IsBindingPhoneError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_BINDING_PHONE_ERROR.String() && e.Code == 505
}

// 绑定手机号失败
func ErrorBindingPhoneError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_BINDING_PHONE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 删除租户
func IsDeleteTenantError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_DELETE_TENANT_ERROR.String() && e.Code == 505
}

// 删除租户
func ErrorDeleteTenantError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_DELETE_TENANT_ERROR.String(), fmt.Sprintf(format, args...))
}

// 查询租户失败
func IsFindTenantByIdError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_FIND_TENANT_BY_ID_ERROR.String() && e.Code == 505
}

// 查询租户失败
func ErrorFindTenantByIdError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_FIND_TENANT_BY_ID_ERROR.String(), fmt.Sprintf(format, args...))
}

// 获取租户列表失败
func IsGetTenantListError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_GET_TENANT_LIST_ERROR.String() && e.Code == 505
}

// 获取租户列表失败
func ErrorGetTenantListError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_GET_TENANT_LIST_ERROR.String(), fmt.Sprintf(format, args...))
}

// 根据关联用户查询租户失败
func IsFindTenantByAssociatedUsersIdError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_FIND_TENANT_BY_ASSOCIATED_USERS_ID_ERROR.String() && e.Code == 505
}

// 根据关联用户查询租户失败
func ErrorFindTenantByAssociatedUsersIdError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_FIND_TENANT_BY_ASSOCIATED_USERS_ID_ERROR.String(), fmt.Sprintf(format, args...))
}

// 租户已存在
func IsTenantAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_TENANT_ALREADY_EXISTS.String() && e.Code == 401
}

// 租户已存在
func ErrorTenantAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(401, TenantErrorReason_TENANT_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 不存在
func IsTenantNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_TENANT_NOT_FOUND.String() && e.Code == 404
}

// 不存在
func ErrorTenantNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, TenantErrorReason_TENANT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// Verification code verification failed
func IsVerificationCodeVerificationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_VERIFICATION_CODE_VERIFICATION_FAILED.String() && e.Code == 404
}

// Verification code verification failed
func ErrorVerificationCodeVerificationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(404, TenantErrorReason_VERIFICATION_CODE_VERIFICATION_FAILED.String(), fmt.Sprintf(format, args...))
}

// 序列化数据结构失败
func IsMarshalTenantDataEncodingFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_MARSHAL_TENANT_DATA_ENCODING_FAIL.String() && e.Code == 505
}

// 序列化数据结构失败
func ErrorMarshalTenantDataEncodingFail(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_MARSHAL_TENANT_DATA_ENCODING_FAIL.String(), fmt.Sprintf(format, args...))
}

// 加密请求信息失败encryption
func IsEncryptionRequestOptionFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_ENCRYPTION_REQUEST_OPTION_FAIL.String() && e.Code == 401
}

// 加密请求信息失败encryption
func ErrorEncryptionRequestOptionFail(format string, args ...interface{}) *errors.Error {
	return errors.New(401, TenantErrorReason_ENCRYPTION_REQUEST_OPTION_FAIL.String(), fmt.Sprintf(format, args...))
}

// 手机验证码错误
func IsMobileVerificationCodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_MOBILE_VERIFICATION_CODE_ERROR.String() && e.Code == 505
}

// 手机验证码错误
func ErrorMobileVerificationCodeError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_MOBILE_VERIFICATION_CODE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 申请参数错误
func IsApplicationParameterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_APPLICATION_PARAMETER_ERROR.String() && e.Code == 505
}

// 申请参数错误
func ErrorApplicationParameterError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_APPLICATION_PARAMETER_ERROR.String(), fmt.Sprintf(format, args...))
}

// 申请失败
func IsApplicationError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_APPLICATION_ERROR.String() && e.Code == 505
}

// 申请失败
func ErrorApplicationError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_APPLICATION_ERROR.String(), fmt.Sprintf(format, args...))
}

// 租户未开通
func IsTenantNotOpened(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_TENANT_NOT_OPENED.String() && e.Code == 404
}

// 租户未开通
func ErrorTenantNotOpened(format string, args ...interface{}) *errors.Error {
	return errors.New(404, TenantErrorReason_TENANT_NOT_OPENED.String(), fmt.Sprintf(format, args...))
}

// 申请审批中
func IsApplicationUnderReview(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_APPLICATION_UNDER_REVIEW.String() && e.Code == 505
}

// 申请审批中
func ErrorApplicationUnderReview(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_APPLICATION_UNDER_REVIEW.String(), fmt.Sprintf(format, args...))
}

// 网站已开通
func IsTheWebsiteHasBeenOpened(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_THE_WEBSITE_HAS_BEEN_OPENED.String() && e.Code == 505
}

// 网站已开通
func ErrorTheWebsiteHasBeenOpened(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_THE_WEBSITE_HAS_BEEN_OPENED.String(), fmt.Sprintf(format, args...))
}

// 申请审核中，请勿重复提交
func IsTenantMultipleApplication(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TenantErrorReason_TENANT_MULTIPLE_APPLICATION.String() && e.Code == 505
}

// 申请审核中，请勿重复提交
func ErrorTenantMultipleApplication(format string, args ...interface{}) *errors.Error {
	return errors.New(505, TenantErrorReason_TENANT_MULTIPLE_APPLICATION.String(), fmt.Sprintf(format, args...))
}
