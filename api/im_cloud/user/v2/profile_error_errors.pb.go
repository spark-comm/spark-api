// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户信息未找到
func IsProfileNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_PROFILE_NOT_FOUND.String() && e.Code == 404
}

// 用户信息未找到
func ErrorProfileNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorProfileReason_PROFILE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 获取数据失败
func IsGetDate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_GET_DATE.String() && e.Code == 504
}

// 获取数据失败
func ErrorGetDate(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorProfileReason_GET_DATE.String(), fmt.Sprintf(format, args...))
}

// 编辑用户异常
func IsFailedToEditProfile(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_FAILED_TO_EDIT_PROFILE.String() && e.Code == 501
}

// 编辑用户异常
func ErrorFailedToEditProfile(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorProfileReason_FAILED_TO_EDIT_PROFILE.String(), fmt.Sprintf(format, args...))
}

// 手机号不能为空
func IsPhoneIsNotEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_PHONE_IS_NOT_EMPTY.String() && e.Code == 502
}

// 手机号不能为空
func ErrorPhoneIsNotEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorProfileReason_PHONE_IS_NOT_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 搜索用户错误
func IsSearchProfileErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_SEARCH_PROFILE_ERR.String() && e.Code == 500
}

// 搜索用户错误
func ErrorSearchProfileErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_SEARCH_PROFILE_ERR.String(), fmt.Sprintf(format, args...))
}

// 缓存数据未找到
func IsCacheDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_CACHE_DATA_Not_Found.String() && e.Code == 404
}

// 缓存数据未找到
func ErrorCacheDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorProfileReason_CACHE_DATA_Not_Found.String(), fmt.Sprintf(format, args...))
}

// 删除用户信息失败
func IsFailedDeleteProfile(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_FAILED_DELETE_PROFILE.String() && e.Code == 505
}

// 删除用户信息失败
func ErrorFailedDeleteProfile(format string, args ...interface{}) *errors.Error {
	return errors.New(505, ErrorProfileReason_FAILED_DELETE_PROFILE.String(), fmt.Sprintf(format, args...))
}

// 设置私密聊天密码失败
func IsSetPrivacyPasswordFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_SET_PRIVACY_PASSWORD_FAIL.String() && e.Code == 500
}

// 设置私密聊天密码失败
func ErrorSetPrivacyPasswordFail(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_SET_PRIVACY_PASSWORD_FAIL.String(), fmt.Sprintf(format, args...))
}

// 未设置私密聊天密码
func IsNotSetPrivacyPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_NOT_SET_PRIVACY_PASSWORD.String() && e.Code == 500
}

// 未设置私密聊天密码
func ErrorNotSetPrivacyPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_NOT_SET_PRIVACY_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 历史密码验证失败
func IsHistoryPrivacyPasswordVerificationFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_HISTORY_PRIVACY_PASSWORD_VERIFICATION_FAIL.String() && e.Code == 500
}

// 历史密码验证失败
func ErrorHistoryPrivacyPasswordVerificationFail(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_HISTORY_PRIVACY_PASSWORD_VERIFICATION_FAIL.String(), fmt.Sprintf(format, args...))
}

// 输入邮箱与用户绑定邮箱不一致
func IsParamsEmailNotIsUserBind(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_PARAMS_EMAIL_NOT_IS_USER_BIND.String() && e.Code == 500
}

// 输入邮箱与用户绑定邮箱不一致
func ErrorParamsEmailNotIsUserBind(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_PARAMS_EMAIL_NOT_IS_USER_BIND.String(), fmt.Sprintf(format, args...))
}

// 输入手机与用户绑定手机不一致
func IsParamsPhoneNotIsUserBind(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_PARAMS_PHONE_NOT_IS_USER_BIND.String() && e.Code == 500
}

// 输入手机与用户绑定手机不一致
func ErrorParamsPhoneNotIsUserBind(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_PARAMS_PHONE_NOT_IS_USER_BIND.String(), fmt.Sprintf(format, args...))
}

// 用户非客户
func IsUserIsNotCustomer(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_USER_IS_NOT_CUSTOMER.String() && e.Code == 500
}

// 用户非客户
func ErrorUserIsNotCustomer(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorProfileReason_USER_IS_NOT_CUSTOMER.String(), fmt.Sprintf(format, args...))
}

// 该推广码无效
func IsThisShareCodeIsInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorProfileReason_THIS_SHARE_CODE_IS_INVALID.String() && e.Code == 504
}

// 该推广码无效
func ErrorThisShareCodeIsInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorProfileReason_THIS_SHARE_CODE_IS_INVALID.String(), fmt.Sprintf(format, args...))
}
