// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: im_cloud/user/v2/profile.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProfileReqMultiError, or nil if none found.
func (m *SearchProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SearchValue

	// no validation rules for Type

	if len(errors) > 0 {
		return SearchProfileReqMultiError(errors)
	}

	return nil
}

// SearchProfileReqMultiError is an error wrapping multiple validation errors
// returned by SearchProfileReq.ValidateAll() if the designated constraints
// aren't met.
type SearchProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProfileReqMultiError) AllErrors() []error { return m }

// SearchProfileReqValidationError is the validation error returned by
// SearchProfileReq.Validate if the designated constraints aren't met.
type SearchProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProfileReqValidationError) ErrorName() string { return "SearchProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProfileReqValidationError{}

// Validate checks the field values on SearchProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProfileReplyMultiError, or nil if none found.
func (m *SearchProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchProfileReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchProfileReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchProfileReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchProfileReplyMultiError(errors)
	}

	return nil
}

// SearchProfileReplyMultiError is an error wrapping multiple validation errors
// returned by SearchProfileReply.ValidateAll() if the designated constraints
// aren't met.
type SearchProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProfileReplyMultiError) AllErrors() []error { return m }

// SearchProfileReplyValidationError is the validation error returned by
// SearchProfileReply.Validate if the designated constraints aren't met.
type SearchProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProfileReplyValidationError) ErrorName() string {
	return "SearchProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProfileReplyValidationError{}

// Validate checks the field values on FindProfileByUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindProfileByUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProfileByUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindProfileByUserReqMultiError, or nil if none found.
func (m *FindProfileByUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProfileByUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindProfileByUserReqMultiError(errors)
	}

	return nil
}

// FindProfileByUserReqMultiError is an error wrapping multiple validation
// errors returned by FindProfileByUserReq.ValidateAll() if the designated
// constraints aren't met.
type FindProfileByUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProfileByUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProfileByUserReqMultiError) AllErrors() []error { return m }

// FindProfileByUserReqValidationError is the validation error returned by
// FindProfileByUserReq.Validate if the designated constraints aren't met.
type FindProfileByUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProfileByUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProfileByUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProfileByUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProfileByUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProfileByUserReqValidationError) ErrorName() string {
	return "FindProfileByUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindProfileByUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProfileByUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProfileByUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProfileByUserReqValidationError{}

// Validate checks the field values on FindProfileByUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindProfileByUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProfileByUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindProfileByUserReplyMultiError, or nil if none found.
func (m *FindProfileByUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProfileByUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindProfileByUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindProfileByUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindProfileByUserReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindProfileByUserReplyMultiError(errors)
	}

	return nil
}

// FindProfileByUserReplyMultiError is an error wrapping multiple validation
// errors returned by FindProfileByUserReply.ValidateAll() if the designated
// constraints aren't met.
type FindProfileByUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProfileByUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProfileByUserReplyMultiError) AllErrors() []error { return m }

// FindProfileByUserReplyValidationError is the validation error returned by
// FindProfileByUserReply.Validate if the designated constraints aren't met.
type FindProfileByUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProfileByUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProfileByUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProfileByUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProfileByUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProfileByUserReplyValidationError) ErrorName() string {
	return "FindProfileByUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FindProfileByUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProfileByUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProfileByUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProfileByUserReplyValidationError{}

// Validate checks the field values on FindFullProfileByUserIdReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindFullProfileByUserIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindFullProfileByUserIdReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindFullProfileByUserIdReqMultiError, or nil if none found.
func (m *FindFullProfileByUserIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindFullProfileByUserIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindFullProfileByUserIdReqMultiError(errors)
	}

	return nil
}

// FindFullProfileByUserIdReqMultiError is an error wrapping multiple
// validation errors returned by FindFullProfileByUserIdReq.ValidateAll() if
// the designated constraints aren't met.
type FindFullProfileByUserIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindFullProfileByUserIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindFullProfileByUserIdReqMultiError) AllErrors() []error { return m }

// FindFullProfileByUserIdReqValidationError is the validation error returned
// by FindFullProfileByUserIdReq.Validate if the designated constraints aren't met.
type FindFullProfileByUserIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindFullProfileByUserIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindFullProfileByUserIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindFullProfileByUserIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindFullProfileByUserIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindFullProfileByUserIdReqValidationError) ErrorName() string {
	return "FindFullProfileByUserIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindFullProfileByUserIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindFullProfileByUserIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindFullProfileByUserIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindFullProfileByUserIdReqValidationError{}

// Validate checks the field values on FindFullProfileByUserIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindFullProfileByUserIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindFullProfileByUserIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindFullProfileByUserIdReplyMultiError, or nil if none found.
func (m *FindFullProfileByUserIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindFullProfileByUserIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindFullProfileByUserIdReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindFullProfileByUserIdReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindFullProfileByUserIdReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindFullProfileByUserIdReplyMultiError(errors)
	}

	return nil
}

// FindFullProfileByUserIdReplyMultiError is an error wrapping multiple
// validation errors returned by FindFullProfileByUserIdReply.ValidateAll() if
// the designated constraints aren't met.
type FindFullProfileByUserIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindFullProfileByUserIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindFullProfileByUserIdReplyMultiError) AllErrors() []error { return m }

// FindFullProfileByUserIdReplyValidationError is the validation error returned
// by FindFullProfileByUserIdReply.Validate if the designated constraints
// aren't met.
type FindFullProfileByUserIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindFullProfileByUserIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindFullProfileByUserIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindFullProfileByUserIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindFullProfileByUserIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindFullProfileByUserIdReplyValidationError) ErrorName() string {
	return "FindFullProfileByUserIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FindFullProfileByUserIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindFullProfileByUserIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindFullProfileByUserIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindFullProfileByUserIdReplyValidationError{}

// Validate checks the field values on UpdateProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileReqMultiError, or nil if none found.
func (m *UpdateProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.FaceURL != nil {
		// no validation rules for FaceURL
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Birth != nil {
		// no validation rules for Birth
	}

	if m.IsOpenMoments != nil {
		// no validation rules for IsOpenMoments
	}

	if len(errors) > 0 {
		return UpdateProfileReqMultiError(errors)
	}

	return nil
}

// UpdateProfileReqMultiError is an error wrapping multiple validation errors
// returned by UpdateProfileReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileReqMultiError) AllErrors() []error { return m }

// UpdateProfileReqValidationError is the validation error returned by
// UpdateProfileReq.Validate if the designated constraints aren't met.
type UpdateProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileReqValidationError) ErrorName() string { return "UpdateProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileReqValidationError{}

// Validate checks the field values on UpdateProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileReplyMultiError, or nil if none found.
func (m *UpdateProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProfileReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProfileReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProfileReplyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProfileReplyMultiError(errors)
	}

	return nil
}

// UpdateProfileReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateProfileReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileReplyMultiError) AllErrors() []error { return m }

// UpdateProfileReplyValidationError is the validation error returned by
// UpdateProfileReply.Validate if the designated constraints aren't met.
type UpdateProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileReplyValidationError) ErrorName() string {
	return "UpdateProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileReplyValidationError{}

// Validate checks the field values on GetProfileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProfileReqMultiError, or
// nil if none found.
func (m *GetProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Account

	// no validation rules for Code

	// no validation rules for Phone

	// no validation rules for Emil

	if len(errors) > 0 {
		return GetProfileReqMultiError(errors)
	}

	return nil
}

// GetProfileReqMultiError is an error wrapping multiple validation errors
// returned by GetProfileReq.ValidateAll() if the designated constraints
// aren't met.
type GetProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileReqMultiError) AllErrors() []error { return m }

// GetProfileReqValidationError is the validation error returned by
// GetProfileReq.Validate if the designated constraints aren't met.
type GetProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileReqValidationError) ErrorName() string { return "GetProfileReqValidationError" }

// Error satisfies the builtin error interface
func (e GetProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileReqValidationError{}

// Validate checks the field values on GetProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileReplyMultiError, or nil if none found.
func (m *GetProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProfileReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProfileReplyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProfileReplyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProfileReplyMultiError(errors)
	}

	return nil
}

// GetProfileReplyMultiError is an error wrapping multiple validation errors
// returned by GetProfileReply.ValidateAll() if the designated constraints
// aren't met.
type GetProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileReplyMultiError) AllErrors() []error { return m }

// GetProfileReplyValidationError is the validation error returned by
// GetProfileReply.Validate if the designated constraints aren't met.
type GetProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileReplyValidationError) ErrorName() string { return "GetProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileReplyValidationError{}

// Validate checks the field values on SetOptionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetOptionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOptionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetOptionReqMultiError, or
// nil if none found.
func (m *SetOptionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOptionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Option

	// no validation rules for Value

	if len(errors) > 0 {
		return SetOptionReqMultiError(errors)
	}

	return nil
}

// SetOptionReqMultiError is an error wrapping multiple validation errors
// returned by SetOptionReq.ValidateAll() if the designated constraints aren't met.
type SetOptionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOptionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOptionReqMultiError) AllErrors() []error { return m }

// SetOptionReqValidationError is the validation error returned by
// SetOptionReq.Validate if the designated constraints aren't met.
type SetOptionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOptionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOptionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOptionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOptionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOptionReqValidationError) ErrorName() string { return "SetOptionReqValidationError" }

// Error satisfies the builtin error interface
func (e SetOptionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOptionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOptionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOptionReqValidationError{}

// Validate checks the field values on SetOptionReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetOptionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOptionReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetOptionReplyMultiError,
// or nil if none found.
func (m *SetOptionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOptionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOptionReplyMultiError(errors)
	}

	return nil
}

// SetOptionReplyMultiError is an error wrapping multiple validation errors
// returned by SetOptionReply.ValidateAll() if the designated constraints
// aren't met.
type SetOptionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOptionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOptionReplyMultiError) AllErrors() []error { return m }

// SetOptionReplyValidationError is the validation error returned by
// SetOptionReply.Validate if the designated constraints aren't met.
type SetOptionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOptionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOptionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOptionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOptionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOptionReplyValidationError) ErrorName() string { return "SetOptionReplyValidationError" }

// Error satisfies the builtin error interface
func (e SetOptionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOptionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOptionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOptionReplyValidationError{}

// Validate checks the field values on GetOptionValReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOptionValReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOptionValReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOptionValReqMultiError, or nil if none found.
func (m *GetOptionValReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOptionValReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Option

	if len(errors) > 0 {
		return GetOptionValReqMultiError(errors)
	}

	return nil
}

// GetOptionValReqMultiError is an error wrapping multiple validation errors
// returned by GetOptionValReq.ValidateAll() if the designated constraints
// aren't met.
type GetOptionValReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOptionValReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOptionValReqMultiError) AllErrors() []error { return m }

// GetOptionValReqValidationError is the validation error returned by
// GetOptionValReq.Validate if the designated constraints aren't met.
type GetOptionValReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOptionValReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOptionValReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOptionValReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOptionValReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOptionValReqValidationError) ErrorName() string { return "GetOptionValReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOptionValReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOptionValReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOptionValReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOptionValReqValidationError{}

// Validate checks the field values on GetOptionValReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOptionValReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOptionValReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOptionValReplyMultiError, or nil if none found.
func (m *GetOptionValReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOptionValReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetOptionValReplyMultiError(errors)
	}

	return nil
}

// GetOptionValReplyMultiError is an error wrapping multiple validation errors
// returned by GetOptionValReply.ValidateAll() if the designated constraints
// aren't met.
type GetOptionValReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOptionValReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOptionValReplyMultiError) AllErrors() []error { return m }

// GetOptionValReplyValidationError is the validation error returned by
// GetOptionValReply.Validate if the designated constraints aren't met.
type GetOptionValReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOptionValReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOptionValReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOptionValReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOptionValReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOptionValReplyValidationError) ErrorName() string {
	return "GetOptionValReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOptionValReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOptionValReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOptionValReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOptionValReplyValidationError{}

// Validate checks the field values on GetGlobalReceiveMessageOptReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGlobalReceiveMessageOptReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGlobalReceiveMessageOptReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGlobalReceiveMessageOptReqMultiError, or nil if none found.
func (m *GetGlobalReceiveMessageOptReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGlobalReceiveMessageOptReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGlobalReceiveMessageOptReqMultiError(errors)
	}

	return nil
}

// GetGlobalReceiveMessageOptReqMultiError is an error wrapping multiple
// validation errors returned by GetGlobalReceiveMessageOptReq.ValidateAll()
// if the designated constraints aren't met.
type GetGlobalReceiveMessageOptReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGlobalReceiveMessageOptReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGlobalReceiveMessageOptReqMultiError) AllErrors() []error { return m }

// GetGlobalReceiveMessageOptReqValidationError is the validation error
// returned by GetGlobalReceiveMessageOptReq.Validate if the designated
// constraints aren't met.
type GetGlobalReceiveMessageOptReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGlobalReceiveMessageOptReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGlobalReceiveMessageOptReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGlobalReceiveMessageOptReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGlobalReceiveMessageOptReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGlobalReceiveMessageOptReqValidationError) ErrorName() string {
	return "GetGlobalReceiveMessageOptReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGlobalReceiveMessageOptReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGlobalReceiveMessageOptReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGlobalReceiveMessageOptReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGlobalReceiveMessageOptReqValidationError{}

// Validate checks the field values on GetGlobalReceiveMessageOptReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGlobalReceiveMessageOptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGlobalReceiveMessageOptReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGlobalReceiveMessageOptReplyMultiError, or nil if none found.
func (m *GetGlobalReceiveMessageOptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGlobalReceiveMessageOptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GlobalRecvMsgOpt

	if len(errors) > 0 {
		return GetGlobalReceiveMessageOptReplyMultiError(errors)
	}

	return nil
}

// GetGlobalReceiveMessageOptReplyMultiError is an error wrapping multiple
// validation errors returned by GetGlobalReceiveMessageOptReply.ValidateAll()
// if the designated constraints aren't met.
type GetGlobalReceiveMessageOptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGlobalReceiveMessageOptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGlobalReceiveMessageOptReplyMultiError) AllErrors() []error { return m }

// GetGlobalReceiveMessageOptReplyValidationError is the validation error
// returned by GetGlobalReceiveMessageOptReply.Validate if the designated
// constraints aren't met.
type GetGlobalReceiveMessageOptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGlobalReceiveMessageOptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGlobalReceiveMessageOptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGlobalReceiveMessageOptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGlobalReceiveMessageOptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGlobalReceiveMessageOptReplyValidationError) ErrorName() string {
	return "GetGlobalReceiveMessageOptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGlobalReceiveMessageOptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGlobalReceiveMessageOptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGlobalReceiveMessageOptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGlobalReceiveMessageOptReplyValidationError{}

// Validate checks the field values on GetAllUserIDReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserIDReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserIDReqMultiError, or nil if none found.
func (m *GetAllUserIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllUserIDReqMultiError(errors)
	}

	return nil
}

// GetAllUserIDReqMultiError is an error wrapping multiple validation errors
// returned by GetAllUserIDReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllUserIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserIDReqMultiError) AllErrors() []error { return m }

// GetAllUserIDReqValidationError is the validation error returned by
// GetAllUserIDReq.Validate if the designated constraints aren't met.
type GetAllUserIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserIDReqValidationError) ErrorName() string { return "GetAllUserIDReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAllUserIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserIDReqValidationError{}

// Validate checks the field values on GetAllUserIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserIDReplyMultiError, or nil if none found.
func (m *GetAllUserIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllUserIDReplyMultiError(errors)
	}

	return nil
}

// GetAllUserIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetAllUserIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetAllUserIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserIDReplyMultiError) AllErrors() []error { return m }

// GetAllUserIDReplyValidationError is the validation error returned by
// GetAllUserIDReply.Validate if the designated constraints aren't met.
type GetAllUserIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserIDReplyValidationError) ErrorName() string {
	return "GetAllUserIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserIDReplyValidationError{}
