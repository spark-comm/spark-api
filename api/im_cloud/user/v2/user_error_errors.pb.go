// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户未找到
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 用户未找到
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorUserReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 创建用户错误
func IsFailedToCreateUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_FAILED_TO_CREATE_USER.String() && e.Code == 501
}

// 创建用户错误
func ErrorFailedToCreateUser(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorUserReason_FAILED_TO_CREATE_USER.String(), fmt.Sprintf(format, args...))
}

// 创建用户错误
func IsAccountAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_ACCOUNT_ALREADY_EXISTS.String() && e.Code == 501
}

// 创建用户错误
func ErrorAccountAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorUserReason_ACCOUNT_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 编辑用户异常
func IsFailedToEditUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_FAILED_TO_EDIT_USER.String() && e.Code == 502
}

// 编辑用户异常
func ErrorFailedToEditUser(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorUserReason_FAILED_TO_EDIT_USER.String(), fmt.Sprintf(format, args...))
}

// 更新用户密码错误
func IsFailedUpdateUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_FAILED_UPDATE_USER_PASSWORD.String() && e.Code == 503
}

// 更新用户密码错误
func ErrorFailedUpdateUserPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorUserReason_FAILED_UPDATE_USER_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 删除用户错误
func IsDeleteUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_DELETE_USER_FAILED.String() && e.Code == 504
}

// 删除用户错误
func ErrorDeleteUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorUserReason_DELETE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

// 获取用户状态错误
func IsGetUserStatusFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserReason_GET_USER_STATUS_FAILED.String() && e.Code == 504
}

// 获取用户状态错误
func ErrorGetUserStatusFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorUserReason_GET_USER_STATUS_FAILED.String(), fmt.Sprintf(format, args...))
}
