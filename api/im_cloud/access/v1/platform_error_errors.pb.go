// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 获取密钥失败
func IsGetNodeKeyErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorPlatformReason_GET_NODE_KEY_ERR.String() && e.Code == 500
}

// 获取密钥失败
func ErrorGetNodeKeyErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorPlatformReason_GET_NODE_KEY_ERR.String(), fmt.Sprintf(format, args...))
}

// 下发主节点信息失败
func IsDistributeMasterNodeConfigErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorPlatformReason_DISTRIBUTE_MASTER_NODE_CONFIG_ERR.String() && e.Code == 500
}

// 下发主节点信息失败
func ErrorDistributeMasterNodeConfigErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorPlatformReason_DISTRIBUTE_MASTER_NODE_CONFIG_ERR.String(), fmt.Sprintf(format, args...))
}

// 下发代理节点信息失败
func IsDistributeProxyNodeConfigErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorPlatformReason_DISTRIBUTE_PROXY_NODE_CONFIG_ERR.String() && e.Code == 500
}

// 下发代理节点信息失败
func ErrorDistributeProxyNodeConfigErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorPlatformReason_DISTRIBUTE_PROXY_NODE_CONFIG_ERR.String(), fmt.Sprintf(format, args...))
}

// 获取节点状态失败
func IsNodeStatusErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorPlatformReason_NODE_STATUS_ERR.String() && e.Code == 500
}

// 获取节点状态失败
func ErrorNodeStatusErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorPlatformReason_NODE_STATUS_ERR.String(), fmt.Sprintf(format, args...))
}

// 下发用户失败
func IsDistributeUserErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorPlatformReason_DISTRIBUTE_USER_ERR.String() && e.Code == 500
}

// 下发用户失败
func ErrorDistributeUserErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorPlatformReason_DISTRIBUTE_USER_ERR.String(), fmt.Sprintf(format, args...))
}

// 上报用户失败
func IsEscalationUserErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorPlatformReason_ESCALATION_USER_ERR.String() && e.Code == 500
}

// 上报用户失败
func ErrorEscalationUserErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorPlatformReason_ESCALATION_USER_ERR.String(), fmt.Sprintf(format, args...))
}
