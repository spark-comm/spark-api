// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 发送请求失败
func IsSendRequestErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAccessReason_SEND_REQUEST_ERR.String() && e.Code == 404
}

// 发送请求失败
func ErrorSendRequestErr(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorAccessReason_SEND_REQUEST_ERR.String(), fmt.Sprintf(format, args...))
}

func IsKeyErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAccessReason_KEY_ERR.String() && e.Code == 504
}

func ErrorKeyErr(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorAccessReason_KEY_ERR.String(), fmt.Sprintf(format, args...))
}

// 链接异常
func IsLinkFailure(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAccessReason_LINK_FAILURE.String() && e.Code == 501
}

// 链接异常
func ErrorLinkFailure(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorAccessReason_LINK_FAILURE.String(), fmt.Sprintf(format, args...))
}

// 验证签名失败
func IsVerifySignErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAccessReason_VERIFY_SIGN_ERR.String() && e.Code == 504
}

// 验证签名失败
func ErrorVerifySignErr(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorAccessReason_VERIFY_SIGN_ERR.String(), fmt.Sprintf(format, args...))
}

// 签名失败
func IsReqSignErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAccessReason_REQ_SIGN_ERR.String() && e.Code == 504
}

// 签名失败
func ErrorReqSignErr(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorAccessReason_REQ_SIGN_ERR.String(), fmt.Sprintf(format, args...))
}

// 处理函数不不存在
func IsHandleMethodNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAccessReason_HANDLE_METHOD_NOT_FOUND.String() && e.Code == 404
}

// 处理函数不不存在
func ErrorHandleMethodNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorAccessReason_HANDLE_METHOD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
