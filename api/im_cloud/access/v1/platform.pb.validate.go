// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: im_cloud/access/v1/platform.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DistributeMasterNodeConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeMasterNodeConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeMasterNodeConfigReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DistributeMasterNodeConfigReqMultiError, or nil if none found.
func (m *DistributeMasterNodeConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeMasterNodeConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetData()) < 1 {
		err := DistributeMasterNodeConfigReqValidationError{
			field:  "Data",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NodeId

	if len(errors) > 0 {
		return DistributeMasterNodeConfigReqMultiError(errors)
	}

	return nil
}

// DistributeMasterNodeConfigReqMultiError is an error wrapping multiple
// validation errors returned by DistributeMasterNodeConfigReq.ValidateAll()
// if the designated constraints aren't met.
type DistributeMasterNodeConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeMasterNodeConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeMasterNodeConfigReqMultiError) AllErrors() []error { return m }

// DistributeMasterNodeConfigReqValidationError is the validation error
// returned by DistributeMasterNodeConfigReq.Validate if the designated
// constraints aren't met.
type DistributeMasterNodeConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeMasterNodeConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeMasterNodeConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeMasterNodeConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeMasterNodeConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeMasterNodeConfigReqValidationError) ErrorName() string {
	return "DistributeMasterNodeConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeMasterNodeConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeMasterNodeConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeMasterNodeConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeMasterNodeConfigReqValidationError{}

// Validate checks the field values on DistributeMasterNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeMasterNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeMasterNodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeMasterNodeReplyMultiError, or nil if none found.
func (m *DistributeMasterNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeMasterNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributeMasterNodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributeMasterNodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributeMasterNodeReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DistributeMasterNodeReplyMultiError(errors)
	}

	return nil
}

// DistributeMasterNodeReplyMultiError is an error wrapping multiple validation
// errors returned by DistributeMasterNodeReply.ValidateAll() if the
// designated constraints aren't met.
type DistributeMasterNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeMasterNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeMasterNodeReplyMultiError) AllErrors() []error { return m }

// DistributeMasterNodeReplyValidationError is the validation error returned by
// DistributeMasterNodeReply.Validate if the designated constraints aren't met.
type DistributeMasterNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeMasterNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeMasterNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeMasterNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeMasterNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeMasterNodeReplyValidationError) ErrorName() string {
	return "DistributeMasterNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeMasterNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeMasterNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeMasterNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeMasterNodeReplyValidationError{}

// Validate checks the field values on DistributeProxyNodeConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeProxyNodeConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeProxyNodeConfigReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeProxyNodeConfigReqMultiError, or nil if none found.
func (m *DistributeProxyNodeConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeProxyNodeConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Data

	// no validation rules for Sign

	if len(errors) > 0 {
		return DistributeProxyNodeConfigReqMultiError(errors)
	}

	return nil
}

// DistributeProxyNodeConfigReqMultiError is an error wrapping multiple
// validation errors returned by DistributeProxyNodeConfigReq.ValidateAll() if
// the designated constraints aren't met.
type DistributeProxyNodeConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeProxyNodeConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeProxyNodeConfigReqMultiError) AllErrors() []error { return m }

// DistributeProxyNodeConfigReqValidationError is the validation error returned
// by DistributeProxyNodeConfigReq.Validate if the designated constraints
// aren't met.
type DistributeProxyNodeConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeProxyNodeConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeProxyNodeConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeProxyNodeConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeProxyNodeConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeProxyNodeConfigReqValidationError) ErrorName() string {
	return "DistributeProxyNodeConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeProxyNodeConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeProxyNodeConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeProxyNodeConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeProxyNodeConfigReqValidationError{}

// Validate checks the field values on DistributeProxyNodeConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeProxyNodeConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeProxyNodeConfigReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DistributeProxyNodeConfigReplyMultiError, or nil if none found.
func (m *DistributeProxyNodeConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeProxyNodeConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributeProxyNodeConfigReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributeProxyNodeConfigReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributeProxyNodeConfigReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DistributeProxyNodeConfigReplyMultiError(errors)
	}

	return nil
}

// DistributeProxyNodeConfigReplyMultiError is an error wrapping multiple
// validation errors returned by DistributeProxyNodeConfigReply.ValidateAll()
// if the designated constraints aren't met.
type DistributeProxyNodeConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeProxyNodeConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeProxyNodeConfigReplyMultiError) AllErrors() []error { return m }

// DistributeProxyNodeConfigReplyValidationError is the validation error
// returned by DistributeProxyNodeConfigReply.Validate if the designated
// constraints aren't met.
type DistributeProxyNodeConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeProxyNodeConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeProxyNodeConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeProxyNodeConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeProxyNodeConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeProxyNodeConfigReplyValidationError) ErrorName() string {
	return "DistributeProxyNodeConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeProxyNodeConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeProxyNodeConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeProxyNodeConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeProxyNodeConfigReplyValidationError{}

// Validate checks the field values on GetNodeStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeStatusReqMultiError, or nil if none found.
func (m *GetNodeStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return GetNodeStatusReqMultiError(errors)
	}

	return nil
}

// GetNodeStatusReqMultiError is an error wrapping multiple validation errors
// returned by GetNodeStatusReq.ValidateAll() if the designated constraints
// aren't met.
type GetNodeStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeStatusReqMultiError) AllErrors() []error { return m }

// GetNodeStatusReqValidationError is the validation error returned by
// GetNodeStatusReq.Validate if the designated constraints aren't met.
type GetNodeStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeStatusReqValidationError) ErrorName() string { return "GetNodeStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeStatusReqValidationError{}

// Validate checks the field values on GetNodeStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeStatusReplyMultiError, or nil if none found.
func (m *GetNodeStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Reason

	if len(errors) > 0 {
		return GetNodeStatusReplyMultiError(errors)
	}

	return nil
}

// GetNodeStatusReplyMultiError is an error wrapping multiple validation errors
// returned by GetNodeStatusReply.ValidateAll() if the designated constraints
// aren't met.
type GetNodeStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeStatusReplyMultiError) AllErrors() []error { return m }

// GetNodeStatusReplyValidationError is the validation error returned by
// GetNodeStatusReply.Validate if the designated constraints aren't met.
type GetNodeStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeStatusReplyValidationError) ErrorName() string {
	return "GetNodeStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeStatusReplyValidationError{}

// Validate checks the field values on GetNodeKeyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeKeyReplyMultiError, or nil if none found.
func (m *GetNodeKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PriKey

	if len(errors) > 0 {
		return GetNodeKeyReplyMultiError(errors)
	}

	return nil
}

// GetNodeKeyReplyMultiError is an error wrapping multiple validation errors
// returned by GetNodeKeyReply.ValidateAll() if the designated constraints
// aren't met.
type GetNodeKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeKeyReplyMultiError) AllErrors() []error { return m }

// GetNodeKeyReplyValidationError is the validation error returned by
// GetNodeKeyReply.Validate if the designated constraints aren't met.
type GetNodeKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeKeyReplyValidationError) ErrorName() string { return "GetNodeKeyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeKeyReplyValidationError{}

// Validate checks the field values on GetNodeFunctionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeFunctionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeFunctionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeFunctionReplyMultiError, or nil if none found.
func (m *GetNodeFunctionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeFunctionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNodeFunctionReplyMultiError(errors)
	}

	return nil
}

// GetNodeFunctionReplyMultiError is an error wrapping multiple validation
// errors returned by GetNodeFunctionReply.ValidateAll() if the designated
// constraints aren't met.
type GetNodeFunctionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeFunctionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeFunctionReplyMultiError) AllErrors() []error { return m }

// GetNodeFunctionReplyValidationError is the validation error returned by
// GetNodeFunctionReply.Validate if the designated constraints aren't met.
type GetNodeFunctionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeFunctionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeFunctionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeFunctionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeFunctionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeFunctionReplyValidationError) ErrorName() string {
	return "GetNodeFunctionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeFunctionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeFunctionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeFunctionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeFunctionReplyValidationError{}

// Validate checks the field values on DistributeUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DistributeUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeUserReqMultiError, or nil if none found.
func (m *DistributeUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetData()) < 1 {
		err := DistributeUserReqValidationError{
			field:  "Data",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NodeId

	// no validation rules for Sign

	if len(errors) > 0 {
		return DistributeUserReqMultiError(errors)
	}

	return nil
}

// DistributeUserReqMultiError is an error wrapping multiple validation errors
// returned by DistributeUserReq.ValidateAll() if the designated constraints
// aren't met.
type DistributeUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeUserReqMultiError) AllErrors() []error { return m }

// DistributeUserReqValidationError is the validation error returned by
// DistributeUserReq.Validate if the designated constraints aren't met.
type DistributeUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeUserReqValidationError) ErrorName() string {
	return "DistributeUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeUserReqValidationError{}

// Validate checks the field values on DistributeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributeUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributeUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributeUserReplyMultiError, or nil if none found.
func (m *DistributeUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributeUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistributeUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistributeUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributeUserReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DistributeUserReplyMultiError(errors)
	}

	return nil
}

// DistributeUserReplyMultiError is an error wrapping multiple validation
// errors returned by DistributeUserReply.ValidateAll() if the designated
// constraints aren't met.
type DistributeUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributeUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributeUserReplyMultiError) AllErrors() []error { return m }

// DistributeUserReplyValidationError is the validation error returned by
// DistributeUserReply.Validate if the designated constraints aren't met.
type DistributeUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeUserReplyValidationError) ErrorName() string {
	return "DistributeUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeUserReplyValidationError{}

// Validate checks the field values on EscalationUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EscalationUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EscalationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EscalationUserReqMultiError, or nil if none found.
func (m *EscalationUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EscalationUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := EscalationUserReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NodeId

	if len(errors) > 0 {
		return EscalationUserReqMultiError(errors)
	}

	return nil
}

// EscalationUserReqMultiError is an error wrapping multiple validation errors
// returned by EscalationUserReq.ValidateAll() if the designated constraints
// aren't met.
type EscalationUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EscalationUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EscalationUserReqMultiError) AllErrors() []error { return m }

// EscalationUserReqValidationError is the validation error returned by
// EscalationUserReq.Validate if the designated constraints aren't met.
type EscalationUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EscalationUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EscalationUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EscalationUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EscalationUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EscalationUserReqValidationError) ErrorName() string {
	return "EscalationUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e EscalationUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEscalationUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EscalationUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EscalationUserReqValidationError{}

// Validate checks the field values on EscalationUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EscalationUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EscalationUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EscalationUserReplyMultiError, or nil if none found.
func (m *EscalationUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EscalationUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EscalationUserReplyMultiError(errors)
	}

	return nil
}

// EscalationUserReplyMultiError is an error wrapping multiple validation
// errors returned by EscalationUserReply.ValidateAll() if the designated
// constraints aren't met.
type EscalationUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EscalationUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EscalationUserReplyMultiError) AllErrors() []error { return m }

// EscalationUserReplyValidationError is the validation error returned by
// EscalationUserReply.Validate if the designated constraints aren't met.
type EscalationUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EscalationUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EscalationUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EscalationUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EscalationUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EscalationUserReplyValidationError) ErrorName() string {
	return "EscalationUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EscalationUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEscalationUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EscalationUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EscalationUserReplyValidationError{}

// Validate checks the field values on UpdateCenterUserPasswordReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCenterUserPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCenterUserPasswordReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCenterUserPasswordReqMultiError, or nil if none found.
func (m *UpdateCenterUserPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCenterUserPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := UpdateCenterUserPasswordReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return UpdateCenterUserPasswordReqMultiError(errors)
	}

	return nil
}

// UpdateCenterUserPasswordReqMultiError is an error wrapping multiple
// validation errors returned by UpdateCenterUserPasswordReq.ValidateAll() if
// the designated constraints aren't met.
type UpdateCenterUserPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCenterUserPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCenterUserPasswordReqMultiError) AllErrors() []error { return m }

// UpdateCenterUserPasswordReqValidationError is the validation error returned
// by UpdateCenterUserPasswordReq.Validate if the designated constraints
// aren't met.
type UpdateCenterUserPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCenterUserPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCenterUserPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCenterUserPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCenterUserPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCenterUserPasswordReqValidationError) ErrorName() string {
	return "UpdateCenterUserPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCenterUserPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCenterUserPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCenterUserPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCenterUserPasswordReqValidationError{}

// Validate checks the field values on UpdateCenterUserPasswordReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCenterUserPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCenterUserPasswordReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCenterUserPasswordReplyMultiError, or nil if none found.
func (m *UpdateCenterUserPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCenterUserPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCenterUserPasswordReplyMultiError(errors)
	}

	return nil
}

// UpdateCenterUserPasswordReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateCenterUserPasswordReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateCenterUserPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCenterUserPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCenterUserPasswordReplyMultiError) AllErrors() []error { return m }

// UpdateCenterUserPasswordReplyValidationError is the validation error
// returned by UpdateCenterUserPasswordReply.Validate if the designated
// constraints aren't met.
type UpdateCenterUserPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCenterUserPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCenterUserPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCenterUserPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCenterUserPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCenterUserPasswordReplyValidationError) ErrorName() string {
	return "UpdateCenterUserPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCenterUserPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCenterUserPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCenterUserPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCenterUserPasswordReplyValidationError{}

// Validate checks the field values on CancelAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelAccountReqMultiError, or nil if none found.
func (m *CancelAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CancelAccountReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelAccountReqMultiError(errors)
	}

	return nil
}

// CancelAccountReqMultiError is an error wrapping multiple validation errors
// returned by CancelAccountReq.ValidateAll() if the designated constraints
// aren't met.
type CancelAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAccountReqMultiError) AllErrors() []error { return m }

// CancelAccountReqValidationError is the validation error returned by
// CancelAccountReq.Validate if the designated constraints aren't met.
type CancelAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAccountReqValidationError) ErrorName() string { return "CancelAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAccountReqValidationError{}

// Validate checks the field values on CancelAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelAccountReplyMultiError, or nil if none found.
func (m *CancelAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelAccountReplyMultiError(errors)
	}

	return nil
}

// CancelAccountReplyMultiError is an error wrapping multiple validation errors
// returned by CancelAccountReply.ValidateAll() if the designated constraints
// aren't met.
type CancelAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAccountReplyMultiError) AllErrors() []error { return m }

// CancelAccountReplyValidationError is the validation error returned by
// CancelAccountReply.Validate if the designated constraints aren't met.
type CancelAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAccountReplyValidationError) ErrorName() string {
	return "CancelAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAccountReplyValidationError{}
