// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: im_cloud/group/v2/group.proto

package v2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v2 "github.com/spark-comm/spark-api/api/common/model/group/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupSwitchOption int32

const (
	GroupSwitchOption_needVerification  GroupSwitchOption = 0
	GroupSwitchOption_isReal            GroupSwitchOption = 1
	GroupSwitchOption_isOpen            GroupSwitchOption = 2
	GroupSwitchOption_allowPrivateChat  GroupSwitchOption = 3
	GroupSwitchOption_lookMemberInfo    GroupSwitchOption = 4
	GroupSwitchOption_applyMemberFriend GroupSwitchOption = 5
)

// Enum value maps for GroupSwitchOption.
var (
	GroupSwitchOption_name = map[int32]string{
		0: "needVerification",
		1: "isReal",
		2: "isOpen",
		3: "allowPrivateChat",
		4: "lookMemberInfo",
		5: "applyMemberFriend",
	}
	GroupSwitchOption_value = map[string]int32{
		"needVerification":  0,
		"isReal":            1,
		"isOpen":            2,
		"allowPrivateChat":  3,
		"lookMemberInfo":    4,
		"applyMemberFriend": 5,
	}
)

func (x GroupSwitchOption) Enum() *GroupSwitchOption {
	p := new(GroupSwitchOption)
	*p = x
	return p
}

func (x GroupSwitchOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupSwitchOption) Descriptor() protoreflect.EnumDescriptor {
	return file_im_cloud_group_v2_group_proto_enumTypes[0].Descriptor()
}

func (GroupSwitchOption) Type() protoreflect.EnumType {
	return &file_im_cloud_group_v2_group_proto_enumTypes[0]
}

func (x GroupSwitchOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupSwitchOption.Descriptor instead.
func (GroupSwitchOption) EnumDescriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{0}
}

// 创建群 存在
// -------------------------------------------
type CrateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName        string   `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`                //群名称
	Notification     string   `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`          // 公告
	Introduction     string   `protobuf:"bytes,3,opt,name=introduction,proto3" json:"introduction,omitempty"`          //简介
	FaceURL          string   `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`                    //头像
	CreatorUserID    string   `protobuf:"bytes,5,opt,name=creatorUserID,proto3" json:"creatorUserID,omitempty"`        //创建人
	GroupType        int64    `protobuf:"varint,6,opt,name=groupType,proto3" json:"groupType,omitempty"`               //群类型
	MemberList       []string `protobuf:"bytes,7,rep,name=memberList,proto3" json:"memberList,omitempty"`              //成员列表
	NeedVerification int32    `protobuf:"varint,8,opt,name=needVerification,proto3" json:"needVerification,omitempty"` //需要验证
	Platform         string   `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *CrateGroupReq) Reset() {
	*x = CrateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrateGroupReq) ProtoMessage() {}

func (x *CrateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrateGroupReq.ProtoReflect.Descriptor instead.
func (*CrateGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{0}
}

func (x *CrateGroupReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CrateGroupReq) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *CrateGroupReq) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *CrateGroupReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *CrateGroupReq) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *CrateGroupReq) GetGroupType() int64 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *CrateGroupReq) GetMemberList() []string {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *CrateGroupReq) GetNeedVerification() int32 {
	if x != nil {
		return x.NeedVerification
	}
	return 0
}

func (x *CrateGroupReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type CrateGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInfo *v2.GroupInfo `protobuf:"bytes,1,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"` //群信息
}

func (x *CrateGroupReply) Reset() {
	*x = CrateGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrateGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrateGroupReply) ProtoMessage() {}

func (x *CrateGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrateGroupReply.ProtoReflect.Descriptor instead.
func (*CrateGroupReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{1}
}

func (x *CrateGroupReply) GetGroupInfo() *v2.GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

// 修改群资料 存在
// -------------------------------------------
type EditGroupProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID      string  `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	FaceURL      string  `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	GroupName    string  `protobuf:"bytes,3,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Notification string  `protobuf:"bytes,4,opt,name=notification,proto3" json:"notification,omitempty"` //公告
	MemberCount  int64   `protobuf:"varint,5,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	UserID       string  `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	Introduction *string `protobuf:"bytes,7,opt,name=introduction,proto3,oneof" json:"introduction,omitempty"` //简介
}

func (x *EditGroupProfileReq) Reset() {
	*x = EditGroupProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupProfileReq) ProtoMessage() {}

func (x *EditGroupProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupProfileReq.ProtoReflect.Descriptor instead.
func (*EditGroupProfileReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{2}
}

func (x *EditGroupProfileReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *EditGroupProfileReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *EditGroupProfileReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *EditGroupProfileReq) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *EditGroupProfileReq) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *EditGroupProfileReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *EditGroupProfileReq) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

// 更新群开关 存在
// -------------------------------------------
type UpdateGroupSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string            `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserID  string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Field   GroupSwitchOption `protobuf:"varint,3,opt,name=field,proto3,enum=api.im_cloud.group.v2.GroupSwitchOption" json:"field,omitempty"`
	Updates int32             `protobuf:"varint,4,opt,name=updates,proto3" json:"updates,omitempty"`
}

func (x *UpdateGroupSwitchReq) Reset() {
	*x = UpdateGroupSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupSwitchReq) ProtoMessage() {}

func (x *UpdateGroupSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupSwitchReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupSwitchReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateGroupSwitchReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *UpdateGroupSwitchReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateGroupSwitchReq) GetField() GroupSwitchOption {
	if x != nil {
		return x.Field
	}
	return GroupSwitchOption_needVerification
}

func (x *UpdateGroupSwitchReq) GetUpdates() int32 {
	if x != nil {
		return x.Updates
	}
	return 0
}

// 解散群 存在
// -------------------------------------------
type DismissGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *DismissGroupReq) Reset() {
	*x = DismissGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissGroupReq) ProtoMessage() {}

func (x *DismissGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissGroupReq.ProtoReflect.Descriptor instead.
func (*DismissGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{4}
}

func (x *DismissGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DismissGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

// 解散群通知请求 存在
// -------------------------------------------
type DismissGroupNoticeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *DismissGroupNoticeReq) Reset() {
	*x = DismissGroupNoticeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissGroupNoticeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissGroupNoticeReq) ProtoMessage() {}

func (x *DismissGroupNoticeReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissGroupNoticeReq.ProtoReflect.Descriptor instead.
func (*DismissGroupNoticeReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{5}
}

func (x *DismissGroupNoticeReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DismissGroupNoticeReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

// 禁言群请求 存在
// -------------------------------------------
type MuteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	PUserID string `protobuf:"bytes,2,opt,name=pUserID,proto3" json:"pUserID,omitempty"` //操作人
}

func (x *MuteGroupReq) Reset() {
	*x = MuteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteGroupReq) ProtoMessage() {}

func (x *MuteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteGroupReq.ProtoReflect.Descriptor instead.
func (*MuteGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{6}
}

func (x *MuteGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *MuteGroupReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

// 取消禁言群请求 存在
// -------------------------------------------
type CancelMuteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	PUserID string `protobuf:"bytes,2,opt,name=pUserID,proto3" json:"pUserID,omitempty"` //操作人
}

func (x *CancelMuteGroupReq) Reset() {
	*x = CancelMuteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMuteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMuteGroupReq) ProtoMessage() {}

func (x *CancelMuteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMuteGroupReq.ProtoReflect.Descriptor instead.
func (*CancelMuteGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{7}
}

func (x *CancelMuteGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CancelMuteGroupReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

// 禁言群成员请求 存在
// -------------------------------------------
type MuteGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID      string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	MutedSeconds int64  `protobuf:"varint,2,opt,name=mutedSeconds,proto3" json:"mutedSeconds,omitempty"` //禁言时长 s
	UserID       string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	PUserID      string `protobuf:"bytes,4,opt,name=pUserID,proto3" json:"pUserID,omitempty"` //操作人
}

func (x *MuteGroupMemberReq) Reset() {
	*x = MuteGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteGroupMemberReq) ProtoMessage() {}

func (x *MuteGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteGroupMemberReq.ProtoReflect.Descriptor instead.
func (*MuteGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{8}
}

func (x *MuteGroupMemberReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *MuteGroupMemberReq) GetMutedSeconds() int64 {
	if x != nil {
		return x.MutedSeconds
	}
	return 0
}

func (x *MuteGroupMemberReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MuteGroupMemberReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

// 取消禁言群成员请求 存在
// -------------------------------------------
type CancelMuteGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	PUserID string `protobuf:"bytes,3,opt,name=pUserID,proto3" json:"pUserID,omitempty"` //操作人
}

func (x *CancelMuteGroupMemberReq) Reset() {
	*x = CancelMuteGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMuteGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMuteGroupMemberReq) ProtoMessage() {}

func (x *CancelMuteGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMuteGroupMemberReq.ProtoReflect.Descriptor instead.
func (*CancelMuteGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{9}
}

func (x *CancelMuteGroupMemberReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CancelMuteGroupMemberReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CancelMuteGroupMemberReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

// 设置群成员信息 存在
// -------------------------------------------
type SetGroupMemberInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID       string  `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`                   //群ID
	UserID        string  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                     //用户ID
	Nickname      string  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                 //昵称
	FaceURL       string  `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`                   //头像
	RoleLevel     int32   `protobuf:"varint,5,opt,name=roleLevel,proto3" json:"roleLevel,omitempty"`              //等级
	Ex            string  `protobuf:"bytes,6,opt,name=ex,proto3" json:"ex,omitempty"`                             //扩展
	PUserID       string  `protobuf:"bytes,7,opt,name=pUserID,proto3" json:"pUserID,omitempty"`                   //操作人id
	BackgroundUrl *string `protobuf:"bytes,8,opt,name=backgroundUrl,proto3,oneof" json:"backgroundUrl,omitempty"` //设置背景图片
}

func (x *SetGroupMemberInfoReq) Reset() {
	*x = SetGroupMemberInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupMemberInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupMemberInfoReq) ProtoMessage() {}

func (x *SetGroupMemberInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupMemberInfoReq.ProtoReflect.Descriptor instead.
func (*SetGroupMemberInfoReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{10}
}

func (x *SetGroupMemberInfoReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetRoleLevel() int32 {
	if x != nil {
		return x.RoleLevel
	}
	return 0
}

func (x *SetGroupMemberInfoReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetBackgroundUrl() string {
	if x != nil && x.BackgroundUrl != nil {
		return *x.BackgroundUrl
	}
	return ""
}

// 将用户移出群组 存在
// -------------------------------------------
type KickGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID          string   `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	KickedUserIdList []string `protobuf:"bytes,2,rep,name=kickedUserIdList,proto3" json:"kickedUserIdList,omitempty"` //踢人列表
	UserID           string   `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`                     //操作人
}

func (x *KickGroupMemberReq) Reset() {
	*x = KickGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickGroupMemberReq) ProtoMessage() {}

func (x *KickGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickGroupMemberReq.ProtoReflect.Descriptor instead.
func (*KickGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{11}
}

func (x *KickGroupMemberReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *KickGroupMemberReq) GetKickedUserIdList() []string {
	if x != nil {
		return x.KickedUserIdList
	}
	return nil
}

func (x *KickGroupMemberReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 添加群管理 存在
// -------------------------------------------
type AddGroupAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	PUserID string `protobuf:"bytes,3,opt,name=pUserID,proto3" json:"pUserID,omitempty"` //操作人
}

func (x *AddGroupAdminReq) Reset() {
	*x = AddGroupAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupAdminReq) ProtoMessage() {}

func (x *AddGroupAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupAdminReq.ProtoReflect.Descriptor instead.
func (*AddGroupAdminReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{12}
}

func (x *AddGroupAdminReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *AddGroupAdminReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddGroupAdminReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

// 转让群主 存在
// -------------------------------------------
type TransferGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID        string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	NewOwnerUserID string `protobuf:"bytes,2,opt,name=newOwnerUserID,proto3" json:"newOwnerUserID,omitempty"` //新的群主
	UserID         string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`                 //操作人（原群主）
}

func (x *TransferGroupReq) Reset() {
	*x = TransferGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupReq) ProtoMessage() {}

func (x *TransferGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupReq.ProtoReflect.Descriptor instead.
func (*TransferGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{13}
}

func (x *TransferGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *TransferGroupReq) GetNewOwnerUserID() string {
	if x != nil {
		return x.NewOwnerUserID
	}
	return ""
}

func (x *TransferGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 邀请用户进群 存在
// -------------------------------------------
type InviteUserToGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID           string   `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	InvitedUserIdList []string `protobuf:"bytes,2,rep,name=invitedUserIdList,proto3" json:"invitedUserIdList,omitempty"` //邀请用户列表
	Reason            string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                       //邀请原因
	UserID            string   `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`                       //邀请人
}

func (x *InviteUserToGroupReq) Reset() {
	*x = InviteUserToGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserToGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserToGroupReq) ProtoMessage() {}

func (x *InviteUserToGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserToGroupReq.ProtoReflect.Descriptor instead.
func (*InviteUserToGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{14}
}

func (x *InviteUserToGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *InviteUserToGroupReq) GetInvitedUserIdList() []string {
	if x != nil {
		return x.InvitedUserIdList
	}
	return nil
}

func (x *InviteUserToGroupReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *InviteUserToGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 处理加群请求 存在
// -------------------------------------------
type ApplicationResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID   string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	GroupID      string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ServerID     string `protobuf:"bytes,3,opt,name=serverID,proto3" json:"serverID,omitempty"`          //服务器id
	HandleResult int32  `protobuf:"varint,4,opt,name=handleResult,proto3" json:"handleResult,omitempty"` //处理方法
	HandledMsg   string `protobuf:"bytes,5,opt,name=handledMsg,proto3" json:"handledMsg,omitempty"`      //处理备注
	UserID       string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	Platform     string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *ApplicationResponseReq) Reset() {
	*x = ApplicationResponseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationResponseReq) ProtoMessage() {}

func (x *ApplicationResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationResponseReq.ProtoReflect.Descriptor instead.
func (*ApplicationResponseReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{15}
}

func (x *ApplicationResponseReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *ApplicationResponseReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *ApplicationResponseReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *ApplicationResponseReq) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

func (x *ApplicationResponseReq) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

func (x *ApplicationResponseReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ApplicationResponseReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// 加入群聊 存在
// -------------------------------------------
type JoinGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	GroupID  string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Remark   string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	UserID   string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	SourceID int32  `protobuf:"varint,5,opt,name=SourceID,proto3" json:"SourceID,omitempty"`
	Platform string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *JoinGroupReq) Reset() {
	*x = JoinGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupReq) ProtoMessage() {}

func (x *JoinGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupReq.ProtoReflect.Descriptor instead.
func (*JoinGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{16}
}

func (x *JoinGroupReq) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *JoinGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *JoinGroupReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *JoinGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *JoinGroupReq) GetSourceID() int32 {
	if x != nil {
		return x.SourceID
	}
	return 0
}

func (x *JoinGroupReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// 批量添加群管理 存在
// -------------------------------------------
type BatchAddGroupAdmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string   `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=userIds,proto3" json:"userIds,omitempty"` //添加的用户列表
	UserID  string   `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *BatchAddGroupAdmReq) Reset() {
	*x = BatchAddGroupAdmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddGroupAdmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddGroupAdmReq) ProtoMessage() {}

func (x *BatchAddGroupAdmReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddGroupAdmReq.ProtoReflect.Descriptor instead.
func (*BatchAddGroupAdmReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{17}
}

func (x *BatchAddGroupAdmReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *BatchAddGroupAdmReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BatchAddGroupAdmReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 获取群信息 存在
// -------------------------------------------
type GetGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID    []string `protobuf:"bytes,1,rep,name=groupID,proto3" json:"groupID,omitempty"`
	ShowDetail bool     `protobuf:"varint,2,opt,name=showDetail,proto3" json:"showDetail,omitempty"` //是否显示详细信息
}

func (x *GetGroupInfoReq) Reset() {
	*x = GetGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReq) ProtoMessage() {}

func (x *GetGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{18}
}

func (x *GetGroupInfoReq) GetGroupID() []string {
	if x != nil {
		return x.GroupID
	}
	return nil
}

func (x *GetGroupInfoReq) GetShowDetail() bool {
	if x != nil {
		return x.ShowDetail
	}
	return false
}

type GetGroupInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*v2.GroupInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetGroupInfoReply) Reset() {
	*x = GetGroupInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReply) ProtoMessage() {}

func (x *GetGroupInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReply.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{19}
}

func (x *GetGroupInfoReply) GetList() []*v2.GroupInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取未处理的加群请求 存在
// -------------------------------------------
type GetUntreatedGroupApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum  int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID  string `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GetUntreatedGroupApplicationListReq) Reset() {
	*x = GetUntreatedGroupApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUntreatedGroupApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUntreatedGroupApplicationListReq) ProtoMessage() {}

func (x *GetUntreatedGroupApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUntreatedGroupApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetUntreatedGroupApplicationListReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{20}
}

func (x *GetUntreatedGroupApplicationListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetUntreatedGroupApplicationListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetUntreatedGroupApplicationListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUntreatedGroupApplicationListReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type GetUntreatedGroupApplicationListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.GroupRequestInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUntreatedGroupApplicationListReply) Reset() {
	*x = GetUntreatedGroupApplicationListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUntreatedGroupApplicationListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUntreatedGroupApplicationListReply) ProtoMessage() {}

func (x *GetUntreatedGroupApplicationListReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUntreatedGroupApplicationListReply.ProtoReflect.Descriptor instead.
func (*GetUntreatedGroupApplicationListReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{21}
}

func (x *GetUntreatedGroupApplicationListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUntreatedGroupApplicationListReply) GetList() []*v2.GroupRequestInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// //获取用户自己的主动加群申请 存在
// -------------------------------------------
type GetUserJoinGroupApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum  int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetUserJoinGroupApplicationListReq) Reset() {
	*x = GetUserJoinGroupApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserJoinGroupApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserJoinGroupApplicationListReq) ProtoMessage() {}

func (x *GetUserJoinGroupApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserJoinGroupApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetUserJoinGroupApplicationListReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserJoinGroupApplicationListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetUserJoinGroupApplicationListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetUserJoinGroupApplicationListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 以管理员或群主身份）获取群的加群申请 存在
// -------------------------------------------
type GetGroupApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum  int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID  string `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GetGroupApplicationListReq) Reset() {
	*x = GetGroupApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupApplicationListReq) ProtoMessage() {}

func (x *GetGroupApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetGroupApplicationListReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{23}
}

func (x *GetGroupApplicationListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGroupApplicationListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetGroupApplicationListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetGroupApplicationListReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type GetRecvGroupApplicationListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.GroupRequestInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetRecvGroupApplicationListReply) Reset() {
	*x = GetRecvGroupApplicationListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecvGroupApplicationListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecvGroupApplicationListReply) ProtoMessage() {}

func (x *GetRecvGroupApplicationListReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecvGroupApplicationListReply.ProtoReflect.Descriptor instead.
func (*GetRecvGroupApplicationListReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{24}
}

func (x *GetRecvGroupApplicationListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRecvGroupApplicationListReply) GetList() []*v2.GroupRequestInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 根据code获取群聊 存在
// -------------------------------------------
type GetGroupByCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetGroupByCodeReq) Reset() {
	*x = GetGroupByCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByCodeReq) ProtoMessage() {}

func (x *GetGroupByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByCodeReq.ProtoReflect.Descriptor instead.
func (*GetGroupByCodeReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{25}
}

func (x *GetGroupByCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetGroupByCodeReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetGroupByCodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *v2.GroupInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetGroupByCodeReply) Reset() {
	*x = GetGroupByCodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupByCodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByCodeReply) ProtoMessage() {}

func (x *GetGroupByCodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByCodeReply.ProtoReflect.Descriptor instead.
func (*GetGroupByCodeReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{26}
}

func (x *GetGroupByCodeReply) GetData() *v2.GroupInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 是否群成员 存在
// -------------------------------------------
type IsGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *IsGroupMemberReq) Reset() {
	*x = IsGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsGroupMemberReq) ProtoMessage() {}

func (x *IsGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsGroupMemberReq.ProtoReflect.Descriptor instead.
func (*IsGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{27}
}

func (x *IsGroupMemberReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IsGroupMemberReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type IsGroupMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGroupMember bool `protobuf:"varint,1,opt,name=isGroupMember,proto3" json:"isGroupMember,omitempty"`
}

func (x *IsGroupMemberReply) Reset() {
	*x = IsGroupMemberReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsGroupMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsGroupMemberReply) ProtoMessage() {}

func (x *IsGroupMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsGroupMemberReply.ProtoReflect.Descriptor instead.
func (*IsGroupMemberReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{28}
}

func (x *IsGroupMemberReply) GetIsGroupMember() bool {
	if x != nil {
		return x.IsGroupMember
	}
	return false
}

// 退出群聊 存在
// -------------------------------------------
type QuitGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *QuitGroupReq) Reset() {
	*x = QuitGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitGroupReq) ProtoMessage() {}

func (x *QuitGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitGroupReq.ProtoReflect.Descriptor instead.
func (*QuitGroupReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{29}
}

func (x *QuitGroupReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *QuitGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetJoinedGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetJoinedGroupInfoReq) Reset() {
	*x = GetJoinedGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedGroupInfoReq) ProtoMessage() {}

func (x *GetJoinedGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetJoinedGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{30}
}

func (x *GetJoinedGroupInfoReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GetJoinedGroupInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 取消群管理 存在
// -------------------------------------------
type CancelGroupManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	PUserID string `protobuf:"bytes,2,opt,name=pUserID,proto3" json:"pUserID,omitempty"` //操作人
	UserID  string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CancelGroupManagerReq) Reset() {
	*x = CancelGroupManagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelGroupManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelGroupManagerReq) ProtoMessage() {}

func (x *CancelGroupManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelGroupManagerReq.ProtoReflect.Descriptor instead.
func (*CancelGroupManagerReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{31}
}

func (x *CancelGroupManagerReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CancelGroupManagerReq) GetPUserID() string {
	if x != nil {
		return x.PUserID
	}
	return ""
}

func (x *CancelGroupManagerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 批量取消群管理 存在
// -------------------------------------------
type BatchCancelGroupManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string   `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=userIds,proto3" json:"userIds,omitempty"` //添加的用户列表
	UserID  string   `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *BatchCancelGroupManagerReq) Reset() {
	*x = BatchCancelGroupManagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCancelGroupManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelGroupManagerReq) ProtoMessage() {}

func (x *BatchCancelGroupManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelGroupManagerReq.ProtoReflect.Descriptor instead.
func (*BatchCancelGroupManagerReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{32}
}

func (x *BatchCancelGroupManagerReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *BatchCancelGroupManagerReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BatchCancelGroupManagerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 为sdk设计获取完整的信息忽略解散和删除 存在
// -------------------------------------------
type GetFullGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIds []string `protobuf:"bytes,1,rep,name=groupIds,proto3" json:"groupIds,omitempty"`
}

func (x *GetFullGroupInfoReq) Reset() {
	*x = GetFullGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullGroupInfoReq) ProtoMessage() {}

func (x *GetFullGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetFullGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{33}
}

func (x *GetFullGroupInfoReq) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type GetFullGroupInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*v2.BaseGroupInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 群信息
}

func (x *GetFullGroupInfoReply) Reset() {
	*x = GetFullGroupInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullGroupInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullGroupInfoReply) ProtoMessage() {}

func (x *GetFullGroupInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullGroupInfoReply.ProtoReflect.Descriptor instead.
func (*GetFullGroupInfoReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{34}
}

func (x *GetFullGroupInfoReply) GetList() []*v2.BaseGroupInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 根据id获取用户数据 存在
// -------------------------------------------
type MemberByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string   `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *MemberByIdsReq) Reset() {
	*x = MemberByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberByIdsReq) ProtoMessage() {}

func (x *MemberByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberByIdsReq.ProtoReflect.Descriptor instead.
func (*MemberByIdsReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{35}
}

func (x *MemberByIdsReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *MemberByIdsReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type MemberByIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*v2.MemberInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemberByIdsReply) Reset() {
	*x = MemberByIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberByIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberByIdsReply) ProtoMessage() {}

func (x *MemberByIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberByIdsReply.ProtoReflect.Descriptor instead.
func (*MemberByIdsReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{36}
}

func (x *MemberByIdsReply) GetList() []*v2.MemberInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取用户加入的群 存在
// -------------------------------------------
type GetJoinedGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum  int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetJoinedGroupListReq) Reset() {
	*x = GetJoinedGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedGroupListReq) ProtoMessage() {}

func (x *GetJoinedGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedGroupListReq.ProtoReflect.Descriptor instead.
func (*GetJoinedGroupListReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{37}
}

func (x *GetJoinedGroupListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetJoinedGroupListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetJoinedGroupListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetJoinedGroupListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.BaseGroupInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetJoinedGroupListReply) Reset() {
	*x = GetJoinedGroupListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJoinedGroupListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedGroupListReply) ProtoMessage() {}

func (x *GetJoinedGroupListReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedGroupListReply.ProtoReflect.Descriptor instead.
func (*GetJoinedGroupListReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{38}
}

func (x *GetJoinedGroupListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetJoinedGroupListReply) GetList() []*v2.BaseGroupInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取群成员 存在
// -------------------------------------------
type GetGroupMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID  string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	PageSize int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum  int64  `protobuf:"varint,3,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	Filter   int32  `protobuf:"varint,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetGroupMembersReq) Reset() {
	*x = GetGroupMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMembersReq) ProtoMessage() {}

func (x *GetGroupMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMembersReq.ProtoReflect.Descriptor instead.
func (*GetGroupMembersReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{39}
}

func (x *GetGroupMembersReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GetGroupMembersReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGroupMembersReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetGroupMembersReq) GetFilter() int32 {
	if x != nil {
		return x.Filter
	}
	return 0
}

type GetGroupMembersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.MemberInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetGroupMembersReply) Reset() {
	*x = GetGroupMembersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMembersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMembersReply) ProtoMessage() {}

func (x *GetGroupMembersReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMembersReply.ProtoReflect.Descriptor instead.
func (*GetGroupMembersReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{40}
}

func (x *GetGroupMembersReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGroupMembersReply) GetList() []*v2.MemberInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取群的hash 存在
// -------------------------------------------
type GetGroupAbstractInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *GetGroupAbstractInfoReq) Reset() {
	*x = GetGroupAbstractInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupAbstractInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupAbstractInfoReq) ProtoMessage() {}

func (x *GetGroupAbstractInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupAbstractInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupAbstractInfoReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{41}
}

func (x *GetGroupAbstractInfoReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type GetGroupAbstractInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupAbstractInfos []*v2.GroupAbstractInfo `protobuf:"bytes,1,rep,name=groupAbstractInfos,proto3" json:"groupAbstractInfos,omitempty"`
}

func (x *GetGroupAbstractInfoReply) Reset() {
	*x = GetGroupAbstractInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_group_v2_group_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupAbstractInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupAbstractInfoReply) ProtoMessage() {}

func (x *GetGroupAbstractInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_group_v2_group_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupAbstractInfoReply.ProtoReflect.Descriptor instead.
func (*GetGroupAbstractInfoReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_group_v2_group_proto_rawDescGZIP(), []int{42}
}

func (x *GetGroupAbstractInfoReply) GetGroupAbstractInfos() []*v2.GroupAbstractInfo {
	if x != nil {
		return x.GroupAbstractInfos
	}
	return nil
}

var File_im_cloud_group_v2_group_proto protoreflect.FileDescriptor

var file_im_cloud_group_v2_group_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbb, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x55,
	0x0a, 0x0f, 0x43, 0x72, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x42, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x22, 0x49, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x0c,
	0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x48, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x4d,
	0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x66, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c,
	0x22, 0x72, 0x0a, 0x12, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xac, 0x01, 0x0a,
	0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x61, 0x0a, 0x13, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4b,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x4d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x7e, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x84,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x10, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x12, 0x49, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x63, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x0e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x22, 0x4d, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x22, 0x79, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x5c, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2a, 0x82,
	0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x10, 0x05, 0x32, 0xe6, 0x17, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x45, 0x64,
	0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x58, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x09,
	0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x15,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54,
	0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x0d, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x5a, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5c, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x50, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4b,
	0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x51, 0x75, 0x69,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x58, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x60, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x5a, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0b, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x85,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x94, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x37,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x69, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x78, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x53, 0x0a, 0x15,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x3b, 0x76,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_im_cloud_group_v2_group_proto_rawDescOnce sync.Once
	file_im_cloud_group_v2_group_proto_rawDescData = file_im_cloud_group_v2_group_proto_rawDesc
)

func file_im_cloud_group_v2_group_proto_rawDescGZIP() []byte {
	file_im_cloud_group_v2_group_proto_rawDescOnce.Do(func() {
		file_im_cloud_group_v2_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_im_cloud_group_v2_group_proto_rawDescData)
	})
	return file_im_cloud_group_v2_group_proto_rawDescData
}

var file_im_cloud_group_v2_group_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_im_cloud_group_v2_group_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_im_cloud_group_v2_group_proto_goTypes = []interface{}{
	(GroupSwitchOption)(0),                        // 0: api.im_cloud.group.v2.GroupSwitchOption
	(*CrateGroupReq)(nil),                         // 1: api.im_cloud.group.v2.CrateGroupReq
	(*CrateGroupReply)(nil),                       // 2: api.im_cloud.group.v2.CrateGroupReply
	(*EditGroupProfileReq)(nil),                   // 3: api.im_cloud.group.v2.EditGroupProfileReq
	(*UpdateGroupSwitchReq)(nil),                  // 4: api.im_cloud.group.v2.UpdateGroupSwitchReq
	(*DismissGroupReq)(nil),                       // 5: api.im_cloud.group.v2.DismissGroupReq
	(*DismissGroupNoticeReq)(nil),                 // 6: api.im_cloud.group.v2.DismissGroupNoticeReq
	(*MuteGroupReq)(nil),                          // 7: api.im_cloud.group.v2.MuteGroupReq
	(*CancelMuteGroupReq)(nil),                    // 8: api.im_cloud.group.v2.CancelMuteGroupReq
	(*MuteGroupMemberReq)(nil),                    // 9: api.im_cloud.group.v2.MuteGroupMemberReq
	(*CancelMuteGroupMemberReq)(nil),              // 10: api.im_cloud.group.v2.CancelMuteGroupMemberReq
	(*SetGroupMemberInfoReq)(nil),                 // 11: api.im_cloud.group.v2.SetGroupMemberInfoReq
	(*KickGroupMemberReq)(nil),                    // 12: api.im_cloud.group.v2.KickGroupMemberReq
	(*AddGroupAdminReq)(nil),                      // 13: api.im_cloud.group.v2.AddGroupAdminReq
	(*TransferGroupReq)(nil),                      // 14: api.im_cloud.group.v2.TransferGroupReq
	(*InviteUserToGroupReq)(nil),                  // 15: api.im_cloud.group.v2.InviteUserToGroupReq
	(*ApplicationResponseReq)(nil),                // 16: api.im_cloud.group.v2.ApplicationResponseReq
	(*JoinGroupReq)(nil),                          // 17: api.im_cloud.group.v2.JoinGroupReq
	(*BatchAddGroupAdmReq)(nil),                   // 18: api.im_cloud.group.v2.BatchAddGroupAdmReq
	(*GetGroupInfoReq)(nil),                       // 19: api.im_cloud.group.v2.GetGroupInfoReq
	(*GetGroupInfoReply)(nil),                     // 20: api.im_cloud.group.v2.GetGroupInfoReply
	(*GetUntreatedGroupApplicationListReq)(nil),   // 21: api.im_cloud.group.v2.GetUntreatedGroupApplicationListReq
	(*GetUntreatedGroupApplicationListReply)(nil), // 22: api.im_cloud.group.v2.GetUntreatedGroupApplicationListReply
	(*GetUserJoinGroupApplicationListReq)(nil),    // 23: api.im_cloud.group.v2.GetUserJoinGroupApplicationListReq
	(*GetGroupApplicationListReq)(nil),            // 24: api.im_cloud.group.v2.GetGroupApplicationListReq
	(*GetRecvGroupApplicationListReply)(nil),      // 25: api.im_cloud.group.v2.GetRecvGroupApplicationListReply
	(*GetGroupByCodeReq)(nil),                     // 26: api.im_cloud.group.v2.GetGroupByCodeReq
	(*GetGroupByCodeReply)(nil),                   // 27: api.im_cloud.group.v2.GetGroupByCodeReply
	(*IsGroupMemberReq)(nil),                      // 28: api.im_cloud.group.v2.IsGroupMemberReq
	(*IsGroupMemberReply)(nil),                    // 29: api.im_cloud.group.v2.IsGroupMemberReply
	(*QuitGroupReq)(nil),                          // 30: api.im_cloud.group.v2.QuitGroupReq
	(*GetJoinedGroupInfoReq)(nil),                 // 31: api.im_cloud.group.v2.GetJoinedGroupInfoReq
	(*CancelGroupManagerReq)(nil),                 // 32: api.im_cloud.group.v2.CancelGroupManagerReq
	(*BatchCancelGroupManagerReq)(nil),            // 33: api.im_cloud.group.v2.BatchCancelGroupManagerReq
	(*GetFullGroupInfoReq)(nil),                   // 34: api.im_cloud.group.v2.GetFullGroupInfoReq
	(*GetFullGroupInfoReply)(nil),                 // 35: api.im_cloud.group.v2.GetFullGroupInfoReply
	(*MemberByIdsReq)(nil),                        // 36: api.im_cloud.group.v2.MemberByIdsReq
	(*MemberByIdsReply)(nil),                      // 37: api.im_cloud.group.v2.MemberByIdsReply
	(*GetJoinedGroupListReq)(nil),                 // 38: api.im_cloud.group.v2.GetJoinedGroupListReq
	(*GetJoinedGroupListReply)(nil),               // 39: api.im_cloud.group.v2.GetJoinedGroupListReply
	(*GetGroupMembersReq)(nil),                    // 40: api.im_cloud.group.v2.GetGroupMembersReq
	(*GetGroupMembersReply)(nil),                  // 41: api.im_cloud.group.v2.GetGroupMembersReply
	(*GetGroupAbstractInfoReq)(nil),               // 42: api.im_cloud.group.v2.GetGroupAbstractInfoReq
	(*GetGroupAbstractInfoReply)(nil),             // 43: api.im_cloud.group.v2.GetGroupAbstractInfoReply
	(*v2.GroupInfo)(nil),                          // 44: api.common.model.group.v2.GroupInfo
	(*v2.GroupRequestInfo)(nil),                   // 45: api.common.model.group.v2.GroupRequestInfo
	(*v2.BaseGroupInfo)(nil),                      // 46: api.common.model.group.v2.BaseGroupInfo
	(*v2.MemberInfo)(nil),                         // 47: api.common.model.group.v2.MemberInfo
	(*v2.GroupAbstractInfo)(nil),                  // 48: api.common.model.group.v2.GroupAbstractInfo
	(*emptypb.Empty)(nil),                         // 49: google.protobuf.Empty
}
var file_im_cloud_group_v2_group_proto_depIdxs = []int32{
	44, // 0: api.im_cloud.group.v2.CrateGroupReply.groupInfo:type_name -> api.common.model.group.v2.GroupInfo
	0,  // 1: api.im_cloud.group.v2.UpdateGroupSwitchReq.field:type_name -> api.im_cloud.group.v2.GroupSwitchOption
	44, // 2: api.im_cloud.group.v2.GetGroupInfoReply.list:type_name -> api.common.model.group.v2.GroupInfo
	45, // 3: api.im_cloud.group.v2.GetUntreatedGroupApplicationListReply.list:type_name -> api.common.model.group.v2.GroupRequestInfo
	45, // 4: api.im_cloud.group.v2.GetRecvGroupApplicationListReply.list:type_name -> api.common.model.group.v2.GroupRequestInfo
	44, // 5: api.im_cloud.group.v2.GetGroupByCodeReply.data:type_name -> api.common.model.group.v2.GroupInfo
	46, // 6: api.im_cloud.group.v2.GetFullGroupInfoReply.list:type_name -> api.common.model.group.v2.BaseGroupInfo
	47, // 7: api.im_cloud.group.v2.MemberByIdsReply.list:type_name -> api.common.model.group.v2.MemberInfo
	46, // 8: api.im_cloud.group.v2.GetJoinedGroupListReply.list:type_name -> api.common.model.group.v2.BaseGroupInfo
	47, // 9: api.im_cloud.group.v2.GetGroupMembersReply.list:type_name -> api.common.model.group.v2.MemberInfo
	48, // 10: api.im_cloud.group.v2.GetGroupAbstractInfoReply.groupAbstractInfos:type_name -> api.common.model.group.v2.GroupAbstractInfo
	1,  // 11: api.im_cloud.group.v2.Group.CreateGroup:input_type -> api.im_cloud.group.v2.CrateGroupReq
	3,  // 12: api.im_cloud.group.v2.Group.EditGroupProfile:input_type -> api.im_cloud.group.v2.EditGroupProfileReq
	4,  // 13: api.im_cloud.group.v2.Group.UpdateGroupSwitch:input_type -> api.im_cloud.group.v2.UpdateGroupSwitchReq
	7,  // 14: api.im_cloud.group.v2.Group.MuteGroup:input_type -> api.im_cloud.group.v2.MuteGroupReq
	8,  // 15: api.im_cloud.group.v2.Group.CancelMuteGroup:input_type -> api.im_cloud.group.v2.CancelMuteGroupReq
	10, // 16: api.im_cloud.group.v2.Group.CancelMuteGroupMember:input_type -> api.im_cloud.group.v2.CancelMuteGroupMemberReq
	9,  // 17: api.im_cloud.group.v2.Group.MuteGroupMember:input_type -> api.im_cloud.group.v2.MuteGroupMemberReq
	28, // 18: api.im_cloud.group.v2.Group.IsGroupMember:input_type -> api.im_cloud.group.v2.IsGroupMemberReq
	26, // 19: api.im_cloud.group.v2.Group.GetGroupByCode:input_type -> api.im_cloud.group.v2.GetGroupByCodeReq
	5,  // 20: api.im_cloud.group.v2.Group.DismissGroup:input_type -> api.im_cloud.group.v2.DismissGroupReq
	6,  // 21: api.im_cloud.group.v2.Group.DismissGroupNotice:input_type -> api.im_cloud.group.v2.DismissGroupNoticeReq
	16, // 22: api.im_cloud.group.v2.Group.ApplicationResponse:input_type -> api.im_cloud.group.v2.ApplicationResponseReq
	17, // 23: api.im_cloud.group.v2.Group.JoinGroup:input_type -> api.im_cloud.group.v2.JoinGroupReq
	15, // 24: api.im_cloud.group.v2.Group.InviteUserToGroup:input_type -> api.im_cloud.group.v2.InviteUserToGroupReq
	13, // 25: api.im_cloud.group.v2.Group.AddGroupAdmin:input_type -> api.im_cloud.group.v2.AddGroupAdminReq
	14, // 26: api.im_cloud.group.v2.Group.TransferGroup:input_type -> api.im_cloud.group.v2.TransferGroupReq
	12, // 27: api.im_cloud.group.v2.Group.KickGroupMember:input_type -> api.im_cloud.group.v2.KickGroupMemberReq
	30, // 28: api.im_cloud.group.v2.Group.QuitGroup:input_type -> api.im_cloud.group.v2.QuitGroupReq
	32, // 29: api.im_cloud.group.v2.Group.CancelGroupManager:input_type -> api.im_cloud.group.v2.CancelGroupManagerReq
	18, // 30: api.im_cloud.group.v2.Group.BatchAddGroupAdmin:input_type -> api.im_cloud.group.v2.BatchAddGroupAdmReq
	33, // 31: api.im_cloud.group.v2.Group.BatchCancelGroupManager:input_type -> api.im_cloud.group.v2.BatchCancelGroupManagerReq
	19, // 32: api.im_cloud.group.v2.Group.GetGroupInfo:input_type -> api.im_cloud.group.v2.GetGroupInfoReq
	11, // 33: api.im_cloud.group.v2.Group.SetGroupMemberInfo:input_type -> api.im_cloud.group.v2.SetGroupMemberInfoReq
	34, // 34: api.im_cloud.group.v2.Group.GetFullGroupInfo:input_type -> api.im_cloud.group.v2.GetFullGroupInfoReq
	36, // 35: api.im_cloud.group.v2.Group.MemberByIds:input_type -> api.im_cloud.group.v2.MemberByIdsReq
	38, // 36: api.im_cloud.group.v2.Group.GetJoinedGroupList:input_type -> api.im_cloud.group.v2.GetJoinedGroupListReq
	24, // 37: api.im_cloud.group.v2.Group.GetGroupApplicationList:input_type -> api.im_cloud.group.v2.GetGroupApplicationListReq
	21, // 38: api.im_cloud.group.v2.Group.GetUntreatedGroupApplicationList:input_type -> api.im_cloud.group.v2.GetUntreatedGroupApplicationListReq
	23, // 39: api.im_cloud.group.v2.Group.GetUserReqGroupApplicationList:input_type -> api.im_cloud.group.v2.GetUserJoinGroupApplicationListReq
	40, // 40: api.im_cloud.group.v2.Group.GetGroupMembers:input_type -> api.im_cloud.group.v2.GetGroupMembersReq
	42, // 41: api.im_cloud.group.v2.Group.getGroupAbstractInfo:input_type -> api.im_cloud.group.v2.GetGroupAbstractInfoReq
	2,  // 42: api.im_cloud.group.v2.Group.CreateGroup:output_type -> api.im_cloud.group.v2.CrateGroupReply
	49, // 43: api.im_cloud.group.v2.Group.EditGroupProfile:output_type -> google.protobuf.Empty
	49, // 44: api.im_cloud.group.v2.Group.UpdateGroupSwitch:output_type -> google.protobuf.Empty
	49, // 45: api.im_cloud.group.v2.Group.MuteGroup:output_type -> google.protobuf.Empty
	49, // 46: api.im_cloud.group.v2.Group.CancelMuteGroup:output_type -> google.protobuf.Empty
	49, // 47: api.im_cloud.group.v2.Group.CancelMuteGroupMember:output_type -> google.protobuf.Empty
	49, // 48: api.im_cloud.group.v2.Group.MuteGroupMember:output_type -> google.protobuf.Empty
	29, // 49: api.im_cloud.group.v2.Group.IsGroupMember:output_type -> api.im_cloud.group.v2.IsGroupMemberReply
	27, // 50: api.im_cloud.group.v2.Group.GetGroupByCode:output_type -> api.im_cloud.group.v2.GetGroupByCodeReply
	49, // 51: api.im_cloud.group.v2.Group.DismissGroup:output_type -> google.protobuf.Empty
	49, // 52: api.im_cloud.group.v2.Group.DismissGroupNotice:output_type -> google.protobuf.Empty
	49, // 53: api.im_cloud.group.v2.Group.ApplicationResponse:output_type -> google.protobuf.Empty
	49, // 54: api.im_cloud.group.v2.Group.JoinGroup:output_type -> google.protobuf.Empty
	49, // 55: api.im_cloud.group.v2.Group.InviteUserToGroup:output_type -> google.protobuf.Empty
	49, // 56: api.im_cloud.group.v2.Group.AddGroupAdmin:output_type -> google.protobuf.Empty
	49, // 57: api.im_cloud.group.v2.Group.TransferGroup:output_type -> google.protobuf.Empty
	49, // 58: api.im_cloud.group.v2.Group.KickGroupMember:output_type -> google.protobuf.Empty
	49, // 59: api.im_cloud.group.v2.Group.QuitGroup:output_type -> google.protobuf.Empty
	49, // 60: api.im_cloud.group.v2.Group.CancelGroupManager:output_type -> google.protobuf.Empty
	49, // 61: api.im_cloud.group.v2.Group.BatchAddGroupAdmin:output_type -> google.protobuf.Empty
	49, // 62: api.im_cloud.group.v2.Group.BatchCancelGroupManager:output_type -> google.protobuf.Empty
	20, // 63: api.im_cloud.group.v2.Group.GetGroupInfo:output_type -> api.im_cloud.group.v2.GetGroupInfoReply
	49, // 64: api.im_cloud.group.v2.Group.SetGroupMemberInfo:output_type -> google.protobuf.Empty
	35, // 65: api.im_cloud.group.v2.Group.GetFullGroupInfo:output_type -> api.im_cloud.group.v2.GetFullGroupInfoReply
	37, // 66: api.im_cloud.group.v2.Group.MemberByIds:output_type -> api.im_cloud.group.v2.MemberByIdsReply
	39, // 67: api.im_cloud.group.v2.Group.GetJoinedGroupList:output_type -> api.im_cloud.group.v2.GetJoinedGroupListReply
	25, // 68: api.im_cloud.group.v2.Group.GetGroupApplicationList:output_type -> api.im_cloud.group.v2.GetRecvGroupApplicationListReply
	25, // 69: api.im_cloud.group.v2.Group.GetUntreatedGroupApplicationList:output_type -> api.im_cloud.group.v2.GetRecvGroupApplicationListReply
	25, // 70: api.im_cloud.group.v2.Group.GetUserReqGroupApplicationList:output_type -> api.im_cloud.group.v2.GetRecvGroupApplicationListReply
	41, // 71: api.im_cloud.group.v2.Group.GetGroupMembers:output_type -> api.im_cloud.group.v2.GetGroupMembersReply
	43, // 72: api.im_cloud.group.v2.Group.getGroupAbstractInfo:output_type -> api.im_cloud.group.v2.GetGroupAbstractInfoReply
	42, // [42:73] is the sub-list for method output_type
	11, // [11:42] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_im_cloud_group_v2_group_proto_init() }
func file_im_cloud_group_v2_group_proto_init() {
	if File_im_cloud_group_v2_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_im_cloud_group_v2_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrateGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissGroupNoticeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMuteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMuteGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupMemberInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserToGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationResponseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddGroupAdmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUntreatedGroupApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUntreatedGroupApplicationListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserJoinGroupApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecvGroupApplicationListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupByCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupByCodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsGroupMemberReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelGroupManagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCancelGroupManagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullGroupInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberByIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJoinedGroupListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMembersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupAbstractInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_group_v2_group_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupAbstractInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_im_cloud_group_v2_group_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_im_cloud_group_v2_group_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_im_cloud_group_v2_group_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_im_cloud_group_v2_group_proto_goTypes,
		DependencyIndexes: file_im_cloud_group_v2_group_proto_depIdxs,
		EnumInfos:         file_im_cloud_group_v2_group_proto_enumTypes,
		MessageInfos:      file_im_cloud_group_v2_group_proto_msgTypes,
	}.Build()
	File_im_cloud_group_v2_group_proto = out.File
	file_im_cloud_group_v2_group_proto_rawDesc = nil
	file_im_cloud_group_v2_group_proto_goTypes = nil
	file_im_cloud_group_v2_group_proto_depIdxs = nil
}
