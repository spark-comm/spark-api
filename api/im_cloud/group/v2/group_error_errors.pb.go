// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 获取群信息失败
func IsGetGroupInfoFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_GROUP_INFO_FAIL.String() && e.Code == 510
}

// 获取群信息失败
func ErrorGetGroupInfoFail(format string, args ...interface{}) *errors.Error {
	return errors.New(510, GroupErrorReason_GET_GROUP_INFO_FAIL.String(), fmt.Sprintf(format, args...))
}

// 群成员数量不应超过最大限制
func IsGroupMemberNumTooMany(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GROUP_MEMBER_NUM_TOO_MANY.String() && e.Code == 512
}

// 群成员数量不应超过最大限制
func ErrorGroupMemberNumTooMany(format string, args ...interface{}) *errors.Error {
	return errors.New(512, GroupErrorReason_GROUP_MEMBER_NUM_TOO_MANY.String(), fmt.Sprintf(format, args...))
}

// 创建群聊失败
func IsCreateGroupFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_CREATE_GROUP_FAIL.String() && e.Code == 515
}

// 创建群聊失败
func ErrorCreateGroupFail(format string, args ...interface{}) *errors.Error {
	return errors.New(515, GroupErrorReason_CREATE_GROUP_FAIL.String(), fmt.Sprintf(format, args...))
}

// 禁言群失败
func IsMuteGroupFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_MUTE_GROUP_FAIL.String() && e.Code == 513
}

// 禁言群失败
func ErrorMuteGroupFail(format string, args ...interface{}) *errors.Error {
	return errors.New(513, GroupErrorReason_MUTE_GROUP_FAIL.String(), fmt.Sprintf(format, args...))
}

// 禁言群成员失败
func IsMuteGroupMemberFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_MUTE_GROUP_MEMBER_FAIL.String() && e.Code == 514
}

// 禁言群成员失败
func ErrorMuteGroupMemberFail(format string, args ...interface{}) *errors.Error {
	return errors.New(514, GroupErrorReason_MUTE_GROUP_MEMBER_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取群成员信息失败
func IsGetGroupMemberFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_GROUP_MEMBER_FAIL.String() && e.Code == 511
}

// 获取群成员信息失败
func ErrorGetGroupMemberFail(format string, args ...interface{}) *errors.Error {
	return errors.New(511, GroupErrorReason_GET_GROUP_MEMBER_FAIL.String(), fmt.Sprintf(format, args...))
}

// 群成员数量不应少于2人
func IsGroupMemberNumTooLittle(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GROUP_MEMBER_NUM_TOO_LITTLE.String() && e.Code == 501
}

// 群成员数量不应少于2人
func ErrorGroupMemberNumTooLittle(format string, args ...interface{}) *errors.Error {
	return errors.New(501, GroupErrorReason_GROUP_MEMBER_NUM_TOO_LITTLE.String(), fmt.Sprintf(format, args...))
}

// 取消禁言群失败
func IsCancelMuteGroupFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_CANCEL_MUTE_GROUP_FAIL.String() && e.Code == 506
}

// 取消禁言群失败
func ErrorCancelMuteGroupFail(format string, args ...interface{}) *errors.Error {
	return errors.New(506, GroupErrorReason_CANCEL_MUTE_GROUP_FAIL.String(), fmt.Sprintf(format, args...))
}

// 取消禁言群成员失败
func IsCancelMuteGroupMemberFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_CANCEL_MUTE_GROUP_MEMBER_FAIL.String() && e.Code == 508
}

// 取消禁言群成员失败
func ErrorCancelMuteGroupMemberFail(format string, args ...interface{}) *errors.Error {
	return errors.New(508, GroupErrorReason_CANCEL_MUTE_GROUP_MEMBER_FAIL.String(), fmt.Sprintf(format, args...))
}

// 没有权限操作该信息
func IsNoPermissionOperationGroupInfo(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_NO_PERMISSION_OPERATION_GROUP_INFO.String() && e.Code == 577
}

// 没有权限操作该信息
func ErrorNoPermissionOperationGroupInfo(format string, args ...interface{}) *errors.Error {
	return errors.New(577, GroupErrorReason_NO_PERMISSION_OPERATION_GROUP_INFO.String(), fmt.Sprintf(format, args...))
}

// 解散群失败
func IsDismissGroupFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_DISMISS_GROUP_FAIL.String() && e.Code == 511
}

// 解散群失败
func ErrorDismissGroupFail(format string, args ...interface{}) *errors.Error {
	return errors.New(511, GroupErrorReason_DISMISS_GROUP_FAIL.String(), fmt.Sprintf(format, args...))
}

// 更新群/群成员数据失败
func IsUpdateGroupDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_UPDATE_GROUP_DATA_FAIL.String() && e.Code == 512
}

// 更新群/群成员数据失败
func ErrorUpdateGroupDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(512, GroupErrorReason_UPDATE_GROUP_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 需要实名认证
func IsNeedRealNameAuthentication(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_NEED_REAL_NAME_AUTHENTICATION.String() && e.Code == 515
}

// 需要实名认证
func ErrorNeedRealNameAuthentication(format string, args ...interface{}) *errors.Error {
	return errors.New(515, GroupErrorReason_NEED_REAL_NAME_AUTHENTICATION.String(), fmt.Sprintf(format, args...))
}

// 加入群聊失败
func IsJoinGroupReqFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_JOIN_GROUP_REQ_FAIL.String() && e.Code == 513
}

// 加入群聊失败
func ErrorJoinGroupReqFail(format string, args ...interface{}) *errors.Error {
	return errors.New(513, GroupErrorReason_JOIN_GROUP_REQ_FAIL.String(), fmt.Sprintf(format, args...))
}

// 删除缓存信息失败
func IsDeleteRcCacheFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_DELETE_RC_CACHE_FAIL.String() && e.Code == 588
}

// 删除缓存信息失败
func ErrorDeleteRcCacheFail(format string, args ...interface{}) *errors.Error {
	return errors.New(588, GroupErrorReason_DELETE_RC_CACHE_FAIL.String(), fmt.Sprintf(format, args...))
}

// 设置群成员数量应大于当前人数且不小于3人
func IsSettingGroupMemberMembercountFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_SETTING_GROUP_MEMBER_MEMBERCOUNT_FAIL.String() && e.Code == 514
}

// 设置群成员数量应大于当前人数且不小于3人
func ErrorSettingGroupMemberMembercountFail(format string, args ...interface{}) *errors.Error {
	return errors.New(514, GroupErrorReason_SETTING_GROUP_MEMBER_MEMBERCOUNT_FAIL.String(), fmt.Sprintf(format, args...))
}

// 添加群管理失败
func IsSettingGroupAdminFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_SETTING_GROUP_ADMIN_FAIL.String() && e.Code == 516
}

// 添加群管理失败
func ErrorSettingGroupAdminFail(format string, args ...interface{}) *errors.Error {
	return errors.New(516, GroupErrorReason_SETTING_GROUP_ADMIN_FAIL.String(), fmt.Sprintf(format, args...))
}

// 踢出群成员失败
func IsKickGroupMemberFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_KICK_GROUP_MEMBER_FAIL.String() && e.Code == 525
}

// 踢出群成员失败
func ErrorKickGroupMemberFail(format string, args ...interface{}) *errors.Error {
	return errors.New(525, GroupErrorReason_KICK_GROUP_MEMBER_FAIL.String(), fmt.Sprintf(format, args...))
}

// 推出群聊失败
func IsMemberQuitGroupFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_MEMBER_QUIT_GROUP_FAIL.String() && e.Code == 517
}

// 推出群聊失败
func ErrorMemberQuitGroupFail(format string, args ...interface{}) *errors.Error {
	return errors.New(517, GroupErrorReason_MEMBER_QUIT_GROUP_FAIL.String(), fmt.Sprintf(format, args...))
}

// 请求处理失败
func IsHandleAppliciationRequestFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_HANDLE_APPLICIATION_REQUEST_FAIL.String() && e.Code == 570
}

// 请求处理失败
func ErrorHandleAppliciationRequestFail(format string, args ...interface{}) *errors.Error {
	return errors.New(570, GroupErrorReason_HANDLE_APPLICIATION_REQUEST_FAIL.String(), fmt.Sprintf(format, args...))
}

// 上传文件失败
func IsUploadGroupFeilFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_UPLOAD_GROUP_FEIL_FAIL.String() && e.Code == 518
}

// 上传文件失败
func ErrorUploadGroupFeilFail(format string, args ...interface{}) *errors.Error {
	return errors.New(518, GroupErrorReason_UPLOAD_GROUP_FEIL_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取群文件列表数据失败
func IsGetGroupFeilListFAIl(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_GROUP_FEIL_LIST_FAIl.String() && e.Code == 519
}

// 获取群文件列表数据失败
func ErrorGetGroupFeilListFAIl(format string, args ...interface{}) *errors.Error {
	return errors.New(519, GroupErrorReason_GET_GROUP_FEIL_LIST_FAIl.String(), fmt.Sprintf(format, args...))
}

// 获取请求数据失败
func IsGetRequestDataInfoFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_REQUEST_DATA_INFO_FAIL.String() && e.Code == 517
}

// 获取请求数据失败
func ErrorGetRequestDataInfoFail(format string, args ...interface{}) *errors.Error {
	return errors.New(517, GroupErrorReason_GET_REQUEST_DATA_INFO_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取踢出群成员数据信息失败
func IsGetKickGroupMemberFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_KICK_GROUP_MEMBER_FAIL.String() && e.Code == 525
}

// 获取踢出群成员数据信息失败
func ErrorGetKickGroupMemberFail(format string, args ...interface{}) *errors.Error {
	return errors.New(525, GroupErrorReason_GET_KICK_GROUP_MEMBER_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取加群信息失败
func IsGetJoinGroupRequestFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_JOIN_GROUP_REQUEST_FAIL.String() && e.Code == 513
}

// 获取加群信息失败
func ErrorGetJoinGroupRequestFail(format string, args ...interface{}) *errors.Error {
	return errors.New(513, GroupErrorReason_GET_JOIN_GROUP_REQUEST_FAIL.String(), fmt.Sprintf(format, args...))
}

// 转让群失败
func IsTransferGroupError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_TRANSFER_GROUP_ERROR.String() && e.Code == 507
}

// 转让群失败
func ErrorTransferGroupError(format string, args ...interface{}) *errors.Error {
	return errors.New(507, GroupErrorReason_TRANSFER_GROUP_ERROR.String(), fmt.Sprintf(format, args...))
}

// 申请已经发起，请勿重复请求
func IsTheApplicationHasBeenInitiatedDoNotRepeat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_THE_APPLICATION_HAS_BEEN_INITIATED_DO_NOT_REPEAT.String() && e.Code == 519
}

// 申请已经发起，请勿重复请求
func ErrorTheApplicationHasBeenInitiatedDoNotRepeat(format string, args ...interface{}) *errors.Error {
	return errors.New(519, GroupErrorReason_THE_APPLICATION_HAS_BEEN_INITIATED_DO_NOT_REPEAT.String(), fmt.Sprintf(format, args...))
}

// 获取最大未处理的加群请求失败
func IsGetUntreatedGroupApplicationListFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GET_UNTREATED_GROUP_APPLICATION_LIST_FAIL.String() && e.Code == 520
}

// 获取最大未处理的加群请求失败
func ErrorGetUntreatedGroupApplicationListFail(format string, args ...interface{}) *errors.Error {
	return errors.New(520, GroupErrorReason_GET_UNTREATED_GROUP_APPLICATION_LIST_FAIL.String(), fmt.Sprintf(format, args...))
}

// 该群暂未公开
func IsGroupIsNotOpen(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GROUP_IS_NOT_OPEN.String() && e.Code == 400
}

// 该群暂未公开
func ErrorGroupIsNotOpen(format string, args ...interface{}) *errors.Error {
	return errors.New(400, GroupErrorReason_GROUP_IS_NOT_OPEN.String(), fmt.Sprintf(format, args...))
}

// 该群暂未公开
func IsYouAreAlreadyInTheGroup(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_YOU_ARE_ALREADY_IN_THE_GROUP.String() && e.Code == 400
}

// 该群暂未公开
func ErrorYouAreAlreadyInTheGroup(format string, args ...interface{}) *errors.Error {
	return errors.New(400, GroupErrorReason_YOU_ARE_ALREADY_IN_THE_GROUP.String(), fmt.Sprintf(format, args...))
}

// 群不存在
func IsGroupIsNotFond(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_GROUP_IS_NOT_FOND.String() && e.Code == 400
}

// 群不存在
func ErrorGroupIsNotFond(format string, args ...interface{}) *errors.Error {
	return errors.New(400, GroupErrorReason_GROUP_IS_NOT_FOND.String(), fmt.Sprintf(format, args...))
}

// 群请求已经处理
func IsHandleApplicationHandsFinish(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == GroupErrorReason_HANDLE_APPLICATION_HANDS_FINISH.String() && e.Code == 505
}

// 群请求已经处理
func ErrorHandleApplicationHandsFinish(format string, args ...interface{}) *errors.Error {
	return errors.New(505, GroupErrorReason_HANDLE_APPLICATION_HANDS_FINISH.String(), fmt.Sprintf(format, args...))
}
