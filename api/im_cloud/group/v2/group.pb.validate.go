// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: im_cloud/group/v2/group.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CrateGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CrateGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrateGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CrateGroupReqMultiError, or
// nil if none found.
func (m *CrateGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CrateGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupName

	// no validation rules for Notification

	// no validation rules for Introduction

	// no validation rules for FaceURL

	// no validation rules for CreatorUserID

	// no validation rules for GroupType

	// no validation rules for NeedVerification

	// no validation rules for Platform

	if len(errors) > 0 {
		return CrateGroupReqMultiError(errors)
	}

	return nil
}

// CrateGroupReqMultiError is an error wrapping multiple validation errors
// returned by CrateGroupReq.ValidateAll() if the designated constraints
// aren't met.
type CrateGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrateGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrateGroupReqMultiError) AllErrors() []error { return m }

// CrateGroupReqValidationError is the validation error returned by
// CrateGroupReq.Validate if the designated constraints aren't met.
type CrateGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrateGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrateGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrateGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrateGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrateGroupReqValidationError) ErrorName() string { return "CrateGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e CrateGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrateGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrateGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrateGroupReqValidationError{}

// Validate checks the field values on CrateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CrateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CrateGroupReplyMultiError, or nil if none found.
func (m *CrateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CrateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CrateGroupReplyValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CrateGroupReplyValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CrateGroupReplyValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CrateGroupReplyMultiError(errors)
	}

	return nil
}

// CrateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by CrateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type CrateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrateGroupReplyMultiError) AllErrors() []error { return m }

// CrateGroupReplyValidationError is the validation error returned by
// CrateGroupReply.Validate if the designated constraints aren't met.
type CrateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrateGroupReplyValidationError) ErrorName() string { return "CrateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e CrateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrateGroupReplyValidationError{}

// Validate checks the field values on EditGroupProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditGroupProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditGroupProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditGroupProfileReqMultiError, or nil if none found.
func (m *EditGroupProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditGroupProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for FaceURL

	// no validation rules for GroupName

	// no validation rules for Notification

	// no validation rules for MemberCount

	// no validation rules for UserID

	if m.Introduction != nil {
		// no validation rules for Introduction
	}

	if len(errors) > 0 {
		return EditGroupProfileReqMultiError(errors)
	}

	return nil
}

// EditGroupProfileReqMultiError is an error wrapping multiple validation
// errors returned by EditGroupProfileReq.ValidateAll() if the designated
// constraints aren't met.
type EditGroupProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditGroupProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditGroupProfileReqMultiError) AllErrors() []error { return m }

// EditGroupProfileReqValidationError is the validation error returned by
// EditGroupProfileReq.Validate if the designated constraints aren't met.
type EditGroupProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditGroupProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditGroupProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditGroupProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditGroupProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditGroupProfileReqValidationError) ErrorName() string {
	return "EditGroupProfileReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditGroupProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditGroupProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditGroupProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditGroupProfileReqValidationError{}

// Validate checks the field values on UpdateGroupSwitchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupSwitchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupSwitchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupSwitchReqMultiError, or nil if none found.
func (m *UpdateGroupSwitchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupSwitchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	// no validation rules for Field

	// no validation rules for Updates

	if len(errors) > 0 {
		return UpdateGroupSwitchReqMultiError(errors)
	}

	return nil
}

// UpdateGroupSwitchReqMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupSwitchReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupSwitchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupSwitchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupSwitchReqMultiError) AllErrors() []error { return m }

// UpdateGroupSwitchReqValidationError is the validation error returned by
// UpdateGroupSwitchReq.Validate if the designated constraints aren't met.
type UpdateGroupSwitchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupSwitchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupSwitchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupSwitchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupSwitchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupSwitchReqValidationError) ErrorName() string {
	return "UpdateGroupSwitchReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupSwitchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupSwitchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupSwitchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupSwitchReqValidationError{}

// Validate checks the field values on DismissGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DismissGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DismissGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DismissGroupReqMultiError, or nil if none found.
func (m *DismissGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DismissGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for GroupID

	if len(errors) > 0 {
		return DismissGroupReqMultiError(errors)
	}

	return nil
}

// DismissGroupReqMultiError is an error wrapping multiple validation errors
// returned by DismissGroupReq.ValidateAll() if the designated constraints
// aren't met.
type DismissGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DismissGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DismissGroupReqMultiError) AllErrors() []error { return m }

// DismissGroupReqValidationError is the validation error returned by
// DismissGroupReq.Validate if the designated constraints aren't met.
type DismissGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DismissGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DismissGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DismissGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DismissGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DismissGroupReqValidationError) ErrorName() string { return "DismissGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e DismissGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDismissGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DismissGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DismissGroupReqValidationError{}

// Validate checks the field values on DismissGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DismissGroupNoticeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DismissGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DismissGroupNoticeReqMultiError, or nil if none found.
func (m *DismissGroupNoticeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DismissGroupNoticeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for GroupID

	if len(errors) > 0 {
		return DismissGroupNoticeReqMultiError(errors)
	}

	return nil
}

// DismissGroupNoticeReqMultiError is an error wrapping multiple validation
// errors returned by DismissGroupNoticeReq.ValidateAll() if the designated
// constraints aren't met.
type DismissGroupNoticeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DismissGroupNoticeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DismissGroupNoticeReqMultiError) AllErrors() []error { return m }

// DismissGroupNoticeReqValidationError is the validation error returned by
// DismissGroupNoticeReq.Validate if the designated constraints aren't met.
type DismissGroupNoticeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DismissGroupNoticeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DismissGroupNoticeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DismissGroupNoticeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DismissGroupNoticeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DismissGroupNoticeReqValidationError) ErrorName() string {
	return "DismissGroupNoticeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DismissGroupNoticeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDismissGroupNoticeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DismissGroupNoticeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DismissGroupNoticeReqValidationError{}

// Validate checks the field values on MuteGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MuteGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MuteGroupReqMultiError, or
// nil if none found.
func (m *MuteGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for PUserID

	if len(errors) > 0 {
		return MuteGroupReqMultiError(errors)
	}

	return nil
}

// MuteGroupReqMultiError is an error wrapping multiple validation errors
// returned by MuteGroupReq.ValidateAll() if the designated constraints aren't met.
type MuteGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteGroupReqMultiError) AllErrors() []error { return m }

// MuteGroupReqValidationError is the validation error returned by
// MuteGroupReq.Validate if the designated constraints aren't met.
type MuteGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGroupReqValidationError) ErrorName() string { return "MuteGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e MuteGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGroupReqValidationError{}

// Validate checks the field values on CancelMuteGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMuteGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMuteGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMuteGroupReqMultiError, or nil if none found.
func (m *CancelMuteGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMuteGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for PUserID

	if len(errors) > 0 {
		return CancelMuteGroupReqMultiError(errors)
	}

	return nil
}

// CancelMuteGroupReqMultiError is an error wrapping multiple validation errors
// returned by CancelMuteGroupReq.ValidateAll() if the designated constraints
// aren't met.
type CancelMuteGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMuteGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMuteGroupReqMultiError) AllErrors() []error { return m }

// CancelMuteGroupReqValidationError is the validation error returned by
// CancelMuteGroupReq.Validate if the designated constraints aren't met.
type CancelMuteGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMuteGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMuteGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMuteGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMuteGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMuteGroupReqValidationError) ErrorName() string {
	return "CancelMuteGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMuteGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMuteGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMuteGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMuteGroupReqValidationError{}

// Validate checks the field values on MuteGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteGroupMemberReqMultiError, or nil if none found.
func (m *MuteGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for MutedSeconds

	// no validation rules for UserID

	// no validation rules for PUserID

	if len(errors) > 0 {
		return MuteGroupMemberReqMultiError(errors)
	}

	return nil
}

// MuteGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by MuteGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type MuteGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteGroupMemberReqMultiError) AllErrors() []error { return m }

// MuteGroupMemberReqValidationError is the validation error returned by
// MuteGroupMemberReq.Validate if the designated constraints aren't met.
type MuteGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGroupMemberReqValidationError) ErrorName() string {
	return "MuteGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e MuteGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGroupMemberReqValidationError{}

// Validate checks the field values on CancelMuteGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMuteGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMuteGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMuteGroupMemberReqMultiError, or nil if none found.
func (m *CancelMuteGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMuteGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	// no validation rules for PUserID

	if len(errors) > 0 {
		return CancelMuteGroupMemberReqMultiError(errors)
	}

	return nil
}

// CancelMuteGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by CancelMuteGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type CancelMuteGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMuteGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMuteGroupMemberReqMultiError) AllErrors() []error { return m }

// CancelMuteGroupMemberReqValidationError is the validation error returned by
// CancelMuteGroupMemberReq.Validate if the designated constraints aren't met.
type CancelMuteGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMuteGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMuteGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMuteGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMuteGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMuteGroupMemberReqValidationError) ErrorName() string {
	return "CancelMuteGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMuteGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMuteGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMuteGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMuteGroupMemberReqValidationError{}

// Validate checks the field values on SetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupMemberInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupMemberInfoReqMultiError, or nil if none found.
func (m *SetGroupMemberInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupMemberInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for RoleLevel

	// no validation rules for Ex

	// no validation rules for PUserID

	if m.BackgroundUrl != nil {
		// no validation rules for BackgroundUrl
	}

	if len(errors) > 0 {
		return SetGroupMemberInfoReqMultiError(errors)
	}

	return nil
}

// SetGroupMemberInfoReqMultiError is an error wrapping multiple validation
// errors returned by SetGroupMemberInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SetGroupMemberInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupMemberInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupMemberInfoReqMultiError) AllErrors() []error { return m }

// SetGroupMemberInfoReqValidationError is the validation error returned by
// SetGroupMemberInfoReq.Validate if the designated constraints aren't met.
type SetGroupMemberInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupMemberInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupMemberInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupMemberInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupMemberInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupMemberInfoReqValidationError) ErrorName() string {
	return "SetGroupMemberInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupMemberInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupMemberInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupMemberInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupMemberInfoReqValidationError{}

// Validate checks the field values on KickGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickGroupMemberReqMultiError, or nil if none found.
func (m *KickGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *KickGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return KickGroupMemberReqMultiError(errors)
	}

	return nil
}

// KickGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by KickGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type KickGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickGroupMemberReqMultiError) AllErrors() []error { return m }

// KickGroupMemberReqValidationError is the validation error returned by
// KickGroupMemberReq.Validate if the designated constraints aren't met.
type KickGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickGroupMemberReqValidationError) ErrorName() string {
	return "KickGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e KickGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickGroupMemberReqValidationError{}

// Validate checks the field values on AddGroupAdminReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddGroupAdminReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGroupAdminReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGroupAdminReqMultiError, or nil if none found.
func (m *AddGroupAdminReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGroupAdminReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	// no validation rules for PUserID

	if len(errors) > 0 {
		return AddGroupAdminReqMultiError(errors)
	}

	return nil
}

// AddGroupAdminReqMultiError is an error wrapping multiple validation errors
// returned by AddGroupAdminReq.ValidateAll() if the designated constraints
// aren't met.
type AddGroupAdminReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGroupAdminReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGroupAdminReqMultiError) AllErrors() []error { return m }

// AddGroupAdminReqValidationError is the validation error returned by
// AddGroupAdminReq.Validate if the designated constraints aren't met.
type AddGroupAdminReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGroupAdminReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGroupAdminReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGroupAdminReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGroupAdminReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGroupAdminReqValidationError) ErrorName() string { return "AddGroupAdminReqValidationError" }

// Error satisfies the builtin error interface
func (e AddGroupAdminReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGroupAdminReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGroupAdminReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGroupAdminReqValidationError{}

// Validate checks the field values on TransferGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransferGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferGroupReqMultiError, or nil if none found.
func (m *TransferGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for NewOwnerUserID

	// no validation rules for UserID

	if len(errors) > 0 {
		return TransferGroupReqMultiError(errors)
	}

	return nil
}

// TransferGroupReqMultiError is an error wrapping multiple validation errors
// returned by TransferGroupReq.ValidateAll() if the designated constraints
// aren't met.
type TransferGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferGroupReqMultiError) AllErrors() []error { return m }

// TransferGroupReqValidationError is the validation error returned by
// TransferGroupReq.Validate if the designated constraints aren't met.
type TransferGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferGroupReqValidationError) ErrorName() string { return "TransferGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e TransferGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferGroupReqValidationError{}

// Validate checks the field values on InviteUserToGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteUserToGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserToGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUserToGroupReqMultiError, or nil if none found.
func (m *InviteUserToGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserToGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for Reason

	// no validation rules for UserID

	if len(errors) > 0 {
		return InviteUserToGroupReqMultiError(errors)
	}

	return nil
}

// InviteUserToGroupReqMultiError is an error wrapping multiple validation
// errors returned by InviteUserToGroupReq.ValidateAll() if the designated
// constraints aren't met.
type InviteUserToGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserToGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserToGroupReqMultiError) AllErrors() []error { return m }

// InviteUserToGroupReqValidationError is the validation error returned by
// InviteUserToGroupReq.Validate if the designated constraints aren't met.
type InviteUserToGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserToGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserToGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserToGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserToGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserToGroupReqValidationError) ErrorName() string {
	return "InviteUserToGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserToGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserToGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserToGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserToGroupReqValidationError{}

// Validate checks the field values on ApplicationResponseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationResponseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationResponseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationResponseReqMultiError, or nil if none found.
func (m *ApplicationResponseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationResponseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for GroupID

	// no validation rules for ServerID

	// no validation rules for HandleResult

	// no validation rules for HandledMsg

	// no validation rules for UserID

	// no validation rules for Platform

	if len(errors) > 0 {
		return ApplicationResponseReqMultiError(errors)
	}

	return nil
}

// ApplicationResponseReqMultiError is an error wrapping multiple validation
// errors returned by ApplicationResponseReq.ValidateAll() if the designated
// constraints aren't met.
type ApplicationResponseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationResponseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationResponseReqMultiError) AllErrors() []error { return m }

// ApplicationResponseReqValidationError is the validation error returned by
// ApplicationResponseReq.Validate if the designated constraints aren't met.
type ApplicationResponseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationResponseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationResponseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationResponseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationResponseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationResponseReqValidationError) ErrorName() string {
	return "ApplicationResponseReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationResponseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationResponseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationResponseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationResponseReqValidationError{}

// Validate checks the field values on JoinGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinGroupReqMultiError, or
// nil if none found.
func (m *JoinGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerID

	// no validation rules for GroupID

	// no validation rules for Remark

	// no validation rules for UserID

	// no validation rules for SourceID

	// no validation rules for Platform

	if len(errors) > 0 {
		return JoinGroupReqMultiError(errors)
	}

	return nil
}

// JoinGroupReqMultiError is an error wrapping multiple validation errors
// returned by JoinGroupReq.ValidateAll() if the designated constraints aren't met.
type JoinGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGroupReqMultiError) AllErrors() []error { return m }

// JoinGroupReqValidationError is the validation error returned by
// JoinGroupReq.Validate if the designated constraints aren't met.
type JoinGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGroupReqValidationError) ErrorName() string { return "JoinGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e JoinGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGroupReqValidationError{}

// Validate checks the field values on BatchAddGroupAdmReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchAddGroupAdmReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchAddGroupAdmReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchAddGroupAdmReqMultiError, or nil if none found.
func (m *BatchAddGroupAdmReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchAddGroupAdmReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return BatchAddGroupAdmReqMultiError(errors)
	}

	return nil
}

// BatchAddGroupAdmReqMultiError is an error wrapping multiple validation
// errors returned by BatchAddGroupAdmReq.ValidateAll() if the designated
// constraints aren't met.
type BatchAddGroupAdmReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchAddGroupAdmReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchAddGroupAdmReqMultiError) AllErrors() []error { return m }

// BatchAddGroupAdmReqValidationError is the validation error returned by
// BatchAddGroupAdmReq.Validate if the designated constraints aren't met.
type BatchAddGroupAdmReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchAddGroupAdmReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchAddGroupAdmReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchAddGroupAdmReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchAddGroupAdmReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchAddGroupAdmReqValidationError) ErrorName() string {
	return "BatchAddGroupAdmReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchAddGroupAdmReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchAddGroupAdmReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchAddGroupAdmReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchAddGroupAdmReqValidationError{}

// Validate checks the field values on GetGroupInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupInfoReqMultiError, or nil if none found.
func (m *GetGroupInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShowDetail

	if len(errors) > 0 {
		return GetGroupInfoReqMultiError(errors)
	}

	return nil
}

// GetGroupInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetGroupInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupInfoReqMultiError) AllErrors() []error { return m }

// GetGroupInfoReqValidationError is the validation error returned by
// GetGroupInfoReq.Validate if the designated constraints aren't met.
type GetGroupInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupInfoReqValidationError) ErrorName() string { return "GetGroupInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupInfoReqValidationError{}

// Validate checks the field values on GetGroupInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupInfoReplyMultiError, or nil if none found.
func (m *GetGroupInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupInfoReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupInfoReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupInfoReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupInfoReplyMultiError(errors)
	}

	return nil
}

// GetGroupInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetGroupInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetGroupInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupInfoReplyMultiError) AllErrors() []error { return m }

// GetGroupInfoReplyValidationError is the validation error returned by
// GetGroupInfoReply.Validate if the designated constraints aren't met.
type GetGroupInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupInfoReplyValidationError) ErrorName() string {
	return "GetGroupInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupInfoReplyValidationError{}

// Validate checks the field values on GetUntreatedGroupApplicationListReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUntreatedGroupApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUntreatedGroupApplicationListReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUntreatedGroupApplicationListReqMultiError, or nil if none found.
func (m *GetUntreatedGroupApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUntreatedGroupApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for UserID

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetUntreatedGroupApplicationListReqMultiError(errors)
	}

	return nil
}

// GetUntreatedGroupApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by
// GetUntreatedGroupApplicationListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUntreatedGroupApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUntreatedGroupApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUntreatedGroupApplicationListReqMultiError) AllErrors() []error { return m }

// GetUntreatedGroupApplicationListReqValidationError is the validation error
// returned by GetUntreatedGroupApplicationListReq.Validate if the designated
// constraints aren't met.
type GetUntreatedGroupApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUntreatedGroupApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUntreatedGroupApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUntreatedGroupApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUntreatedGroupApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUntreatedGroupApplicationListReqValidationError) ErrorName() string {
	return "GetUntreatedGroupApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUntreatedGroupApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUntreatedGroupApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUntreatedGroupApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUntreatedGroupApplicationListReqValidationError{}

// Validate checks the field values on GetUntreatedGroupApplicationListReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUntreatedGroupApplicationListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUntreatedGroupApplicationListReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUntreatedGroupApplicationListReplyMultiError, or nil if none found.
func (m *GetUntreatedGroupApplicationListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUntreatedGroupApplicationListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUntreatedGroupApplicationListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUntreatedGroupApplicationListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUntreatedGroupApplicationListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUntreatedGroupApplicationListReplyMultiError(errors)
	}

	return nil
}

// GetUntreatedGroupApplicationListReplyMultiError is an error wrapping
// multiple validation errors returned by
// GetUntreatedGroupApplicationListReply.ValidateAll() if the designated
// constraints aren't met.
type GetUntreatedGroupApplicationListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUntreatedGroupApplicationListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUntreatedGroupApplicationListReplyMultiError) AllErrors() []error { return m }

// GetUntreatedGroupApplicationListReplyValidationError is the validation error
// returned by GetUntreatedGroupApplicationListReply.Validate if the
// designated constraints aren't met.
type GetUntreatedGroupApplicationListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUntreatedGroupApplicationListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUntreatedGroupApplicationListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUntreatedGroupApplicationListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUntreatedGroupApplicationListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUntreatedGroupApplicationListReplyValidationError) ErrorName() string {
	return "GetUntreatedGroupApplicationListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUntreatedGroupApplicationListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUntreatedGroupApplicationListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUntreatedGroupApplicationListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUntreatedGroupApplicationListReplyValidationError{}

// Validate checks the field values on GetUserJoinGroupApplicationListReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserJoinGroupApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserJoinGroupApplicationListReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserJoinGroupApplicationListReqMultiError, or nil if none found.
func (m *GetUserJoinGroupApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserJoinGroupApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserJoinGroupApplicationListReqMultiError(errors)
	}

	return nil
}

// GetUserJoinGroupApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by
// GetUserJoinGroupApplicationListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserJoinGroupApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserJoinGroupApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserJoinGroupApplicationListReqMultiError) AllErrors() []error { return m }

// GetUserJoinGroupApplicationListReqValidationError is the validation error
// returned by GetUserJoinGroupApplicationListReq.Validate if the designated
// constraints aren't met.
type GetUserJoinGroupApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinGroupApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinGroupApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinGroupApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinGroupApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinGroupApplicationListReqValidationError) ErrorName() string {
	return "GetUserJoinGroupApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinGroupApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinGroupApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinGroupApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinGroupApplicationListReqValidationError{}

// Validate checks the field values on GetGroupApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupApplicationListReqMultiError, or nil if none found.
func (m *GetGroupApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for UserID

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupApplicationListReqMultiError(errors)
	}

	return nil
}

// GetGroupApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by GetGroupApplicationListReq.ValidateAll() if
// the designated constraints aren't met.
type GetGroupApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupApplicationListReqMultiError) AllErrors() []error { return m }

// GetGroupApplicationListReqValidationError is the validation error returned
// by GetGroupApplicationListReq.Validate if the designated constraints aren't met.
type GetGroupApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupApplicationListReqValidationError) ErrorName() string {
	return "GetGroupApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupApplicationListReqValidationError{}

// Validate checks the field values on GetRecvGroupApplicationListReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetRecvGroupApplicationListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecvGroupApplicationListReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRecvGroupApplicationListReplyMultiError, or nil if none found.
func (m *GetRecvGroupApplicationListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecvGroupApplicationListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRecvGroupApplicationListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRecvGroupApplicationListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRecvGroupApplicationListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRecvGroupApplicationListReplyMultiError(errors)
	}

	return nil
}

// GetRecvGroupApplicationListReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetRecvGroupApplicationListReply.ValidateAll() if the designated
// constraints aren't met.
type GetRecvGroupApplicationListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecvGroupApplicationListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecvGroupApplicationListReplyMultiError) AllErrors() []error { return m }

// GetRecvGroupApplicationListReplyValidationError is the validation error
// returned by GetRecvGroupApplicationListReply.Validate if the designated
// constraints aren't met.
type GetRecvGroupApplicationListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecvGroupApplicationListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecvGroupApplicationListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecvGroupApplicationListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecvGroupApplicationListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecvGroupApplicationListReplyValidationError) ErrorName() string {
	return "GetRecvGroupApplicationListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecvGroupApplicationListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecvGroupApplicationListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecvGroupApplicationListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecvGroupApplicationListReplyValidationError{}

// Validate checks the field values on GetGroupByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupByCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupByCodeReqMultiError, or nil if none found.
func (m *GetGroupByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetGroupByCodeReqMultiError(errors)
	}

	return nil
}

// GetGroupByCodeReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupByCodeReq.ValidateAll() if the designated constraints
// aren't met.
type GetGroupByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupByCodeReqMultiError) AllErrors() []error { return m }

// GetGroupByCodeReqValidationError is the validation error returned by
// GetGroupByCodeReq.Validate if the designated constraints aren't met.
type GetGroupByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupByCodeReqValidationError) ErrorName() string {
	return "GetGroupByCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupByCodeReqValidationError{}

// Validate checks the field values on GetGroupByCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupByCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupByCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupByCodeReplyMultiError, or nil if none found.
func (m *GetGroupByCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupByCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupByCodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupByCodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupByCodeReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupByCodeReplyMultiError(errors)
	}

	return nil
}

// GetGroupByCodeReplyMultiError is an error wrapping multiple validation
// errors returned by GetGroupByCodeReply.ValidateAll() if the designated
// constraints aren't met.
type GetGroupByCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupByCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupByCodeReplyMultiError) AllErrors() []error { return m }

// GetGroupByCodeReplyValidationError is the validation error returned by
// GetGroupByCodeReply.Validate if the designated constraints aren't met.
type GetGroupByCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupByCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupByCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupByCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupByCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupByCodeReplyValidationError) ErrorName() string {
	return "GetGroupByCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupByCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupByCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupByCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupByCodeReplyValidationError{}

// Validate checks the field values on IsGroupMemberReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsGroupMemberReqMultiError, or nil if none found.
func (m *IsGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for GroupID

	if len(errors) > 0 {
		return IsGroupMemberReqMultiError(errors)
	}

	return nil
}

// IsGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by IsGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type IsGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsGroupMemberReqMultiError) AllErrors() []error { return m }

// IsGroupMemberReqValidationError is the validation error returned by
// IsGroupMemberReq.Validate if the designated constraints aren't met.
type IsGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsGroupMemberReqValidationError) ErrorName() string { return "IsGroupMemberReqValidationError" }

// Error satisfies the builtin error interface
func (e IsGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsGroupMemberReqValidationError{}

// Validate checks the field values on IsGroupMemberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsGroupMemberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsGroupMemberReplyMultiError, or nil if none found.
func (m *IsGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IsGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsGroupMember

	if len(errors) > 0 {
		return IsGroupMemberReplyMultiError(errors)
	}

	return nil
}

// IsGroupMemberReplyMultiError is an error wrapping multiple validation errors
// returned by IsGroupMemberReply.ValidateAll() if the designated constraints
// aren't met.
type IsGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsGroupMemberReplyMultiError) AllErrors() []error { return m }

// IsGroupMemberReplyValidationError is the validation error returned by
// IsGroupMemberReply.Validate if the designated constraints aren't met.
type IsGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsGroupMemberReplyValidationError) ErrorName() string {
	return "IsGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IsGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsGroupMemberReplyValidationError{}

// Validate checks the field values on QuitGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuitGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuitGroupReqMultiError, or
// nil if none found.
func (m *QuitGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return QuitGroupReqMultiError(errors)
	}

	return nil
}

// QuitGroupReqMultiError is an error wrapping multiple validation errors
// returned by QuitGroupReq.ValidateAll() if the designated constraints aren't met.
type QuitGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitGroupReqMultiError) AllErrors() []error { return m }

// QuitGroupReqValidationError is the validation error returned by
// QuitGroupReq.Validate if the designated constraints aren't met.
type QuitGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitGroupReqValidationError) ErrorName() string { return "QuitGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e QuitGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitGroupReqValidationError{}

// Validate checks the field values on GetJoinedGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJoinedGroupInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJoinedGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJoinedGroupInfoReqMultiError, or nil if none found.
func (m *GetJoinedGroupInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJoinedGroupInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetJoinedGroupInfoReqMultiError(errors)
	}

	return nil
}

// GetJoinedGroupInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetJoinedGroupInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetJoinedGroupInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJoinedGroupInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJoinedGroupInfoReqMultiError) AllErrors() []error { return m }

// GetJoinedGroupInfoReqValidationError is the validation error returned by
// GetJoinedGroupInfoReq.Validate if the designated constraints aren't met.
type GetJoinedGroupInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJoinedGroupInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJoinedGroupInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJoinedGroupInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJoinedGroupInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJoinedGroupInfoReqValidationError) ErrorName() string {
	return "GetJoinedGroupInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetJoinedGroupInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJoinedGroupInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJoinedGroupInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJoinedGroupInfoReqValidationError{}

// Validate checks the field values on CancelGroupManagerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelGroupManagerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelGroupManagerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelGroupManagerReqMultiError, or nil if none found.
func (m *CancelGroupManagerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelGroupManagerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for PUserID

	// no validation rules for UserID

	if len(errors) > 0 {
		return CancelGroupManagerReqMultiError(errors)
	}

	return nil
}

// CancelGroupManagerReqMultiError is an error wrapping multiple validation
// errors returned by CancelGroupManagerReq.ValidateAll() if the designated
// constraints aren't met.
type CancelGroupManagerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelGroupManagerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelGroupManagerReqMultiError) AllErrors() []error { return m }

// CancelGroupManagerReqValidationError is the validation error returned by
// CancelGroupManagerReq.Validate if the designated constraints aren't met.
type CancelGroupManagerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelGroupManagerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelGroupManagerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelGroupManagerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelGroupManagerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelGroupManagerReqValidationError) ErrorName() string {
	return "CancelGroupManagerReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelGroupManagerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelGroupManagerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelGroupManagerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelGroupManagerReqValidationError{}

// Validate checks the field values on BatchCancelGroupManagerReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCancelGroupManagerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCancelGroupManagerReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCancelGroupManagerReqMultiError, or nil if none found.
func (m *BatchCancelGroupManagerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCancelGroupManagerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return BatchCancelGroupManagerReqMultiError(errors)
	}

	return nil
}

// BatchCancelGroupManagerReqMultiError is an error wrapping multiple
// validation errors returned by BatchCancelGroupManagerReq.ValidateAll() if
// the designated constraints aren't met.
type BatchCancelGroupManagerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCancelGroupManagerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCancelGroupManagerReqMultiError) AllErrors() []error { return m }

// BatchCancelGroupManagerReqValidationError is the validation error returned
// by BatchCancelGroupManagerReq.Validate if the designated constraints aren't met.
type BatchCancelGroupManagerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCancelGroupManagerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCancelGroupManagerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCancelGroupManagerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCancelGroupManagerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCancelGroupManagerReqValidationError) ErrorName() string {
	return "BatchCancelGroupManagerReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCancelGroupManagerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCancelGroupManagerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCancelGroupManagerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCancelGroupManagerReqValidationError{}

// Validate checks the field values on GetFullGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullGroupInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullGroupInfoReqMultiError, or nil if none found.
func (m *GetFullGroupInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullGroupInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFullGroupInfoReqMultiError(errors)
	}

	return nil
}

// GetFullGroupInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetFullGroupInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetFullGroupInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullGroupInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullGroupInfoReqMultiError) AllErrors() []error { return m }

// GetFullGroupInfoReqValidationError is the validation error returned by
// GetFullGroupInfoReq.Validate if the designated constraints aren't met.
type GetFullGroupInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullGroupInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullGroupInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullGroupInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullGroupInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullGroupInfoReqValidationError) ErrorName() string {
	return "GetFullGroupInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullGroupInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullGroupInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullGroupInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullGroupInfoReqValidationError{}

// Validate checks the field values on GetFullGroupInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullGroupInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullGroupInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullGroupInfoReplyMultiError, or nil if none found.
func (m *GetFullGroupInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullGroupInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFullGroupInfoReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFullGroupInfoReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFullGroupInfoReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFullGroupInfoReplyMultiError(errors)
	}

	return nil
}

// GetFullGroupInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetFullGroupInfoReply.ValidateAll() if the designated
// constraints aren't met.
type GetFullGroupInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullGroupInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullGroupInfoReplyMultiError) AllErrors() []error { return m }

// GetFullGroupInfoReplyValidationError is the validation error returned by
// GetFullGroupInfoReply.Validate if the designated constraints aren't met.
type GetFullGroupInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullGroupInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullGroupInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullGroupInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullGroupInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullGroupInfoReplyValidationError) ErrorName() string {
	return "GetFullGroupInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullGroupInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullGroupInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullGroupInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullGroupInfoReplyValidationError{}

// Validate checks the field values on MemberByIdsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberByIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberByIdsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberByIdsReqMultiError,
// or nil if none found.
func (m *MemberByIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberByIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return MemberByIdsReqMultiError(errors)
	}

	return nil
}

// MemberByIdsReqMultiError is an error wrapping multiple validation errors
// returned by MemberByIdsReq.ValidateAll() if the designated constraints
// aren't met.
type MemberByIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberByIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberByIdsReqMultiError) AllErrors() []error { return m }

// MemberByIdsReqValidationError is the validation error returned by
// MemberByIdsReq.Validate if the designated constraints aren't met.
type MemberByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberByIdsReqValidationError) ErrorName() string { return "MemberByIdsReqValidationError" }

// Error satisfies the builtin error interface
func (e MemberByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberByIdsReqValidationError{}

// Validate checks the field values on MemberByIdsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberByIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberByIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberByIdsReplyMultiError, or nil if none found.
func (m *MemberByIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberByIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberByIdsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberByIdsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberByIdsReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberByIdsReplyMultiError(errors)
	}

	return nil
}

// MemberByIdsReplyMultiError is an error wrapping multiple validation errors
// returned by MemberByIdsReply.ValidateAll() if the designated constraints
// aren't met.
type MemberByIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberByIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberByIdsReplyMultiError) AllErrors() []error { return m }

// MemberByIdsReplyValidationError is the validation error returned by
// MemberByIdsReply.Validate if the designated constraints aren't met.
type MemberByIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberByIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberByIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberByIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberByIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberByIdsReplyValidationError) ErrorName() string { return "MemberByIdsReplyValidationError" }

// Error satisfies the builtin error interface
func (e MemberByIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberByIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberByIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberByIdsReplyValidationError{}

// Validate checks the field values on GetJoinedGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJoinedGroupListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJoinedGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJoinedGroupListReqMultiError, or nil if none found.
func (m *GetJoinedGroupListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJoinedGroupListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetJoinedGroupListReqMultiError(errors)
	}

	return nil
}

// GetJoinedGroupListReqMultiError is an error wrapping multiple validation
// errors returned by GetJoinedGroupListReq.ValidateAll() if the designated
// constraints aren't met.
type GetJoinedGroupListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJoinedGroupListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJoinedGroupListReqMultiError) AllErrors() []error { return m }

// GetJoinedGroupListReqValidationError is the validation error returned by
// GetJoinedGroupListReq.Validate if the designated constraints aren't met.
type GetJoinedGroupListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJoinedGroupListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJoinedGroupListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJoinedGroupListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJoinedGroupListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJoinedGroupListReqValidationError) ErrorName() string {
	return "GetJoinedGroupListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetJoinedGroupListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJoinedGroupListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJoinedGroupListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJoinedGroupListReqValidationError{}

// Validate checks the field values on GetJoinedGroupListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJoinedGroupListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJoinedGroupListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJoinedGroupListReplyMultiError, or nil if none found.
func (m *GetJoinedGroupListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJoinedGroupListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJoinedGroupListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJoinedGroupListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJoinedGroupListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJoinedGroupListReplyMultiError(errors)
	}

	return nil
}

// GetJoinedGroupListReplyMultiError is an error wrapping multiple validation
// errors returned by GetJoinedGroupListReply.ValidateAll() if the designated
// constraints aren't met.
type GetJoinedGroupListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJoinedGroupListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJoinedGroupListReplyMultiError) AllErrors() []error { return m }

// GetJoinedGroupListReplyValidationError is the validation error returned by
// GetJoinedGroupListReply.Validate if the designated constraints aren't met.
type GetJoinedGroupListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJoinedGroupListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJoinedGroupListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJoinedGroupListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJoinedGroupListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJoinedGroupListReplyValidationError) ErrorName() string {
	return "GetJoinedGroupListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetJoinedGroupListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJoinedGroupListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJoinedGroupListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJoinedGroupListReplyValidationError{}

// Validate checks the field values on GetGroupMembersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMembersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMembersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMembersReqMultiError, or nil if none found.
func (m *GetGroupMembersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMembersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for Filter

	if len(errors) > 0 {
		return GetGroupMembersReqMultiError(errors)
	}

	return nil
}

// GetGroupMembersReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupMembersReq.ValidateAll() if the designated constraints
// aren't met.
type GetGroupMembersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMembersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMembersReqMultiError) AllErrors() []error { return m }

// GetGroupMembersReqValidationError is the validation error returned by
// GetGroupMembersReq.Validate if the designated constraints aren't met.
type GetGroupMembersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMembersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMembersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMembersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMembersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMembersReqValidationError) ErrorName() string {
	return "GetGroupMembersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMembersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMembersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMembersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMembersReqValidationError{}

// Validate checks the field values on GetGroupMembersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMembersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMembersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMembersReplyMultiError, or nil if none found.
func (m *GetGroupMembersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMembersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMembersReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMembersReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMembersReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMembersReplyMultiError(errors)
	}

	return nil
}

// GetGroupMembersReplyMultiError is an error wrapping multiple validation
// errors returned by GetGroupMembersReply.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMembersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMembersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMembersReplyMultiError) AllErrors() []error { return m }

// GetGroupMembersReplyValidationError is the validation error returned by
// GetGroupMembersReply.Validate if the designated constraints aren't met.
type GetGroupMembersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMembersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMembersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMembersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMembersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMembersReplyValidationError) ErrorName() string {
	return "GetGroupMembersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMembersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMembersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMembersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMembersReplyValidationError{}

// Validate checks the field values on GetGroupAbstractInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAbstractInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAbstractInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAbstractInfoReqMultiError, or nil if none found.
func (m *GetGroupAbstractInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAbstractInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGroupAbstractInfoReqMultiError(errors)
	}

	return nil
}

// GetGroupAbstractInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupAbstractInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAbstractInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAbstractInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAbstractInfoReqMultiError) AllErrors() []error { return m }

// GetGroupAbstractInfoReqValidationError is the validation error returned by
// GetGroupAbstractInfoReq.Validate if the designated constraints aren't met.
type GetGroupAbstractInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAbstractInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAbstractInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAbstractInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAbstractInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAbstractInfoReqValidationError) ErrorName() string {
	return "GetGroupAbstractInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAbstractInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAbstractInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAbstractInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAbstractInfoReqValidationError{}

// Validate checks the field values on GetGroupAbstractInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAbstractInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAbstractInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAbstractInfoReplyMultiError, or nil if none found.
func (m *GetGroupAbstractInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAbstractInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupAbstractInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupAbstractInfoReplyValidationError{
						field:  fmt.Sprintf("GroupAbstractInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupAbstractInfoReplyValidationError{
						field:  fmt.Sprintf("GroupAbstractInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupAbstractInfoReplyValidationError{
					field:  fmt.Sprintf("GroupAbstractInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupAbstractInfoReplyMultiError(errors)
	}

	return nil
}

// GetGroupAbstractInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetGroupAbstractInfoReply.ValidateAll() if the
// designated constraints aren't met.
type GetGroupAbstractInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAbstractInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAbstractInfoReplyMultiError) AllErrors() []error { return m }

// GetGroupAbstractInfoReplyValidationError is the validation error returned by
// GetGroupAbstractInfoReply.Validate if the designated constraints aren't met.
type GetGroupAbstractInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAbstractInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAbstractInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAbstractInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAbstractInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAbstractInfoReplyValidationError) ErrorName() string {
	return "GetGroupAbstractInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAbstractInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAbstractInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAbstractInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAbstractInfoReplyValidationError{}
