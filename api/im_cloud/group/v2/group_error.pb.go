// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: api/im_cloud/group/v2/group_error.proto

// 定义包名

package v2

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupErrorReason int32

const (
	// 获取群信息失败
	GroupErrorReason_GET_GROUP_INFO_FAIL GroupErrorReason = 0
	// 群成员数量不应超过最大限制
	GroupErrorReason_GROUP_MEMBER_NUM_TOO_MANY GroupErrorReason = 1
	// 创建群聊失败
	GroupErrorReason_CREATE_GROUP_FAIL GroupErrorReason = 2
	// 禁言群失败
	GroupErrorReason_MUTE_GROUP_FAIL GroupErrorReason = 3
	// 禁言群成员失败
	GroupErrorReason_MUTE_GROUP_MEMBER_FAIL GroupErrorReason = 4
	// 获取群成员信息失败
	GroupErrorReason_GET_GROUP_MEMBER_FAIL GroupErrorReason = 5
	// 群成员数量不应少于2人
	GroupErrorReason_GROUP_MEMBER_NUM_TOO_LITTLE GroupErrorReason = 6
	// 取消禁言群失败
	GroupErrorReason_CANCEL_MUTE_GROUP_FAIL GroupErrorReason = 7
	// 取消禁言群成员失败
	GroupErrorReason_CANCEL_MUTE_GROUP_MEMBER_FAIL GroupErrorReason = 8
	// 没有权限操作该信息
	GroupErrorReason_NO_PERMISSION_OPERATION_GROUP_INFO GroupErrorReason = 9
	// 解散群失败
	GroupErrorReason_DISMISS_GROUP_FAIL GroupErrorReason = 10
	// 更新群/群成员数据失败
	GroupErrorReason_UPDATE_GROUP_DATA_FAIL GroupErrorReason = 11
	// 需要实名认证
	GroupErrorReason_NEED_REAL_NAME_AUTHENTICATION GroupErrorReason = 12
	// 加入群聊失败
	GroupErrorReason_JOIN_GROUP_REQ_FAIL GroupErrorReason = 13
	// 删除缓存信息失败
	GroupErrorReason_DELETE_RC_CACHE_FAIL GroupErrorReason = 14
	// 设置群成员数量应大于当前人数且不小于3人
	GroupErrorReason_SETTING_GROUP_MEMBER_MEMBERCOUNT_FAIL GroupErrorReason = 15
	// 添加群管理失败
	GroupErrorReason_SETTING_GROUP_ADMIN_FAIL GroupErrorReason = 16
	// 踢出群成员失败
	GroupErrorReason_KICK_GROUP_MEMBER_FAIL GroupErrorReason = 17
	// 推出群聊失败
	GroupErrorReason_MEMBER_QUIT_GROUP_FAIL GroupErrorReason = 18
	// 请求处理失败
	GroupErrorReason_HANDLE_APPLICIATION_REQUEST_FAIL GroupErrorReason = 19
	// 上传文件失败
	GroupErrorReason_UPLOAD_GROUP_FEIL_FAIL GroupErrorReason = 20
	// 获取群文件列表数据失败
	GroupErrorReason_GET_GROUP_FEIL_LIST_FAIl GroupErrorReason = 21
	// 获取请求数据失败
	GroupErrorReason_GET_REQUEST_DATA_INFO_FAIL GroupErrorReason = 22
	// 获取踢出群成员数据信息失败
	GroupErrorReason_GET_KICK_GROUP_MEMBER_FAIL GroupErrorReason = 23
	// 获取加群信息失败
	GroupErrorReason_GET_JOIN_GROUP_REQUEST_FAIL GroupErrorReason = 24
	// 转让群失败
	GroupErrorReason_TRANSFER_GROUP_ERROR GroupErrorReason = 25
	// 申请已经发起，请勿重复请求
	GroupErrorReason_THE_APPLICATION_HAS_BEEN_INITIATED_DO_NOT_REPEAT GroupErrorReason = 26
	// 获取最大未处理的加群请求失败
	GroupErrorReason_GET_UNTREATED_GROUP_APPLICATION_LIST_FAIL GroupErrorReason = 27
	// 该群暂未公开
	GroupErrorReason_GROUP_IS_NOT_OPEN GroupErrorReason = 28
	// 该群暂未公开
	GroupErrorReason_YOU_ARE_ALREADY_IN_THE_GROUP GroupErrorReason = 29
	// 群不存在
	GroupErrorReason_GROUP_IS_NOT_FOND GroupErrorReason = 30
	// 群请求已经处理
	GroupErrorReason_HANDLE_APPLICATION_HANDS_FINISH GroupErrorReason = 31
)

// Enum value maps for GroupErrorReason.
var (
	GroupErrorReason_name = map[int32]string{
		0:  "GET_GROUP_INFO_FAIL",
		1:  "GROUP_MEMBER_NUM_TOO_MANY",
		2:  "CREATE_GROUP_FAIL",
		3:  "MUTE_GROUP_FAIL",
		4:  "MUTE_GROUP_MEMBER_FAIL",
		5:  "GET_GROUP_MEMBER_FAIL",
		6:  "GROUP_MEMBER_NUM_TOO_LITTLE",
		7:  "CANCEL_MUTE_GROUP_FAIL",
		8:  "CANCEL_MUTE_GROUP_MEMBER_FAIL",
		9:  "NO_PERMISSION_OPERATION_GROUP_INFO",
		10: "DISMISS_GROUP_FAIL",
		11: "UPDATE_GROUP_DATA_FAIL",
		12: "NEED_REAL_NAME_AUTHENTICATION",
		13: "JOIN_GROUP_REQ_FAIL",
		14: "DELETE_RC_CACHE_FAIL",
		15: "SETTING_GROUP_MEMBER_MEMBERCOUNT_FAIL",
		16: "SETTING_GROUP_ADMIN_FAIL",
		17: "KICK_GROUP_MEMBER_FAIL",
		18: "MEMBER_QUIT_GROUP_FAIL",
		19: "HANDLE_APPLICIATION_REQUEST_FAIL",
		20: "UPLOAD_GROUP_FEIL_FAIL",
		21: "GET_GROUP_FEIL_LIST_FAIl",
		22: "GET_REQUEST_DATA_INFO_FAIL",
		23: "GET_KICK_GROUP_MEMBER_FAIL",
		24: "GET_JOIN_GROUP_REQUEST_FAIL",
		25: "TRANSFER_GROUP_ERROR",
		26: "THE_APPLICATION_HAS_BEEN_INITIATED_DO_NOT_REPEAT",
		27: "GET_UNTREATED_GROUP_APPLICATION_LIST_FAIL",
		28: "GROUP_IS_NOT_OPEN",
		29: "YOU_ARE_ALREADY_IN_THE_GROUP",
		30: "GROUP_IS_NOT_FOND",
		31: "HANDLE_APPLICATION_HANDS_FINISH",
	}
	GroupErrorReason_value = map[string]int32{
		"GET_GROUP_INFO_FAIL":                              0,
		"GROUP_MEMBER_NUM_TOO_MANY":                        1,
		"CREATE_GROUP_FAIL":                                2,
		"MUTE_GROUP_FAIL":                                  3,
		"MUTE_GROUP_MEMBER_FAIL":                           4,
		"GET_GROUP_MEMBER_FAIL":                            5,
		"GROUP_MEMBER_NUM_TOO_LITTLE":                      6,
		"CANCEL_MUTE_GROUP_FAIL":                           7,
		"CANCEL_MUTE_GROUP_MEMBER_FAIL":                    8,
		"NO_PERMISSION_OPERATION_GROUP_INFO":               9,
		"DISMISS_GROUP_FAIL":                               10,
		"UPDATE_GROUP_DATA_FAIL":                           11,
		"NEED_REAL_NAME_AUTHENTICATION":                    12,
		"JOIN_GROUP_REQ_FAIL":                              13,
		"DELETE_RC_CACHE_FAIL":                             14,
		"SETTING_GROUP_MEMBER_MEMBERCOUNT_FAIL":            15,
		"SETTING_GROUP_ADMIN_FAIL":                         16,
		"KICK_GROUP_MEMBER_FAIL":                           17,
		"MEMBER_QUIT_GROUP_FAIL":                           18,
		"HANDLE_APPLICIATION_REQUEST_FAIL":                 19,
		"UPLOAD_GROUP_FEIL_FAIL":                           20,
		"GET_GROUP_FEIL_LIST_FAIl":                         21,
		"GET_REQUEST_DATA_INFO_FAIL":                       22,
		"GET_KICK_GROUP_MEMBER_FAIL":                       23,
		"GET_JOIN_GROUP_REQUEST_FAIL":                      24,
		"TRANSFER_GROUP_ERROR":                             25,
		"THE_APPLICATION_HAS_BEEN_INITIATED_DO_NOT_REPEAT": 26,
		"GET_UNTREATED_GROUP_APPLICATION_LIST_FAIL":        27,
		"GROUP_IS_NOT_OPEN":                                28,
		"YOU_ARE_ALREADY_IN_THE_GROUP":                     29,
		"GROUP_IS_NOT_FOND":                                30,
		"HANDLE_APPLICATION_HANDS_FINISH":                  31,
	}
)

func (x GroupErrorReason) Enum() *GroupErrorReason {
	p := new(GroupErrorReason)
	*p = x
	return p
}

func (x GroupErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_im_cloud_group_v2_group_error_proto_enumTypes[0].Descriptor()
}

func (GroupErrorReason) Type() protoreflect.EnumType {
	return &file_api_im_cloud_group_v2_group_error_proto_enumTypes[0]
}

func (x GroupErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupErrorReason.Descriptor instead.
func (GroupErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_api_im_cloud_group_v2_group_error_proto_rawDescGZIP(), []int{0}
}

var File_api_im_cloud_group_v2_group_error_proto protoreflect.FileDescriptor

var file_api_im_cloud_group_v2_group_error_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32,
	0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xbb, 0x09, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x13, 0x47, 0x45,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45, 0xfe, 0x03, 0x12, 0x23, 0x0a, 0x19, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x80, 0x04, 0x12, 0x1b,
	0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x83, 0x04, 0x12, 0x19, 0x0a, 0x0f, 0x4d,
	0x55, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03,
	0x1a, 0x04, 0xa8, 0x45, 0x81, 0x04, 0x12, 0x20, 0x0a, 0x16, 0x4d, 0x55, 0x54, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x82, 0x04, 0x12, 0x1f, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0xff, 0x03, 0x12, 0x25, 0x0a, 0x1b, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0xf5, 0x03,
	0x12, 0x20, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x1a, 0x04, 0xa8, 0x45,
	0xfa, 0x03, 0x12, 0x27, 0x0a, 0x1d, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x55, 0x54,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xfc, 0x03, 0x12, 0x2c, 0x0a, 0x22, 0x4e,
	0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x09, 0x1a, 0x04, 0xa8, 0x45, 0xc1, 0x04, 0x12, 0x1c, 0x0a, 0x12, 0x44, 0x49, 0x53,
	0x4d, 0x49, 0x53, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x0a, 0x1a, 0x04, 0xa8, 0x45, 0xff, 0x03, 0x12, 0x20, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x0b, 0x1a, 0x04, 0xa8, 0x45, 0x80, 0x04, 0x12, 0x27, 0x0a, 0x1d, 0x4e, 0x45, 0x45,
	0x44, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x1a, 0x04, 0xa8, 0x45,
	0x83, 0x04, 0x12, 0x1d, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0d, 0x1a, 0x04, 0xa8, 0x45, 0x81,
	0x04, 0x12, 0x1e, 0x0a, 0x14, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x43, 0x5f, 0x43,
	0x41, 0x43, 0x48, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0e, 0x1a, 0x04, 0xa8, 0x45, 0xcc,
	0x04, 0x12, 0x2f, 0x0a, 0x25, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0f, 0x1a, 0x04, 0xa8, 0x45,
	0x82, 0x04, 0x12, 0x22, 0x0a, 0x18, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x10,
	0x1a, 0x04, 0xa8, 0x45, 0x84, 0x04, 0x12, 0x20, 0x0a, 0x16, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x11, 0x1a, 0x04, 0xa8, 0x45, 0x8d, 0x04, 0x12, 0x20, 0x0a, 0x16, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x12, 0x1a, 0x04, 0xa8, 0x45, 0x85, 0x04, 0x12, 0x2a, 0x0a, 0x20, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x13,
	0x1a, 0x04, 0xa8, 0x45, 0xba, 0x04, 0x12, 0x20, 0x0a, 0x16, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x45, 0x49, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x14, 0x1a, 0x04, 0xa8, 0x45, 0x86, 0x04, 0x12, 0x22, 0x0a, 0x18, 0x47, 0x45, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x45, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x6c, 0x10, 0x15, 0x1a, 0x04, 0xa8, 0x45, 0x87, 0x04, 0x12, 0x24, 0x0a, 0x1a,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x16, 0x1a, 0x04, 0xa8, 0x45,
	0x85, 0x04, 0x12, 0x24, 0x0a, 0x1a, 0x47, 0x45, 0x54, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x17, 0x1a, 0x04, 0xa8, 0x45, 0x8d, 0x04, 0x12, 0x25, 0x0a, 0x1b, 0x47, 0x45, 0x54, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x18, 0x1a, 0x04, 0xa8, 0x45, 0x81, 0x04, 0x12,
	0x1e, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x1a, 0x04, 0xa8, 0x45, 0xfb, 0x03, 0x12,
	0x3a, 0x0a, 0x30, 0x54, 0x48, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x10, 0x1a, 0x1a, 0x04, 0xa8, 0x45, 0x87, 0x04, 0x12, 0x33, 0x0a, 0x29, 0x47,
	0x45, 0x54, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x1b, 0x1a, 0x04, 0xa8, 0x45, 0x88, 0x04,
	0x12, 0x1b, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x1c, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x26, 0x0a,
	0x1c, 0x59, 0x4f, 0x55, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x1d, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1b, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x4e, 0x44, 0x10, 0x1e, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x29, 0x0a, 0x1f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x1f, 0x1a, 0x04, 0xa8, 0x45, 0xf9, 0x03, 0x1a, 0x04, 0xa0,
	0x45, 0xf4, 0x03, 0x42, 0x53, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_im_cloud_group_v2_group_error_proto_rawDescOnce sync.Once
	file_api_im_cloud_group_v2_group_error_proto_rawDescData = file_api_im_cloud_group_v2_group_error_proto_rawDesc
)

func file_api_im_cloud_group_v2_group_error_proto_rawDescGZIP() []byte {
	file_api_im_cloud_group_v2_group_error_proto_rawDescOnce.Do(func() {
		file_api_im_cloud_group_v2_group_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_im_cloud_group_v2_group_error_proto_rawDescData)
	})
	return file_api_im_cloud_group_v2_group_error_proto_rawDescData
}

var file_api_im_cloud_group_v2_group_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_im_cloud_group_v2_group_error_proto_goTypes = []interface{}{
	(GroupErrorReason)(0), // 0: api.im_cloud.group.v2.GroupErrorReason
}
var file_api_im_cloud_group_v2_group_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_im_cloud_group_v2_group_error_proto_init() }
func file_api_im_cloud_group_v2_group_error_proto_init() {
	if File_api_im_cloud_group_v2_group_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_im_cloud_group_v2_group_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_im_cloud_group_v2_group_error_proto_goTypes,
		DependencyIndexes: file_api_im_cloud_group_v2_group_error_proto_depIdxs,
		EnumInfos:         file_api_im_cloud_group_v2_group_error_proto_enumTypes,
	}.Build()
	File_api_im_cloud_group_v2_group_error_proto = out.File
	file_api_im_cloud_group_v2_group_error_proto_rawDesc = nil
	file_api_im_cloud_group_v2_group_error_proto_goTypes = nil
	file_api_im_cloud_group_v2_group_error_proto_depIdxs = nil
}
