// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: im_cloud/group/v2/group.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Group_CreateGroup_FullMethodName                      = "/api.im_cloud.group.v2.Group/CreateGroup"
	Group_EditGroupProfile_FullMethodName                 = "/api.im_cloud.group.v2.Group/EditGroupProfile"
	Group_UpdateGroupSwitch_FullMethodName                = "/api.im_cloud.group.v2.Group/UpdateGroupSwitch"
	Group_MuteGroup_FullMethodName                        = "/api.im_cloud.group.v2.Group/MuteGroup"
	Group_CancelMuteGroup_FullMethodName                  = "/api.im_cloud.group.v2.Group/CancelMuteGroup"
	Group_CancelMuteGroupMember_FullMethodName            = "/api.im_cloud.group.v2.Group/CancelMuteGroupMember"
	Group_MuteGroupMember_FullMethodName                  = "/api.im_cloud.group.v2.Group/MuteGroupMember"
	Group_GetGroupByCode_FullMethodName                   = "/api.im_cloud.group.v2.Group/GetGroupByCode"
	Group_DismissGroup_FullMethodName                     = "/api.im_cloud.group.v2.Group/DismissGroup"
	Group_DismissGroupNotice_FullMethodName               = "/api.im_cloud.group.v2.Group/DismissGroupNotice"
	Group_ApplicationResponse_FullMethodName              = "/api.im_cloud.group.v2.Group/ApplicationResponse"
	Group_JoinGroup_FullMethodName                        = "/api.im_cloud.group.v2.Group/JoinGroup"
	Group_InviteUserToGroup_FullMethodName                = "/api.im_cloud.group.v2.Group/InviteUserToGroup"
	Group_AddGroupAdmin_FullMethodName                    = "/api.im_cloud.group.v2.Group/AddGroupAdmin"
	Group_TransferGroup_FullMethodName                    = "/api.im_cloud.group.v2.Group/TransferGroup"
	Group_KickGroupMember_FullMethodName                  = "/api.im_cloud.group.v2.Group/KickGroupMember"
	Group_QuitGroup_FullMethodName                        = "/api.im_cloud.group.v2.Group/QuitGroup"
	Group_CancelGroupManager_FullMethodName               = "/api.im_cloud.group.v2.Group/CancelGroupManager"
	Group_BatchAddGroupAdmin_FullMethodName               = "/api.im_cloud.group.v2.Group/BatchAddGroupAdmin"
	Group_BatchCancelGroupManager_FullMethodName          = "/api.im_cloud.group.v2.Group/BatchCancelGroupManager"
	Group_GetGroupInfo_FullMethodName                     = "/api.im_cloud.group.v2.Group/GetGroupInfo"
	Group_SetGroupMemberInfo_FullMethodName               = "/api.im_cloud.group.v2.Group/SetGroupMemberInfo"
	Group_GetFullGroupInfo_FullMethodName                 = "/api.im_cloud.group.v2.Group/GetFullGroupInfo"
	Group_MemberByIds_FullMethodName                      = "/api.im_cloud.group.v2.Group/MemberByIds"
	Group_GetJoinedGroupList_FullMethodName               = "/api.im_cloud.group.v2.Group/GetJoinedGroupList"
	Group_GetGroupApplicationList_FullMethodName          = "/api.im_cloud.group.v2.Group/GetGroupApplicationList"
	Group_GetUntreatedGroupApplicationList_FullMethodName = "/api.im_cloud.group.v2.Group/GetUntreatedGroupApplicationList"
	Group_GetUserReqGroupApplicationList_FullMethodName   = "/api.im_cloud.group.v2.Group/GetUserReqGroupApplicationList"
	Group_GetGroupMembers_FullMethodName                  = "/api.im_cloud.group.v2.Group/GetGroupMembers"
	Group_GetGroupAbstractInfo_FullMethodName             = "/api.im_cloud.group.v2.Group/getGroupAbstractInfo"
)

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	// 创建群聊 存在
	CreateGroup(ctx context.Context, in *CrateGroupReq, opts ...grpc.CallOption) (*CrateGroupReply, error)
	// 编辑群组资料 存在
	EditGroupProfile(ctx context.Context, in *EditGroupProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新群开关信息 存在
	UpdateGroupSwitch(ctx context.Context, in *UpdateGroupSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁言群 存在
	MuteGroup(ctx context.Context, in *MuteGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取消群禁言 存在
	CancelMuteGroup(ctx context.Context, in *CancelMuteGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取消群成员禁言 存在
	CancelMuteGroupMember(ctx context.Context, in *CancelMuteGroupMemberReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁言群成员 存在
	MuteGroupMember(ctx context.Context, in *MuteGroupMemberReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据code获取群聊 存在
	GetGroupByCode(ctx context.Context, in *GetGroupByCodeReq, opts ...grpc.CallOption) (*GetGroupByCodeReply, error)
	// 解散群组 存在
	DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 解散群通知 存在
	DismissGroupNotice(ctx context.Context, in *DismissGroupNoticeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 处理加群消息 存在
	ApplicationResponse(ctx context.Context, in *ApplicationResponseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户加入群聊 存在
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 邀请用户进入群聊 存在
	InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 添加群管理 存在
	AddGroupAdmin(ctx context.Context, in *AddGroupAdminReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 转让群主 存在
	TransferGroup(ctx context.Context, in *TransferGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 将用户移出群组 存在
	KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 退出群聊 存在
	QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取消群管理员 存在
	CancelGroupManager(ctx context.Context, in *CancelGroupManagerReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量添加群管理 存在
	BatchAddGroupAdmin(ctx context.Context, in *BatchAddGroupAdmReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量取消管理员 存在
	BatchCancelGroupManager(ctx context.Context, in *BatchCancelGroupManagerReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群信息 存在
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoReply, error)
	// 设置群成员信息 存在
	SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群信息忽略解散和删除 存在
	GetFullGroupInfo(ctx context.Context, in *GetFullGroupInfoReq, opts ...grpc.CallOption) (*GetFullGroupInfoReply, error)
	// 获取群成员信息 存在
	MemberByIds(ctx context.Context, in *MemberByIdsReq, opts ...grpc.CallOption) (*MemberByIdsReply, error)
	// 获取用户加入的群列表 存在
	GetJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListReply, error)
	// 以管理员或群主身份）获取群的加群申请 存在
	GetGroupApplicationList(ctx context.Context, in *GetGroupApplicationListReq, opts ...grpc.CallOption) (*GetRecvGroupApplicationListReply, error)
	// 以管理员或群主身份）获取未处理的加群请求 存在
	GetUntreatedGroupApplicationList(ctx context.Context, in *GetUntreatedGroupApplicationListReq, opts ...grpc.CallOption) (*GetRecvGroupApplicationListReply, error)
	// 获取用户自己的主动加群申请 存在
	GetUserReqGroupApplicationList(ctx context.Context, in *GetUserJoinGroupApplicationListReq, opts ...grpc.CallOption) (*GetRecvGroupApplicationListReply, error)
	// 获取群成员 存在
	GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersReply, error)
	// 获取群信息hash值 存在
	GetGroupAbstractInfo(ctx context.Context, in *GetGroupAbstractInfoReq, opts ...grpc.CallOption) (*GetGroupAbstractInfoReply, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CrateGroupReq, opts ...grpc.CallOption) (*CrateGroupReply, error) {
	out := new(CrateGroupReply)
	err := c.cc.Invoke(ctx, Group_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditGroupProfile(ctx context.Context, in *EditGroupProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_EditGroupProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupSwitch(ctx context.Context, in *UpdateGroupSwitchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_UpdateGroupSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteGroup(ctx context.Context, in *MuteGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_MuteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelMuteGroup(ctx context.Context, in *CancelMuteGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_CancelMuteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelMuteGroupMember(ctx context.Context, in *CancelMuteGroupMemberReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_CancelMuteGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteGroupMember(ctx context.Context, in *MuteGroupMemberReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_MuteGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupByCode(ctx context.Context, in *GetGroupByCodeReq, opts ...grpc.CallOption) (*GetGroupByCodeReply, error) {
	out := new(GetGroupByCodeReply)
	err := c.cc.Invoke(ctx, Group_GetGroupByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_DismissGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DismissGroupNotice(ctx context.Context, in *DismissGroupNoticeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_DismissGroupNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ApplicationResponse(ctx context.Context, in *ApplicationResponseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_ApplicationResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_InviteUserToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) AddGroupAdmin(ctx context.Context, in *AddGroupAdminReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_AddGroupAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) TransferGroup(ctx context.Context, in *TransferGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_TransferGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_KickGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_QuitGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelGroupManager(ctx context.Context, in *CancelGroupManagerReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_CancelGroupManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) BatchAddGroupAdmin(ctx context.Context, in *BatchAddGroupAdmReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_BatchAddGroupAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) BatchCancelGroupManager(ctx context.Context, in *BatchCancelGroupManagerReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_BatchCancelGroupManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoReply, error) {
	out := new(GetGroupInfoReply)
	err := c.cc.Invoke(ctx, Group_GetGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Group_SetGroupMemberInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetFullGroupInfo(ctx context.Context, in *GetFullGroupInfoReq, opts ...grpc.CallOption) (*GetFullGroupInfoReply, error) {
	out := new(GetFullGroupInfoReply)
	err := c.cc.Invoke(ctx, Group_GetFullGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MemberByIds(ctx context.Context, in *MemberByIdsReq, opts ...grpc.CallOption) (*MemberByIdsReply, error) {
	out := new(MemberByIdsReply)
	err := c.cc.Invoke(ctx, Group_MemberByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListReply, error) {
	out := new(GetJoinedGroupListReply)
	err := c.cc.Invoke(ctx, Group_GetJoinedGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupApplicationList(ctx context.Context, in *GetGroupApplicationListReq, opts ...grpc.CallOption) (*GetRecvGroupApplicationListReply, error) {
	out := new(GetRecvGroupApplicationListReply)
	err := c.cc.Invoke(ctx, Group_GetGroupApplicationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUntreatedGroupApplicationList(ctx context.Context, in *GetUntreatedGroupApplicationListReq, opts ...grpc.CallOption) (*GetRecvGroupApplicationListReply, error) {
	out := new(GetRecvGroupApplicationListReply)
	err := c.cc.Invoke(ctx, Group_GetUntreatedGroupApplicationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUserReqGroupApplicationList(ctx context.Context, in *GetUserJoinGroupApplicationListReq, opts ...grpc.CallOption) (*GetRecvGroupApplicationListReply, error) {
	out := new(GetRecvGroupApplicationListReply)
	err := c.cc.Invoke(ctx, Group_GetUserReqGroupApplicationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersReply, error) {
	out := new(GetGroupMembersReply)
	err := c.cc.Invoke(ctx, Group_GetGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupAbstractInfo(ctx context.Context, in *GetGroupAbstractInfoReq, opts ...grpc.CallOption) (*GetGroupAbstractInfoReply, error) {
	out := new(GetGroupAbstractInfoReply)
	err := c.cc.Invoke(ctx, Group_GetGroupAbstractInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility
type GroupServer interface {
	// 创建群聊 存在
	CreateGroup(context.Context, *CrateGroupReq) (*CrateGroupReply, error)
	// 编辑群组资料 存在
	EditGroupProfile(context.Context, *EditGroupProfileReq) (*emptypb.Empty, error)
	// 更新群开关信息 存在
	UpdateGroupSwitch(context.Context, *UpdateGroupSwitchReq) (*emptypb.Empty, error)
	// 禁言群 存在
	MuteGroup(context.Context, *MuteGroupReq) (*emptypb.Empty, error)
	// 取消群禁言 存在
	CancelMuteGroup(context.Context, *CancelMuteGroupReq) (*emptypb.Empty, error)
	// 取消群成员禁言 存在
	CancelMuteGroupMember(context.Context, *CancelMuteGroupMemberReq) (*emptypb.Empty, error)
	// 禁言群成员 存在
	MuteGroupMember(context.Context, *MuteGroupMemberReq) (*emptypb.Empty, error)
	// 根据code获取群聊 存在
	GetGroupByCode(context.Context, *GetGroupByCodeReq) (*GetGroupByCodeReply, error)
	// 解散群组 存在
	DismissGroup(context.Context, *DismissGroupReq) (*emptypb.Empty, error)
	// 解散群通知 存在
	DismissGroupNotice(context.Context, *DismissGroupNoticeReq) (*emptypb.Empty, error)
	// 处理加群消息 存在
	ApplicationResponse(context.Context, *ApplicationResponseReq) (*emptypb.Empty, error)
	// 用户加入群聊 存在
	JoinGroup(context.Context, *JoinGroupReq) (*emptypb.Empty, error)
	// 邀请用户进入群聊 存在
	InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*emptypb.Empty, error)
	// 添加群管理 存在
	AddGroupAdmin(context.Context, *AddGroupAdminReq) (*emptypb.Empty, error)
	// 转让群主 存在
	TransferGroup(context.Context, *TransferGroupReq) (*emptypb.Empty, error)
	// 将用户移出群组 存在
	KickGroupMember(context.Context, *KickGroupMemberReq) (*emptypb.Empty, error)
	// 退出群聊 存在
	QuitGroup(context.Context, *QuitGroupReq) (*emptypb.Empty, error)
	// 取消群管理员 存在
	CancelGroupManager(context.Context, *CancelGroupManagerReq) (*emptypb.Empty, error)
	// 批量添加群管理 存在
	BatchAddGroupAdmin(context.Context, *BatchAddGroupAdmReq) (*emptypb.Empty, error)
	// 批量取消管理员 存在
	BatchCancelGroupManager(context.Context, *BatchCancelGroupManagerReq) (*emptypb.Empty, error)
	// 获取群信息 存在
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoReply, error)
	// 设置群成员信息 存在
	SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*emptypb.Empty, error)
	// 获取群信息忽略解散和删除 存在
	GetFullGroupInfo(context.Context, *GetFullGroupInfoReq) (*GetFullGroupInfoReply, error)
	// 获取群成员信息 存在
	MemberByIds(context.Context, *MemberByIdsReq) (*MemberByIdsReply, error)
	// 获取用户加入的群列表 存在
	GetJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListReply, error)
	// 以管理员或群主身份）获取群的加群申请 存在
	GetGroupApplicationList(context.Context, *GetGroupApplicationListReq) (*GetRecvGroupApplicationListReply, error)
	// 以管理员或群主身份）获取未处理的加群请求 存在
	GetUntreatedGroupApplicationList(context.Context, *GetUntreatedGroupApplicationListReq) (*GetRecvGroupApplicationListReply, error)
	// 获取用户自己的主动加群申请 存在
	GetUserReqGroupApplicationList(context.Context, *GetUserJoinGroupApplicationListReq) (*GetRecvGroupApplicationListReply, error)
	// 获取群成员 存在
	GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersReply, error)
	// 获取群信息hash值 存在
	GetGroupAbstractInfo(context.Context, *GetGroupAbstractInfoReq) (*GetGroupAbstractInfoReply, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (UnimplementedGroupServer) CreateGroup(context.Context, *CrateGroupReq) (*CrateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServer) EditGroupProfile(context.Context, *EditGroupProfileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGroupProfile not implemented")
}
func (UnimplementedGroupServer) UpdateGroupSwitch(context.Context, *UpdateGroupSwitchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupSwitch not implemented")
}
func (UnimplementedGroupServer) MuteGroup(context.Context, *MuteGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGroup not implemented")
}
func (UnimplementedGroupServer) CancelMuteGroup(context.Context, *CancelMuteGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMuteGroup not implemented")
}
func (UnimplementedGroupServer) CancelMuteGroupMember(context.Context, *CancelMuteGroupMemberReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMuteGroupMember not implemented")
}
func (UnimplementedGroupServer) MuteGroupMember(context.Context, *MuteGroupMemberReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGroupMember not implemented")
}
func (UnimplementedGroupServer) GetGroupByCode(context.Context, *GetGroupByCodeReq) (*GetGroupByCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByCode not implemented")
}
func (UnimplementedGroupServer) DismissGroup(context.Context, *DismissGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissGroup not implemented")
}
func (UnimplementedGroupServer) DismissGroupNotice(context.Context, *DismissGroupNoticeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissGroupNotice not implemented")
}
func (UnimplementedGroupServer) ApplicationResponse(context.Context, *ApplicationResponseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationResponse not implemented")
}
func (UnimplementedGroupServer) JoinGroup(context.Context, *JoinGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupServer) InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserToGroup not implemented")
}
func (UnimplementedGroupServer) AddGroupAdmin(context.Context, *AddGroupAdminReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupAdmin not implemented")
}
func (UnimplementedGroupServer) TransferGroup(context.Context, *TransferGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGroup not implemented")
}
func (UnimplementedGroupServer) KickGroupMember(context.Context, *KickGroupMemberReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickGroupMember not implemented")
}
func (UnimplementedGroupServer) QuitGroup(context.Context, *QuitGroupReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroup not implemented")
}
func (UnimplementedGroupServer) CancelGroupManager(context.Context, *CancelGroupManagerReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelGroupManager not implemented")
}
func (UnimplementedGroupServer) BatchAddGroupAdmin(context.Context, *BatchAddGroupAdmReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddGroupAdmin not implemented")
}
func (UnimplementedGroupServer) BatchCancelGroupManager(context.Context, *BatchCancelGroupManagerReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCancelGroupManager not implemented")
}
func (UnimplementedGroupServer) GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedGroupServer) SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupMemberInfo not implemented")
}
func (UnimplementedGroupServer) GetFullGroupInfo(context.Context, *GetFullGroupInfoReq) (*GetFullGroupInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullGroupInfo not implemented")
}
func (UnimplementedGroupServer) MemberByIds(context.Context, *MemberByIdsReq) (*MemberByIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberByIds not implemented")
}
func (UnimplementedGroupServer) GetJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedGroupList not implemented")
}
func (UnimplementedGroupServer) GetGroupApplicationList(context.Context, *GetGroupApplicationListReq) (*GetRecvGroupApplicationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupApplicationList not implemented")
}
func (UnimplementedGroupServer) GetUntreatedGroupApplicationList(context.Context, *GetUntreatedGroupApplicationListReq) (*GetRecvGroupApplicationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUntreatedGroupApplicationList not implemented")
}
func (UnimplementedGroupServer) GetUserReqGroupApplicationList(context.Context, *GetUserJoinGroupApplicationListReq) (*GetRecvGroupApplicationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReqGroupApplicationList not implemented")
}
func (UnimplementedGroupServer) GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedGroupServer) GetGroupAbstractInfo(context.Context, *GetGroupAbstractInfoReq) (*GetGroupAbstractInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAbstractInfo not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CrateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditGroupProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGroupProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditGroupProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_EditGroupProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditGroupProfile(ctx, req.(*EditGroupProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_UpdateGroupSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupSwitch(ctx, req.(*UpdateGroupSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_MuteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteGroup(ctx, req.(*MuteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelMuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelMuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CancelMuteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelMuteGroup(ctx, req.(*CancelMuteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelMuteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelMuteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CancelMuteGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelMuteGroupMember(ctx, req.(*CancelMuteGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_MuteGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteGroupMember(ctx, req.(*MuteGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupByCode(ctx, req.(*GetGroupByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DismissGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DismissGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_DismissGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DismissGroup(ctx, req.(*DismissGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DismissGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissGroupNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DismissGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_DismissGroupNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DismissGroupNotice(ctx, req.(*DismissGroupNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_ApplicationResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ApplicationResponse(ctx, req.(*ApplicationResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_InviteUserToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteUserToGroup(ctx, req.(*InviteUserToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_AddGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).AddGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_AddGroupAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).AddGroupAdmin(ctx, req.(*AddGroupAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_TransferGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).TransferGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_TransferGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).TransferGroup(ctx, req.(*TransferGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_KickGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).KickGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_KickGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).KickGroupMember(ctx, req.(*KickGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_QuitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QuitGroup(ctx, req.(*QuitGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelGroupManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelGroupManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelGroupManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CancelGroupManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelGroupManager(ctx, req.(*CancelGroupManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_BatchAddGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddGroupAdmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).BatchAddGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_BatchAddGroupAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).BatchAddGroupAdmin(ctx, req.(*BatchAddGroupAdmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_BatchCancelGroupManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCancelGroupManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).BatchCancelGroupManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_BatchCancelGroupManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).BatchCancelGroupManager(ctx, req.(*BatchCancelGroupManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SetGroupMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, req.(*SetGroupMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetFullGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetFullGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetFullGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetFullGroupInfo(ctx, req.(*GetFullGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MemberByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MemberByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_MemberByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MemberByIds(ctx, req.(*MemberByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetJoinedGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedGroupList(ctx, req.(*GetJoinedGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupApplicationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupApplicationList(ctx, req.(*GetGroupApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUntreatedGroupApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUntreatedGroupApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUntreatedGroupApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetUntreatedGroupApplicationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUntreatedGroupApplicationList(ctx, req.(*GetUntreatedGroupApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUserReqGroupApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJoinGroupApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUserReqGroupApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetUserReqGroupApplicationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUserReqGroupApplicationList(ctx, req.(*GetUserJoinGroupApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembers(ctx, req.(*GetGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupAbstractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAbstractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupAbstractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupAbstractInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupAbstractInfo(ctx, req.(*GetGroupAbstractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.im_cloud.group.v2.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "EditGroupProfile",
			Handler:    _Group_EditGroupProfile_Handler,
		},
		{
			MethodName: "UpdateGroupSwitch",
			Handler:    _Group_UpdateGroupSwitch_Handler,
		},
		{
			MethodName: "MuteGroup",
			Handler:    _Group_MuteGroup_Handler,
		},
		{
			MethodName: "CancelMuteGroup",
			Handler:    _Group_CancelMuteGroup_Handler,
		},
		{
			MethodName: "CancelMuteGroupMember",
			Handler:    _Group_CancelMuteGroupMember_Handler,
		},
		{
			MethodName: "MuteGroupMember",
			Handler:    _Group_MuteGroupMember_Handler,
		},
		{
			MethodName: "GetGroupByCode",
			Handler:    _Group_GetGroupByCode_Handler,
		},
		{
			MethodName: "DismissGroup",
			Handler:    _Group_DismissGroup_Handler,
		},
		{
			MethodName: "DismissGroupNotice",
			Handler:    _Group_DismissGroupNotice_Handler,
		},
		{
			MethodName: "ApplicationResponse",
			Handler:    _Group_ApplicationResponse_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Group_JoinGroup_Handler,
		},
		{
			MethodName: "InviteUserToGroup",
			Handler:    _Group_InviteUserToGroup_Handler,
		},
		{
			MethodName: "AddGroupAdmin",
			Handler:    _Group_AddGroupAdmin_Handler,
		},
		{
			MethodName: "TransferGroup",
			Handler:    _Group_TransferGroup_Handler,
		},
		{
			MethodName: "KickGroupMember",
			Handler:    _Group_KickGroupMember_Handler,
		},
		{
			MethodName: "QuitGroup",
			Handler:    _Group_QuitGroup_Handler,
		},
		{
			MethodName: "CancelGroupManager",
			Handler:    _Group_CancelGroupManager_Handler,
		},
		{
			MethodName: "BatchAddGroupAdmin",
			Handler:    _Group_BatchAddGroupAdmin_Handler,
		},
		{
			MethodName: "BatchCancelGroupManager",
			Handler:    _Group_BatchCancelGroupManager_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _Group_GetGroupInfo_Handler,
		},
		{
			MethodName: "SetGroupMemberInfo",
			Handler:    _Group_SetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetFullGroupInfo",
			Handler:    _Group_GetFullGroupInfo_Handler,
		},
		{
			MethodName: "MemberByIds",
			Handler:    _Group_MemberByIds_Handler,
		},
		{
			MethodName: "GetJoinedGroupList",
			Handler:    _Group_GetJoinedGroupList_Handler,
		},
		{
			MethodName: "GetGroupApplicationList",
			Handler:    _Group_GetGroupApplicationList_Handler,
		},
		{
			MethodName: "GetUntreatedGroupApplicationList",
			Handler:    _Group_GetUntreatedGroupApplicationList_Handler,
		},
		{
			MethodName: "GetUserReqGroupApplicationList",
			Handler:    _Group_GetUserReqGroupApplicationList_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _Group_GetGroupMembers_Handler,
		},
		{
			MethodName: "getGroupAbstractInfo",
			Handler:    _Group_GetGroupAbstractInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im_cloud/group/v2/group.proto",
}
