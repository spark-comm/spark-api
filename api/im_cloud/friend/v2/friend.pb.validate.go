// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: im_cloud/friend/v2/friend.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddFriendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFriendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFriendReqMultiError, or
// nil if none found.
func (m *AddFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromUserID()) < 0 {
		err := AddFriendReqValidationError{
			field:  "FromUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToUserID()) < 0 {
		err := AddFriendReqValidationError{
			field:  "ToUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RemarkMsg

	// no validation rules for ReqMsg

	// no validation rules for Type

	// no validation rules for UserID

	// no validation rules for ExtraMsg

	if len(errors) > 0 {
		return AddFriendReqMultiError(errors)
	}

	return nil
}

// AddFriendReqMultiError is an error wrapping multiple validation errors
// returned by AddFriendReq.ValidateAll() if the designated constraints aren't met.
type AddFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFriendReqMultiError) AllErrors() []error { return m }

// AddFriendReqValidationError is the validation error returned by
// AddFriendReq.Validate if the designated constraints aren't met.
type AddFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFriendReqValidationError) ErrorName() string { return "AddFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFriendReqValidationError{}

// Validate checks the field values on ProcessFriendApplicationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessFriendApplicationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessFriendApplicationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessFriendApplicationReqMultiError, or nil if none found.
func (m *ProcessFriendApplicationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessFriendApplicationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromUserID()) < 0 {
		err := ProcessFriendApplicationReqValidationError{
			field:  "FromUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToUserID()) < 0 {
		err := ProcessFriendApplicationReqValidationError{
			field:  "ToUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HandleMsg

	// no validation rules for Flag

	// no validation rules for UserID

	// no validation rules for Platform

	if len(errors) > 0 {
		return ProcessFriendApplicationReqMultiError(errors)
	}

	return nil
}

// ProcessFriendApplicationReqMultiError is an error wrapping multiple
// validation errors returned by ProcessFriendApplicationReq.ValidateAll() if
// the designated constraints aren't met.
type ProcessFriendApplicationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessFriendApplicationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessFriendApplicationReqMultiError) AllErrors() []error { return m }

// ProcessFriendApplicationReqValidationError is the validation error returned
// by ProcessFriendApplicationReq.Validate if the designated constraints
// aren't met.
type ProcessFriendApplicationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessFriendApplicationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessFriendApplicationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessFriendApplicationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessFriendApplicationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessFriendApplicationReqValidationError) ErrorName() string {
	return "ProcessFriendApplicationReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessFriendApplicationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessFriendApplicationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessFriendApplicationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessFriendApplicationReqValidationError{}

// Validate checks the field values on DeleteFriendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendReqMultiError, or nil if none found.
func (m *DeleteFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromUserID()) < 0 {
		err := DeleteFriendReqValidationError{
			field:  "FromUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToUserID()) < 0 {
		err := DeleteFriendReqValidationError{
			field:  "ToUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return DeleteFriendReqMultiError(errors)
	}

	return nil
}

// DeleteFriendReqMultiError is an error wrapping multiple validation errors
// returned by DeleteFriendReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendReqMultiError) AllErrors() []error { return m }

// DeleteFriendReqValidationError is the validation error returned by
// DeleteFriendReq.Validate if the designated constraints aren't met.
type DeleteFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendReqValidationError) ErrorName() string { return "DeleteFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendReqValidationError{}

// Validate checks the field values on DeleteAllFriendsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllFriendsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllFriendsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllFriendsReqMultiError, or nil if none found.
func (m *DeleteAllFriendsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllFriendsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return DeleteAllFriendsReqMultiError(errors)
	}

	return nil
}

// DeleteAllFriendsReqMultiError is an error wrapping multiple validation
// errors returned by DeleteAllFriendsReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteAllFriendsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllFriendsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllFriendsReqMultiError) AllErrors() []error { return m }

// DeleteAllFriendsReqValidationError is the validation error returned by
// DeleteAllFriendsReq.Validate if the designated constraints aren't met.
type DeleteAllFriendsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllFriendsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllFriendsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllFriendsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllFriendsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllFriendsReqValidationError) ErrorName() string {
	return "DeleteAllFriendsReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllFriendsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllFriendsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllFriendsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllFriendsReqValidationError{}

// Validate checks the field values on SetFriendInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetFriendInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFriendInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFriendInfoReqMultiError, or nil if none found.
func (m *SetFriendInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFriendInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromUserID()) < 0 {
		err := SetFriendInfoReqValidationError{
			field:  "FromUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToUserID()) < 0 {
		err := SetFriendInfoReqValidationError{
			field:  "ToUserID",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) < 0 {
		err := SetFriendInfoReqValidationError{
			field:  "Remark",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BackgroundUrl

	// no validation rules for UserID

	if len(errors) > 0 {
		return SetFriendInfoReqMultiError(errors)
	}

	return nil
}

// SetFriendInfoReqMultiError is an error wrapping multiple validation errors
// returned by SetFriendInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SetFriendInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFriendInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFriendInfoReqMultiError) AllErrors() []error { return m }

// SetFriendInfoReqValidationError is the validation error returned by
// SetFriendInfoReq.Validate if the designated constraints aren't met.
type SetFriendInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFriendInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFriendInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFriendInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFriendInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFriendInfoReqValidationError) ErrorName() string { return "SetFriendInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SetFriendInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFriendInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFriendInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFriendInfoReqValidationError{}

// Validate checks the field values on ListFriendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFriendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFriendReqMultiError, or
// nil if none found.
func (m *ListFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	// no validation rules for UserID

	// no validation rules for Name

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListFriendReqMultiError(errors)
	}

	return nil
}

// ListFriendReqMultiError is an error wrapping multiple validation errors
// returned by ListFriendReq.ValidateAll() if the designated constraints
// aren't met.
type ListFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFriendReqMultiError) AllErrors() []error { return m }

// ListFriendReqValidationError is the validation error returned by
// ListFriendReq.Validate if the designated constraints aren't met.
type ListFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFriendReqValidationError) ErrorName() string { return "ListFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e ListFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFriendReqValidationError{}

// Validate checks the field values on ListFriendReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFriendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFriendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFriendReplyMultiError, or nil if none found.
func (m *ListFriendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFriendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFriendReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFriendReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFriendReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFriendReplyMultiError(errors)
	}

	return nil
}

// ListFriendReplyMultiError is an error wrapping multiple validation errors
// returned by ListFriendReply.ValidateAll() if the designated constraints
// aren't met.
type ListFriendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFriendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFriendReplyMultiError) AllErrors() []error { return m }

// ListFriendReplyValidationError is the validation error returned by
// ListFriendReply.Validate if the designated constraints aren't met.
type ListFriendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFriendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFriendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFriendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFriendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFriendReplyValidationError) ErrorName() string { return "ListFriendReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListFriendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFriendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFriendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFriendReplyValidationError{}

// Validate checks the field values on ListFriendApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFriendApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFriendApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFriendApplyReqMultiError, or nil if none found.
func (m *ListFriendApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFriendApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerID

	// no validation rules for Kind

	// no validation rules for UserID

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListFriendApplyReqMultiError(errors)
	}

	return nil
}

// ListFriendApplyReqMultiError is an error wrapping multiple validation errors
// returned by ListFriendApplyReq.ValidateAll() if the designated constraints
// aren't met.
type ListFriendApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFriendApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFriendApplyReqMultiError) AllErrors() []error { return m }

// ListFriendApplyReqValidationError is the validation error returned by
// ListFriendApplyReq.Validate if the designated constraints aren't met.
type ListFriendApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFriendApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFriendApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFriendApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFriendApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFriendApplyReqValidationError) ErrorName() string {
	return "ListFriendApplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListFriendApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFriendApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFriendApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFriendApplyReqValidationError{}

// Validate checks the field values on ListFriendApplyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFriendApplyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFriendApplyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFriendApplyReplyMultiError, or nil if none found.
func (m *ListFriendApplyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFriendApplyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFriendApplyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFriendApplyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFriendApplyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFriendApplyReplyMultiError(errors)
	}

	return nil
}

// ListFriendApplyReplyMultiError is an error wrapping multiple validation
// errors returned by ListFriendApplyReply.ValidateAll() if the designated
// constraints aren't met.
type ListFriendApplyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFriendApplyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFriendApplyReplyMultiError) AllErrors() []error { return m }

// ListFriendApplyReplyValidationError is the validation error returned by
// ListFriendApplyReply.Validate if the designated constraints aren't met.
type ListFriendApplyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFriendApplyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFriendApplyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFriendApplyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFriendApplyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFriendApplyReplyValidationError) ErrorName() string {
	return "ListFriendApplyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFriendApplyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFriendApplyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFriendApplyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFriendApplyReplyValidationError{}

// Validate checks the field values on BlackListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlackListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlackListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlackListReqMultiError, or
// nil if none found.
func (m *BlackListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BlackListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for FromUserID

	// no validation rules for UserID

	if len(errors) > 0 {
		return BlackListReqMultiError(errors)
	}

	return nil
}

// BlackListReqMultiError is an error wrapping multiple validation errors
// returned by BlackListReq.ValidateAll() if the designated constraints aren't met.
type BlackListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlackListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlackListReqMultiError) AllErrors() []error { return m }

// BlackListReqValidationError is the validation error returned by
// BlackListReq.Validate if the designated constraints aren't met.
type BlackListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlackListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlackListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlackListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlackListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlackListReqValidationError) ErrorName() string { return "BlackListReqValidationError" }

// Error satisfies the builtin error interface
func (e BlackListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlackListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlackListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlackListReqValidationError{}

// Validate checks the field values on BlackListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlackListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlackListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlackListReplyMultiError,
// or nil if none found.
func (m *BlackListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BlackListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlackListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlackListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlackListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BlackListReplyMultiError(errors)
	}

	return nil
}

// BlackListReplyMultiError is an error wrapping multiple validation errors
// returned by BlackListReply.ValidateAll() if the designated constraints
// aren't met.
type BlackListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlackListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlackListReplyMultiError) AllErrors() []error { return m }

// BlackListReplyValidationError is the validation error returned by
// BlackListReply.Validate if the designated constraints aren't met.
type BlackListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlackListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlackListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlackListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlackListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlackListReplyValidationError) ErrorName() string { return "BlackListReplyValidationError" }

// Error satisfies the builtin error interface
func (e BlackListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlackListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlackListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlackListReplyValidationError{}

// Validate checks the field values on GetFriendIDsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendIDsReqMultiError, or nil if none found.
func (m *GetFriendIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetFriendIDsReqMultiError(errors)
	}

	return nil
}

// GetFriendIDsReqMultiError is an error wrapping multiple validation errors
// returned by GetFriendIDsReq.ValidateAll() if the designated constraints
// aren't met.
type GetFriendIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendIDsReqMultiError) AllErrors() []error { return m }

// GetFriendIDsReqValidationError is the validation error returned by
// GetFriendIDsReq.Validate if the designated constraints aren't met.
type GetFriendIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendIDsReqValidationError) ErrorName() string { return "GetFriendIDsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFriendIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendIDsReqValidationError{}

// Validate checks the field values on GetFriendIDsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendIDsReplyMultiError, or nil if none found.
func (m *GetFriendIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendIDsReplyMultiError(errors)
	}

	return nil
}

// GetFriendIDsReplyMultiError is an error wrapping multiple validation errors
// returned by GetFriendIDsReply.ValidateAll() if the designated constraints
// aren't met.
type GetFriendIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendIDsReplyMultiError) AllErrors() []error { return m }

// GetFriendIDsReplyValidationError is the validation error returned by
// GetFriendIDsReply.Validate if the designated constraints aren't met.
type GetFriendIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendIDsReplyValidationError) ErrorName() string {
	return "GetFriendIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendIDsReplyValidationError{}

// Validate checks the field values on RemoveBlackListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveBlackListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBlackListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveBlackListReqMultiError, or nil if none found.
func (m *RemoveBlackListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBlackListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for ToUserID

	if len(errors) > 0 {
		return RemoveBlackListReqMultiError(errors)
	}

	return nil
}

// RemoveBlackListReqMultiError is an error wrapping multiple validation errors
// returned by RemoveBlackListReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveBlackListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBlackListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBlackListReqMultiError) AllErrors() []error { return m }

// RemoveBlackListReqValidationError is the validation error returned by
// RemoveBlackListReq.Validate if the designated constraints aren't met.
type RemoveBlackListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBlackListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBlackListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBlackListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBlackListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBlackListReqValidationError) ErrorName() string {
	return "RemoveBlackListReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBlackListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBlackListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBlackListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBlackListReqValidationError{}

// Validate checks the field values on IsFriendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFriendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFriendReqMultiError, or
// nil if none found.
func (m *IsFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for FromUserID

	if len(errors) > 0 {
		return IsFriendReqMultiError(errors)
	}

	return nil
}

// IsFriendReqMultiError is an error wrapping multiple validation errors
// returned by IsFriendReq.ValidateAll() if the designated constraints aren't met.
type IsFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFriendReqMultiError) AllErrors() []error { return m }

// IsFriendReqValidationError is the validation error returned by
// IsFriendReq.Validate if the designated constraints aren't met.
type IsFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFriendReqValidationError) ErrorName() string { return "IsFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e IsFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFriendReqValidationError{}

// Validate checks the field values on IsFriendReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFriendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFriendReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFriendReplyMultiError, or
// nil if none found.
func (m *IsFriendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFriendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsFriend

	if len(errors) > 0 {
		return IsFriendReplyMultiError(errors)
	}

	return nil
}

// IsFriendReplyMultiError is an error wrapping multiple validation errors
// returned by IsFriendReply.ValidateAll() if the designated constraints
// aren't met.
type IsFriendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFriendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFriendReplyMultiError) AllErrors() []error { return m }

// IsFriendReplyValidationError is the validation error returned by
// IsFriendReply.Validate if the designated constraints aren't met.
type IsFriendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFriendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFriendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFriendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFriendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFriendReplyValidationError) ErrorName() string { return "IsFriendReplyValidationError" }

// Error satisfies the builtin error interface
func (e IsFriendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFriendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFriendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFriendReplyValidationError{}

// Validate checks the field values on IsBlackReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsBlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsBlackReqMultiError, or
// nil if none found.
func (m *IsBlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsBlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for ToUserID

	if len(errors) > 0 {
		return IsBlackReqMultiError(errors)
	}

	return nil
}

// IsBlackReqMultiError is an error wrapping multiple validation errors
// returned by IsBlackReq.ValidateAll() if the designated constraints aren't met.
type IsBlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsBlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsBlackReqMultiError) AllErrors() []error { return m }

// IsBlackReqValidationError is the validation error returned by
// IsBlackReq.Validate if the designated constraints aren't met.
type IsBlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsBlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsBlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsBlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsBlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsBlackReqValidationError) ErrorName() string { return "IsBlackReqValidationError" }

// Error satisfies the builtin error interface
func (e IsBlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsBlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsBlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsBlackReqValidationError{}

// Validate checks the field values on IsBlackReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsBlackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsBlackReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsBlackReplyMultiError, or
// nil if none found.
func (m *IsBlackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IsBlackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsBlack

	if len(errors) > 0 {
		return IsBlackReplyMultiError(errors)
	}

	return nil
}

// IsBlackReplyMultiError is an error wrapping multiple validation errors
// returned by IsBlackReply.ValidateAll() if the designated constraints aren't met.
type IsBlackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsBlackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsBlackReplyMultiError) AllErrors() []error { return m }

// IsBlackReplyValidationError is the validation error returned by
// IsBlackReply.Validate if the designated constraints aren't met.
type IsBlackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsBlackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsBlackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsBlackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsBlackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsBlackReplyValidationError) ErrorName() string { return "IsBlackReplyValidationError" }

// Error satisfies the builtin error interface
func (e IsBlackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsBlackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsBlackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsBlackReplyValidationError{}

// Validate checks the field values on GetSendFriendsApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSendFriendsApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSendFriendsApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSendFriendsApplyReqMultiError, or nil if none found.
func (m *GetSendFriendsApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSendFriendsApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for UserID

	// no validation rules for HasHandled

	if len(errors) > 0 {
		return GetSendFriendsApplyReqMultiError(errors)
	}

	return nil
}

// GetSendFriendsApplyReqMultiError is an error wrapping multiple validation
// errors returned by GetSendFriendsApplyReq.ValidateAll() if the designated
// constraints aren't met.
type GetSendFriendsApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSendFriendsApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSendFriendsApplyReqMultiError) AllErrors() []error { return m }

// GetSendFriendsApplyReqValidationError is the validation error returned by
// GetSendFriendsApplyReq.Validate if the designated constraints aren't met.
type GetSendFriendsApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSendFriendsApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSendFriendsApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSendFriendsApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSendFriendsApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSendFriendsApplyReqValidationError) ErrorName() string {
	return "GetSendFriendsApplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSendFriendsApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSendFriendsApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSendFriendsApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSendFriendsApplyReqValidationError{}

// Validate checks the field values on GetSendFriendsApplyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSendFriendsApplyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSendFriendsApplyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSendFriendsApplyReplyMultiError, or nil if none found.
func (m *GetSendFriendsApplyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSendFriendsApplyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSendFriendsApplyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSendFriendsApplyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSendFriendsApplyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSendFriendsApplyReplyMultiError(errors)
	}

	return nil
}

// GetSendFriendsApplyReplyMultiError is an error wrapping multiple validation
// errors returned by GetSendFriendsApplyReply.ValidateAll() if the designated
// constraints aren't met.
type GetSendFriendsApplyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSendFriendsApplyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSendFriendsApplyReplyMultiError) AllErrors() []error { return m }

// GetSendFriendsApplyReplyValidationError is the validation error returned by
// GetSendFriendsApplyReply.Validate if the designated constraints aren't met.
type GetSendFriendsApplyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSendFriendsApplyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSendFriendsApplyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSendFriendsApplyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSendFriendsApplyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSendFriendsApplyReplyValidationError) ErrorName() string {
	return "GetSendFriendsApplyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSendFriendsApplyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSendFriendsApplyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSendFriendsApplyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSendFriendsApplyReplyValidationError{}

// Validate checks the field values on GetReceiveFriendsApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceiveFriendsApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceiveFriendsApplyReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceiveFriendsApplyReqMultiError, or nil if none found.
func (m *GetReceiveFriendsApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceiveFriendsApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for UserID

	// no validation rules for HasHandled

	if len(errors) > 0 {
		return GetReceiveFriendsApplyReqMultiError(errors)
	}

	return nil
}

// GetReceiveFriendsApplyReqMultiError is an error wrapping multiple validation
// errors returned by GetReceiveFriendsApplyReq.ValidateAll() if the
// designated constraints aren't met.
type GetReceiveFriendsApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceiveFriendsApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceiveFriendsApplyReqMultiError) AllErrors() []error { return m }

// GetReceiveFriendsApplyReqValidationError is the validation error returned by
// GetReceiveFriendsApplyReq.Validate if the designated constraints aren't met.
type GetReceiveFriendsApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiveFriendsApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiveFriendsApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiveFriendsApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiveFriendsApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiveFriendsApplyReqValidationError) ErrorName() string {
	return "GetReceiveFriendsApplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiveFriendsApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiveFriendsApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiveFriendsApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiveFriendsApplyReqValidationError{}

// Validate checks the field values on GetReceiveFriendsApplyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceiveFriendsApplyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceiveFriendsApplyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceiveFriendsApplyReplyMultiError, or nil if none found.
func (m *GetReceiveFriendsApplyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceiveFriendsApplyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReceiveFriendsApplyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReceiveFriendsApplyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReceiveFriendsApplyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReceiveFriendsApplyReplyMultiError(errors)
	}

	return nil
}

// GetReceiveFriendsApplyReplyMultiError is an error wrapping multiple
// validation errors returned by GetReceiveFriendsApplyReply.ValidateAll() if
// the designated constraints aren't met.
type GetReceiveFriendsApplyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceiveFriendsApplyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceiveFriendsApplyReplyMultiError) AllErrors() []error { return m }

// GetReceiveFriendsApplyReplyValidationError is the validation error returned
// by GetReceiveFriendsApplyReply.Validate if the designated constraints
// aren't met.
type GetReceiveFriendsApplyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiveFriendsApplyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiveFriendsApplyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiveFriendsApplyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiveFriendsApplyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiveFriendsApplyReplyValidationError) ErrorName() string {
	return "GetReceiveFriendsApplyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiveFriendsApplyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiveFriendsApplyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiveFriendsApplyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiveFriendsApplyReplyValidationError{}

// Validate checks the field values on GetUntreatedFriendsApplyReceiveReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUntreatedFriendsApplyReceiveReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUntreatedFriendsApplyReceiveReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUntreatedFriendsApplyReceiveReqMultiError, or nil if none found.
func (m *GetUntreatedFriendsApplyReceiveReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUntreatedFriendsApplyReceiveReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUntreatedFriendsApplyReceiveReqMultiError(errors)
	}

	return nil
}

// GetUntreatedFriendsApplyReceiveReqMultiError is an error wrapping multiple
// validation errors returned by
// GetUntreatedFriendsApplyReceiveReq.ValidateAll() if the designated
// constraints aren't met.
type GetUntreatedFriendsApplyReceiveReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUntreatedFriendsApplyReceiveReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUntreatedFriendsApplyReceiveReqMultiError) AllErrors() []error { return m }

// GetUntreatedFriendsApplyReceiveReqValidationError is the validation error
// returned by GetUntreatedFriendsApplyReceiveReq.Validate if the designated
// constraints aren't met.
type GetUntreatedFriendsApplyReceiveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUntreatedFriendsApplyReceiveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUntreatedFriendsApplyReceiveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUntreatedFriendsApplyReceiveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUntreatedFriendsApplyReceiveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUntreatedFriendsApplyReceiveReqValidationError) ErrorName() string {
	return "GetUntreatedFriendsApplyReceiveReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUntreatedFriendsApplyReceiveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUntreatedFriendsApplyReceiveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUntreatedFriendsApplyReceiveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUntreatedFriendsApplyReceiveReqValidationError{}

// Validate checks the field values on GetUntreatedFriendsApplyReceiveReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUntreatedFriendsApplyReceiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUntreatedFriendsApplyReceiveReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUntreatedFriendsApplyReceiveReplyMultiError, or nil if none found.
func (m *GetUntreatedFriendsApplyReceiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUntreatedFriendsApplyReceiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUntreatedFriendsApplyReceiveReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUntreatedFriendsApplyReceiveReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUntreatedFriendsApplyReceiveReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUntreatedFriendsApplyReceiveReplyMultiError(errors)
	}

	return nil
}

// GetUntreatedFriendsApplyReceiveReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetUntreatedFriendsApplyReceiveReply.ValidateAll() if the designated
// constraints aren't met.
type GetUntreatedFriendsApplyReceiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUntreatedFriendsApplyReceiveReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUntreatedFriendsApplyReceiveReplyMultiError) AllErrors() []error { return m }

// GetUntreatedFriendsApplyReceiveReplyValidationError is the validation error
// returned by GetUntreatedFriendsApplyReceiveReply.Validate if the designated
// constraints aren't met.
type GetUntreatedFriendsApplyReceiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUntreatedFriendsApplyReceiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUntreatedFriendsApplyReceiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUntreatedFriendsApplyReceiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUntreatedFriendsApplyReceiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUntreatedFriendsApplyReceiveReplyValidationError) ErrorName() string {
	return "GetUntreatedFriendsApplyReceiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUntreatedFriendsApplyReceiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUntreatedFriendsApplyReceiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUntreatedFriendsApplyReceiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUntreatedFriendsApplyReceiveReplyValidationError{}

// Validate checks the field values on AddBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBlackReqMultiError, or
// nil if none found.
func (m *AddBlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for BlackUserID

	if len(errors) > 0 {
		return AddBlackReqMultiError(errors)
	}

	return nil
}

// AddBlackReqMultiError is an error wrapping multiple validation errors
// returned by AddBlackReq.ValidateAll() if the designated constraints aren't met.
type AddBlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBlackReqMultiError) AllErrors() []error { return m }

// AddBlackReqValidationError is the validation error returned by
// AddBlackReq.Validate if the designated constraints aren't met.
type AddBlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBlackReqValidationError) ErrorName() string { return "AddBlackReqValidationError" }

// Error satisfies the builtin error interface
func (e AddBlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBlackReqValidationError{}

// Validate checks the field values on ListFriendByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFriendByIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFriendByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFriendByIdsReqMultiError, or nil if none found.
func (m *ListFriendByIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFriendByIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return ListFriendByIdsReqMultiError(errors)
	}

	return nil
}

// ListFriendByIdsReqMultiError is an error wrapping multiple validation errors
// returned by ListFriendByIdsReq.ValidateAll() if the designated constraints
// aren't met.
type ListFriendByIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFriendByIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFriendByIdsReqMultiError) AllErrors() []error { return m }

// ListFriendByIdsReqValidationError is the validation error returned by
// ListFriendByIdsReq.Validate if the designated constraints aren't met.
type ListFriendByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFriendByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFriendByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFriendByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFriendByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFriendByIdsReqValidationError) ErrorName() string {
	return "ListFriendByIdsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListFriendByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFriendByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFriendByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFriendByIdsReqValidationError{}

// Validate checks the field values on ListFriendByIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFriendByIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFriendByIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFriendByIdsReplyMultiError, or nil if none found.
func (m *ListFriendByIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFriendByIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFriendByIdsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFriendByIdsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFriendByIdsReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFriendByIdsReplyMultiError(errors)
	}

	return nil
}

// ListFriendByIdsReplyMultiError is an error wrapping multiple validation
// errors returned by ListFriendByIdsReply.ValidateAll() if the designated
// constraints aren't met.
type ListFriendByIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFriendByIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFriendByIdsReplyMultiError) AllErrors() []error { return m }

// ListFriendByIdsReplyValidationError is the validation error returned by
// ListFriendByIdsReply.Validate if the designated constraints aren't met.
type ListFriendByIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFriendByIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFriendByIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFriendByIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFriendByIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFriendByIdsReplyValidationError) ErrorName() string {
	return "ListFriendByIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFriendByIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFriendByIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFriendByIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFriendByIdsReplyValidationError{}

// Validate checks the field values on GetFriendRequestByApplicantReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendRequestByApplicantReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestByApplicantReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFriendRequestByApplicantReqMultiError, or nil if none found.
func (m *GetFriendRequestByApplicantReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestByApplicantReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for ToUserID

	if len(errors) > 0 {
		return GetFriendRequestByApplicantReqMultiError(errors)
	}

	return nil
}

// GetFriendRequestByApplicantReqMultiError is an error wrapping multiple
// validation errors returned by GetFriendRequestByApplicantReq.ValidateAll()
// if the designated constraints aren't met.
type GetFriendRequestByApplicantReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestByApplicantReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestByApplicantReqMultiError) AllErrors() []error { return m }

// GetFriendRequestByApplicantReqValidationError is the validation error
// returned by GetFriendRequestByApplicantReq.Validate if the designated
// constraints aren't met.
type GetFriendRequestByApplicantReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestByApplicantReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestByApplicantReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestByApplicantReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestByApplicantReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestByApplicantReqValidationError) ErrorName() string {
	return "GetFriendRequestByApplicantReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestByApplicantReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestByApplicantReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestByApplicantReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestByApplicantReqValidationError{}

// Validate checks the field values on GetFriendRequestByApplicantReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetFriendRequestByApplicantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendRequestByApplicantReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFriendRequestByApplicantReplyMultiError, or nil if none found.
func (m *GetFriendRequestByApplicantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendRequestByApplicantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriendRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendRequestByApplicantReplyValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendRequestByApplicantReplyValidationError{
					field:  "FriendRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendRequestByApplicantReplyValidationError{
				field:  "FriendRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendRequestByApplicantReplyMultiError(errors)
	}

	return nil
}

// GetFriendRequestByApplicantReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetFriendRequestByApplicantReply.ValidateAll() if the designated
// constraints aren't met.
type GetFriendRequestByApplicantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendRequestByApplicantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendRequestByApplicantReplyMultiError) AllErrors() []error { return m }

// GetFriendRequestByApplicantReplyValidationError is the validation error
// returned by GetFriendRequestByApplicantReply.Validate if the designated
// constraints aren't met.
type GetFriendRequestByApplicantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendRequestByApplicantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendRequestByApplicantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendRequestByApplicantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendRequestByApplicantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendRequestByApplicantReplyValidationError) ErrorName() string {
	return "GetFriendRequestByApplicantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendRequestByApplicantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendRequestByApplicantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendRequestByApplicantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendRequestByApplicantReplyValidationError{}
