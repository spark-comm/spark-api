// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: api/im_cloud/friend/v2/friend_error.proto

// 定义包名

package v2

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FriendErrorReason int32

const (
	// 获取好友信息失败
	FriendErrorReason_GET_FRIEND_INFO_FAIL FriendErrorReason = 0
	// 删除好友数据失败
	FriendErrorReason_DEL_FRIEND_RELATION_DATA_FAIL FriendErrorReason = 1
	// 创建好友关系数据失败
	FriendErrorReason_CREATE_FRIEND_DATA_FAIL FriendErrorReason = 2
	// 更新好友关系信息失败
	FriendErrorReason_UPDATE_FRIEND_RELATION_DATA_FAIl FriendErrorReason = 3
	// 删除好友缓存数据失败
	FriendErrorReason_DEL_FRIEND_CACHE_DATA_FAIl FriendErrorReason = 4
	// 获取好友请求数据失败
	FriendErrorReason_GET_FRIEND_APPLY_DATA_FAIL FriendErrorReason = 5
	// 获取用户黑名单数据失败
	FriendErrorReason_GET_USER_BLACKLISTINFO_FAIL FriendErrorReason = 6
	// 移除用户黑名单数据失败
	FriendErrorReason_REMOVE_USER_BLACK_DATA_FAIL FriendErrorReason = 7
	// 创建黑名单数据失败
	FriendErrorReason_CREATE_BLACK_DATA_FAIL FriendErrorReason = 8
	// 获取可邀请好友数据失败
	FriendErrorReason_GET_INVITABLE_FRIEND_DATA_FAIl FriendErrorReason = 9
	// 获取好友申请请求数据失败
	FriendErrorReason_GET_FRIEND_APPLY_REQUEST_DATA_FAIL FriendErrorReason = 10
	// 获取所有的id信息失败
	FriendErrorReason_GET_ALL_FRIEND_ID_FAIL FriendErrorReason = 11
	// 根据好友id获取好友信息失败
	FriendErrorReason_GET_FRIEND_BY_IDS_FAIL FriendErrorReason = 12
	// 获取所有未处理的数据
	FriendErrorReason_GET_UNTREATED_FRIENDS_APPLY_RECEIVE_FAIL FriendErrorReason = 13
	// 好友不存在
	FriendErrorReason_FRIEND_NOT_EXIST FriendErrorReason = 14
	// 关闭名片添加
	FriendErrorReason_USER_CLOSE_CARD_ADD FriendErrorReason = 15
	// 关闭群添加
	FriendErrorReason_USER_CLOSE_GROUP_ADD FriendErrorReason = 16
	// 关闭id添加
	FriendErrorReason_USER_CLOSE_ID_ADD FriendErrorReason = 17
	// 关闭手机号添加
	FriendErrorReason_USER_CLOSE_PHONE_ADD FriendErrorReason = 18
	// 关闭二维码添加
	FriendErrorReason_USER_CLOSE_RQ_CODE_ADD FriendErrorReason = 19
	// 未知的来源类型
	FriendErrorReason_UNKNOWN_SOURCE_TYPE FriendErrorReason = 20
	// 根据被拉黑人id获取被拉黑人信息失败
	FriendErrorReason_GET_FRIEND_BLACKLIST_BY_ID_FAIL FriendErrorReason = 21
	// 根据申请人id获取申请人信息失败
	FriendErrorReason_FRIEND_APPLY_LIST_BY_ID_FAIL FriendErrorReason = 22
	// 根据好友id获取主动发出去的好友申请信息
	FriendErrorReason_GET_APPLY_FRIENDS_FROM_BY_ID_FAIL FriendErrorReason = 23
)

// Enum value maps for FriendErrorReason.
var (
	FriendErrorReason_name = map[int32]string{
		0:  "GET_FRIEND_INFO_FAIL",
		1:  "DEL_FRIEND_RELATION_DATA_FAIL",
		2:  "CREATE_FRIEND_DATA_FAIL",
		3:  "UPDATE_FRIEND_RELATION_DATA_FAIl",
		4:  "DEL_FRIEND_CACHE_DATA_FAIl",
		5:  "GET_FRIEND_APPLY_DATA_FAIL",
		6:  "GET_USER_BLACKLISTINFO_FAIL",
		7:  "REMOVE_USER_BLACK_DATA_FAIL",
		8:  "CREATE_BLACK_DATA_FAIL",
		9:  "GET_INVITABLE_FRIEND_DATA_FAIl",
		10: "GET_FRIEND_APPLY_REQUEST_DATA_FAIL",
		11: "GET_ALL_FRIEND_ID_FAIL",
		12: "GET_FRIEND_BY_IDS_FAIL",
		13: "GET_UNTREATED_FRIENDS_APPLY_RECEIVE_FAIL",
		14: "FRIEND_NOT_EXIST",
		15: "USER_CLOSE_CARD_ADD",
		16: "USER_CLOSE_GROUP_ADD",
		17: "USER_CLOSE_ID_ADD",
		18: "USER_CLOSE_PHONE_ADD",
		19: "USER_CLOSE_RQ_CODE_ADD",
		20: "UNKNOWN_SOURCE_TYPE",
		21: "GET_FRIEND_BLACKLIST_BY_ID_FAIL",
		22: "FRIEND_APPLY_LIST_BY_ID_FAIL",
		23: "GET_APPLY_FRIENDS_FROM_BY_ID_FAIL",
	}
	FriendErrorReason_value = map[string]int32{
		"GET_FRIEND_INFO_FAIL":                     0,
		"DEL_FRIEND_RELATION_DATA_FAIL":            1,
		"CREATE_FRIEND_DATA_FAIL":                  2,
		"UPDATE_FRIEND_RELATION_DATA_FAIl":         3,
		"DEL_FRIEND_CACHE_DATA_FAIl":               4,
		"GET_FRIEND_APPLY_DATA_FAIL":               5,
		"GET_USER_BLACKLISTINFO_FAIL":              6,
		"REMOVE_USER_BLACK_DATA_FAIL":              7,
		"CREATE_BLACK_DATA_FAIL":                   8,
		"GET_INVITABLE_FRIEND_DATA_FAIl":           9,
		"GET_FRIEND_APPLY_REQUEST_DATA_FAIL":       10,
		"GET_ALL_FRIEND_ID_FAIL":                   11,
		"GET_FRIEND_BY_IDS_FAIL":                   12,
		"GET_UNTREATED_FRIENDS_APPLY_RECEIVE_FAIL": 13,
		"FRIEND_NOT_EXIST":                         14,
		"USER_CLOSE_CARD_ADD":                      15,
		"USER_CLOSE_GROUP_ADD":                     16,
		"USER_CLOSE_ID_ADD":                        17,
		"USER_CLOSE_PHONE_ADD":                     18,
		"USER_CLOSE_RQ_CODE_ADD":                   19,
		"UNKNOWN_SOURCE_TYPE":                      20,
		"GET_FRIEND_BLACKLIST_BY_ID_FAIL":          21,
		"FRIEND_APPLY_LIST_BY_ID_FAIL":             22,
		"GET_APPLY_FRIENDS_FROM_BY_ID_FAIL":        23,
	}
)

func (x FriendErrorReason) Enum() *FriendErrorReason {
	p := new(FriendErrorReason)
	*p = x
	return p
}

func (x FriendErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_im_cloud_friend_v2_friend_error_proto_enumTypes[0].Descriptor()
}

func (FriendErrorReason) Type() protoreflect.EnumType {
	return &file_api_im_cloud_friend_v2_friend_error_proto_enumTypes[0]
}

func (x FriendErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendErrorReason.Descriptor instead.
func (FriendErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_api_im_cloud_friend_v2_friend_error_proto_rawDescGZIP(), []int{0}
}

var File_api_im_cloud_friend_v2_friend_error_proto protoreflect.FileDescriptor

var file_api_im_cloud_friend_v2_friend_error_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x32, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x96, 0x07, 0x0a, 0x11, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45, 0x9a, 0x03, 0x12, 0x27,
	0x0a, 0x1d, 0x44, 0x45, 0x4c, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x1a, 0x04, 0xa8, 0x45, 0xa4, 0x03, 0x12, 0x21, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0xb8, 0x03, 0x12, 0x2a, 0x0a, 0x20, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x6c, 0x10, 0x03,
	0x1a, 0x04, 0xa8, 0x45, 0xbd, 0x03, 0x12, 0x24, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x5f, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x46, 0x41, 0x49, 0x6c, 0x10, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0xa5, 0x03, 0x12, 0x24, 0x0a, 0x1a,
	0x47, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45,
	0x9f, 0x03, 0x12, 0x25, 0x0a, 0x1b, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0xa1, 0x03, 0x12, 0x25, 0x0a, 0x1b, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0xa9, 0x03,
	0x12, 0x20, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x1a, 0x04, 0xa8, 0x45,
	0xc1, 0x03, 0x12, 0x28, 0x0a, 0x1e, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x46, 0x41, 0x49, 0x6c, 0x10, 0x09, 0x1a, 0x04, 0xa8, 0x45, 0xa2, 0x03, 0x12, 0x2c, 0x0a, 0x22,
	0x47, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x0a, 0x1a, 0x04, 0xa8, 0x45, 0xb1, 0x03, 0x12, 0x20, 0x0a, 0x16, 0x47, 0x45,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x1a, 0x04, 0xa8, 0x45, 0xb1, 0x03, 0x12, 0x20, 0x0a, 0x16,
	0x47, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0c, 0x1a, 0x04, 0xa8, 0x45, 0xb1, 0x03, 0x12, 0x32,
	0x0a, 0x28, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0d, 0x1a, 0x04, 0xa8, 0x45,
	0xb1, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x0e, 0x1a, 0x04, 0xa8, 0x45, 0xc2, 0x03, 0x12, 0x1d,
	0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0f, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a,
	0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x10, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1b, 0x0a,
	0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0x11, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x14, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0x12, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x20, 0x0a, 0x16, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x51, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x13, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1d, 0x0a, 0x13,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x14, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x29, 0x0a, 0x1f, 0x47,
	0x45, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x15,
	0x1a, 0x04, 0xa8, 0x45, 0xb1, 0x03, 0x12, 0x26, 0x0a, 0x1c, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x16, 0x1a, 0x04, 0xa8, 0x45, 0xb1, 0x03, 0x12, 0x2b,
	0x0a, 0x21, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x49, 0x45,
	0x4e, 0x44, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x17, 0x1a, 0x04, 0xa8, 0x45, 0xb1, 0x03, 0x1a, 0x04, 0xa0, 0x45, 0xf4,
	0x03, 0x42, 0x55, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_im_cloud_friend_v2_friend_error_proto_rawDescOnce sync.Once
	file_api_im_cloud_friend_v2_friend_error_proto_rawDescData = file_api_im_cloud_friend_v2_friend_error_proto_rawDesc
)

func file_api_im_cloud_friend_v2_friend_error_proto_rawDescGZIP() []byte {
	file_api_im_cloud_friend_v2_friend_error_proto_rawDescOnce.Do(func() {
		file_api_im_cloud_friend_v2_friend_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_im_cloud_friend_v2_friend_error_proto_rawDescData)
	})
	return file_api_im_cloud_friend_v2_friend_error_proto_rawDescData
}

var file_api_im_cloud_friend_v2_friend_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_im_cloud_friend_v2_friend_error_proto_goTypes = []interface{}{
	(FriendErrorReason)(0), // 0: api.im_cloud.friend.v2.FriendErrorReason
}
var file_api_im_cloud_friend_v2_friend_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_im_cloud_friend_v2_friend_error_proto_init() }
func file_api_im_cloud_friend_v2_friend_error_proto_init() {
	if File_api_im_cloud_friend_v2_friend_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_im_cloud_friend_v2_friend_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_im_cloud_friend_v2_friend_error_proto_goTypes,
		DependencyIndexes: file_api_im_cloud_friend_v2_friend_error_proto_depIdxs,
		EnumInfos:         file_api_im_cloud_friend_v2_friend_error_proto_enumTypes,
	}.Build()
	File_api_im_cloud_friend_v2_friend_error_proto = out.File
	file_api_im_cloud_friend_v2_friend_error_proto_rawDesc = nil
	file_api_im_cloud_friend_v2_friend_error_proto_goTypes = nil
	file_api_im_cloud_friend_v2_friend_error_proto_depIdxs = nil
}
