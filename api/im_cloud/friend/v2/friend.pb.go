// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: im_cloud/friend/v2/friend.proto

package v2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v2 "github.com/spark-comm/spark-api/api/common/model/friend/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加好友 存在
// -------------------------------------------
type AddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发起方
	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	// 接收方
	ToUserID string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
	// 备注
	RemarkMsg string `protobuf:"bytes,3,opt,name=remarkMsg,proto3" json:"remarkMsg,omitempty"`
	// 添加好友的请求验证
	ReqMsg string `protobuf:"bytes,4,opt,name=reqMsg,proto3" json:"reqMsg,omitempty"`
	// 来源类型(可选) 1:名片2:群3:id4:手机号5:二维码
	Type     int64  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	UserID   string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	ExtraMsg string `protobuf:"bytes,7,opt,name=extraMsg,proto3" json:"extraMsg,omitempty"`
}

func (x *AddFriendReq) Reset() {
	*x = AddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendReq) ProtoMessage() {}

func (x *AddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendReq.ProtoReflect.Descriptor instead.
func (*AddFriendReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{0}
}

func (x *AddFriendReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *AddFriendReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *AddFriendReq) GetRemarkMsg() string {
	if x != nil {
		return x.RemarkMsg
	}
	return ""
}

func (x *AddFriendReq) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *AddFriendReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddFriendReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddFriendReq) GetExtraMsg() string {
	if x != nil {
		return x.ExtraMsg
	}
	return ""
}

// 处理好友请求 存在
// -------------------------------------------
type ProcessFriendApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发起方
	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	// 接收方
	ToUserID string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
	// 处理消息
	HandleMsg string `protobuf:"bytes,3,opt,name=handleMsg,proto3" json:"handleMsg,omitempty"`
	// 1为同意, 2为拒绝
	Flag     int64  `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	UserID   string `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
	Platform string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *ProcessFriendApplicationReq) Reset() {
	*x = ProcessFriendApplicationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessFriendApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessFriendApplicationReq) ProtoMessage() {}

func (x *ProcessFriendApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessFriendApplicationReq.ProtoReflect.Descriptor instead.
func (*ProcessFriendApplicationReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessFriendApplicationReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *ProcessFriendApplicationReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *ProcessFriendApplicationReq) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

func (x *ProcessFriendApplicationReq) GetFlag() int64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *ProcessFriendApplicationReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ProcessFriendApplicationReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// 删除好友 存在
// -------------------------------------------
type DeleteFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发起方
	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	// 接收方
	ToUserID string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DeleteFriendReq) Reset() {
	*x = DeleteFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendReq) ProtoMessage() {}

func (x *DeleteFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendReq.ProtoReflect.Descriptor instead.
func (*DeleteFriendReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteFriendReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *DeleteFriendReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *DeleteFriendReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 设置好友资料 存在
// -------------------------------------------
type SetFriendInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发起方
	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	// 接收方
	ToUserID string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
	// 好友备注
	Remark        string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	BackgroundUrl string `protobuf:"bytes,4,opt,name=backgroundUrl,proto3" json:"backgroundUrl,omitempty"` //背景图片
	UserID        string `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *SetFriendInfoReq) Reset() {
	*x = SetFriendInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFriendInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFriendInfoReq) ProtoMessage() {}

func (x *SetFriendInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFriendInfoReq.ProtoReflect.Descriptor instead.
func (*SetFriendInfoReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{3}
}

func (x *SetFriendInfoReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *SetFriendInfoReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *SetFriendInfoReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SetFriendInfoReq) GetBackgroundUrl() string {
	if x != nil {
		return x.BackgroundUrl
	}
	return ""
}

func (x *SetFriendInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 获取好友列表 存在
// -------------------------------------------
type ListFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Code     string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PageNum  int64  `protobuf:"varint,5,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int64  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListFriendReq) Reset() {
	*x = ListFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendReq) ProtoMessage() {}

func (x *ListFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendReq.ProtoReflect.Descriptor instead.
func (*ListFriendReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{4}
}

func (x *ListFriendReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ListFriendReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ListFriendReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListFriendReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListFriendReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListFriendReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListFriendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.FriendInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListFriendReply) Reset() {
	*x = ListFriendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendReply) ProtoMessage() {}

func (x *ListFriendReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendReply.ProtoReflect.Descriptor instead.
func (*ListFriendReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{5}
}

func (x *ListFriendReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFriendReply) GetList() []*v2.FriendInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 好友请求列表 存在
// -------------------------------------------
type ListFriendApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerID  string `protobuf:"bytes,1,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	Kind     int64  `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	PageNum  int64  `protobuf:"varint,4,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int64  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListFriendApplyReq) Reset() {
	*x = ListFriendApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendApplyReq) ProtoMessage() {}

func (x *ListFriendApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendApplyReq.ProtoReflect.Descriptor instead.
func (*ListFriendApplyReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{6}
}

func (x *ListFriendApplyReq) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *ListFriendApplyReq) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ListFriendApplyReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListFriendApplyReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListFriendApplyReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListFriendApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.FriendRequest `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListFriendApplyReply) Reset() {
	*x = ListFriendApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendApplyReply) ProtoMessage() {}

func (x *ListFriendApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendApplyReply.ProtoReflect.Descriptor instead.
func (*ListFriendApplyReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{7}
}

func (x *ListFriendApplyReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFriendApplyReply) GetList() []*v2.FriendRequest {
	if x != nil {
		return x.List
	}
	return nil
}

// 黑名单列表 存在
// -------------------------------------------
type BlackListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum    int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	FromUserID string `protobuf:"bytes,3,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	UserID     string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *BlackListReq) Reset() {
	*x = BlackListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackListReq) ProtoMessage() {}

func (x *BlackListReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackListReq.ProtoReflect.Descriptor instead.
func (*BlackListReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{8}
}

func (x *BlackListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *BlackListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *BlackListReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *BlackListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type BlackListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.BlackInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BlackListReply) Reset() {
	*x = BlackListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackListReply) ProtoMessage() {}

func (x *BlackListReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackListReply.ProtoReflect.Descriptor instead.
func (*BlackListReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{9}
}

func (x *BlackListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BlackListReply) GetList() []*v2.BlackInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取用户的所有好友ID 存在
// -------------------------------------------
type GetFriendIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetFriendIDsReq) Reset() {
	*x = GetFriendIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendIDsReq) ProtoMessage() {}

func (x *GetFriendIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendIDsReq.ProtoReflect.Descriptor instead.
func (*GetFriendIDsReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{10}
}

func (x *GetFriendIDsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetFriendIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetFriendIDsReply) Reset() {
	*x = GetFriendIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendIDsReply) ProtoMessage() {}

func (x *GetFriendIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendIDsReply.ProtoReflect.Descriptor instead.
func (*GetFriendIDsReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{11}
}

func (x *GetFriendIDsReply) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 移除黑名单 存在
// -------------------------------------------
type RemoveBlackListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
}

func (x *RemoveBlackListReq) Reset() {
	*x = RemoveBlackListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBlackListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBlackListReq) ProtoMessage() {}

func (x *RemoveBlackListReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBlackListReq.ProtoReflect.Descriptor instead.
func (*RemoveBlackListReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveBlackListReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *RemoveBlackListReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

// 是否好友 存在
// -------------------------------------------
type IsFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	FromUserID  string `protobuf:"bytes,2,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
}

func (x *IsFriendReq) Reset() {
	*x = IsFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFriendReq) ProtoMessage() {}

func (x *IsFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFriendReq.ProtoReflect.Descriptor instead.
func (*IsFriendReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{13}
}

func (x *IsFriendReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IsFriendReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

type IsFriendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFriend bool `protobuf:"varint,1,opt,name=isFriend,proto3" json:"isFriend,omitempty"`
}

func (x *IsFriendReply) Reset() {
	*x = IsFriendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFriendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFriendReply) ProtoMessage() {}

func (x *IsFriendReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFriendReply.ProtoReflect.Descriptor instead.
func (*IsFriendReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{14}
}

func (x *IsFriendReply) GetIsFriend() bool {
	if x != nil {
		return x.IsFriend
	}
	return false
}

// 是否在黑名单中 存在
// -------------------------------------------
type IsBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	ToUserID    string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
}

func (x *IsBlackReq) Reset() {
	*x = IsBlackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBlackReq) ProtoMessage() {}

func (x *IsBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBlackReq.ProtoReflect.Descriptor instead.
func (*IsBlackReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{15}
}

func (x *IsBlackReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IsBlackReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

type IsBlackReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlack bool `protobuf:"varint,1,opt,name=isBlack,proto3" json:"isBlack,omitempty"`
}

func (x *IsBlackReply) Reset() {
	*x = IsBlackReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBlackReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBlackReply) ProtoMessage() {}

func (x *IsBlackReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBlackReply.ProtoReflect.Descriptor instead.
func (*IsBlackReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{16}
}

func (x *IsBlackReply) GetIsBlack() bool {
	if x != nil {
		return x.IsBlack
	}
	return false
}

// 获取自己主动发出的请求 存在
// -------------------------------------------
type GetSendFriendsApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum    int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	HasHandled int32  `protobuf:"varint,4,opt,name=hasHandled,proto3" json:"hasHandled,omitempty"` // 是否包含已处理请求 0-不包含 1-包含
}

func (x *GetSendFriendsApplyReq) Reset() {
	*x = GetSendFriendsApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSendFriendsApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSendFriendsApplyReq) ProtoMessage() {}

func (x *GetSendFriendsApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSendFriendsApplyReq.ProtoReflect.Descriptor instead.
func (*GetSendFriendsApplyReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{17}
}

func (x *GetSendFriendsApplyReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSendFriendsApplyReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetSendFriendsApplyReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetSendFriendsApplyReq) GetHasHandled() int32 {
	if x != nil {
		return x.HasHandled
	}
	return 0
}

type GetSendFriendsApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.FriendRequest `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetSendFriendsApplyReply) Reset() {
	*x = GetSendFriendsApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSendFriendsApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSendFriendsApplyReply) ProtoMessage() {}

func (x *GetSendFriendsApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSendFriendsApplyReply.ProtoReflect.Descriptor instead.
func (*GetSendFriendsApplyReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{18}
}

func (x *GetSendFriendsApplyReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSendFriendsApplyReply) GetList() []*v2.FriendRequest {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取收到的请求 存在
// -------------------------------------------
type GetReceiveFriendsApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   int64  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNum    int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	HasHandled int32  `protobuf:"varint,4,opt,name=hasHandled,proto3" json:"hasHandled,omitempty"` // 是否包含已处理请求 0-不包含 1-包含
}

func (x *GetReceiveFriendsApplyReq) Reset() {
	*x = GetReceiveFriendsApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceiveFriendsApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiveFriendsApplyReq) ProtoMessage() {}

func (x *GetReceiveFriendsApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiveFriendsApplyReq.ProtoReflect.Descriptor instead.
func (*GetReceiveFriendsApplyReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{19}
}

func (x *GetReceiveFriendsApplyReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetReceiveFriendsApplyReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetReceiveFriendsApplyReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetReceiveFriendsApplyReq) GetHasHandled() int32 {
	if x != nil {
		return x.HasHandled
	}
	return 0
}

type GetReceiveFriendsApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.FriendRequest `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetReceiveFriendsApplyReply) Reset() {
	*x = GetReceiveFriendsApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceiveFriendsApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceiveFriendsApplyReply) ProtoMessage() {}

func (x *GetReceiveFriendsApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceiveFriendsApplyReply.ProtoReflect.Descriptor instead.
func (*GetReceiveFriendsApplyReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{20}
}

func (x *GetReceiveFriendsApplyReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetReceiveFriendsApplyReply) GetList() []*v2.FriendRequest {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取所有未处理的好友请求 存在
// -------------------------------------------
type GetUntreatedFriendsApplyReceiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	PageNum  int64  `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetUntreatedFriendsApplyReceiveReq) Reset() {
	*x = GetUntreatedFriendsApplyReceiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUntreatedFriendsApplyReceiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUntreatedFriendsApplyReceiveReq) ProtoMessage() {}

func (x *GetUntreatedFriendsApplyReceiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUntreatedFriendsApplyReceiveReq.ProtoReflect.Descriptor instead.
func (*GetUntreatedFriendsApplyReceiveReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{21}
}

func (x *GetUntreatedFriendsApplyReceiveReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUntreatedFriendsApplyReceiveReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetUntreatedFriendsApplyReceiveReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetUntreatedFriendsApplyReceiveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*v2.FriendRequest `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUntreatedFriendsApplyReceiveReply) Reset() {
	*x = GetUntreatedFriendsApplyReceiveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUntreatedFriendsApplyReceiveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUntreatedFriendsApplyReceiveReply) ProtoMessage() {}

func (x *GetUntreatedFriendsApplyReceiveReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUntreatedFriendsApplyReceiveReply.ProtoReflect.Descriptor instead.
func (*GetUntreatedFriendsApplyReceiveReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{22}
}

func (x *GetUntreatedFriendsApplyReceiveReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUntreatedFriendsApplyReceiveReply) GetList() []*v2.FriendRequest {
	if x != nil {
		return x.List
	}
	return nil
}

// 加入黑名单 存在
// -------------------------------------------
type AddBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"` //用户ID
	BlackUserID string `protobuf:"bytes,2,opt,name=blackUserID,proto3" json:"blackUserID,omitempty"` //加入黑名单的用户ID
}

func (x *AddBlackReq) Reset() {
	*x = AddBlackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlackReq) ProtoMessage() {}

func (x *AddBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlackReq.ProtoReflect.Descriptor instead.
func (*AddBlackReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{23}
}

func (x *AddBlackReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *AddBlackReq) GetBlackUserID() string {
	if x != nil {
		return x.BlackUserID
	}
	return ""
}

// 根据id获取好友信息 存在
// -------------------------------------------
type ListFriendByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`       //用户id
	FriendIds []string `protobuf:"bytes,2,rep,name=friendIds,proto3" json:"friendIds,omitempty"` //好友id列表
}

func (x *ListFriendByIdsReq) Reset() {
	*x = ListFriendByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendByIdsReq) ProtoMessage() {}

func (x *ListFriendByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendByIdsReq.ProtoReflect.Descriptor instead.
func (*ListFriendByIdsReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{24}
}

func (x *ListFriendByIdsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListFriendByIdsReq) GetFriendIds() []string {
	if x != nil {
		return x.FriendIds
	}
	return nil
}

type ListFriendByIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*v2.FriendInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //好友信息
}

func (x *ListFriendByIdsReply) Reset() {
	*x = ListFriendByIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendByIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendByIdsReply) ProtoMessage() {}

func (x *ListFriendByIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendByIdsReply.ProtoReflect.Descriptor instead.
func (*ListFriendByIdsReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{25}
}

func (x *ListFriendByIdsReply) GetList() []*v2.FriendInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 根据申请和背申请人获取好友请求 存在
// -------------------------------------------
type GetFriendRequestByApplicantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"` //发起者
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`     //接受者
}

func (x *GetFriendRequestByApplicantReq) Reset() {
	*x = GetFriendRequestByApplicantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendRequestByApplicantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestByApplicantReq) ProtoMessage() {}

func (x *GetFriendRequestByApplicantReq) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestByApplicantReq.ProtoReflect.Descriptor instead.
func (*GetFriendRequestByApplicantReq) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{26}
}

func (x *GetFriendRequestByApplicantReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *GetFriendRequestByApplicantReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

type GetFriendRequestByApplicantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRequest *v2.FriendRequest `protobuf:"bytes,1,opt,name=friendRequest,proto3" json:"friendRequest,omitempty"` //好友请求
}

func (x *GetFriendRequestByApplicantReply) Reset() {
	*x = GetFriendRequestByApplicantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendRequestByApplicantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestByApplicantReply) ProtoMessage() {}

func (x *GetFriendRequestByApplicantReply) ProtoReflect() protoreflect.Message {
	mi := &file_im_cloud_friend_v2_friend_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestByApplicantReply.ProtoReflect.Descriptor instead.
func (*GetFriendRequestByApplicantReply) Descriptor() ([]byte, []int) {
	return file_im_cloud_friend_v2_friend_proto_rawDescGZIP(), []int{27}
}

func (x *GetFriendRequestByApplicantReply) GetFriendRequest() *v2.FriendRequest {
	if x != nil {
		return x.FriendRequest
	}
	return nil
}

var File_im_cloud_friend_v2_friend_proto protoreflect.FileDescriptor

var file_im_cloud_friend_v2_friend_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d,
	0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d,
	0x73, 0x67, 0x22, 0xd1, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x74,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x77, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x08, 0x74,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xbf, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x63, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x0c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x61, 0x0a, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x25, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x0b, 0x49, 0x73, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x0d, 0x49, 0x73,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x0a, 0x49, 0x73, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x28, 0x0a, 0x0c, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x22, 0x86, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x22, 0x72, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7b, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xd0,
	0x0d, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x5c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x6b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x0f,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x09, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x44, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64,
	0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x53, 0x0a, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x80,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x8f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x12,
	0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x55, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_im_cloud_friend_v2_friend_proto_rawDescOnce sync.Once
	file_im_cloud_friend_v2_friend_proto_rawDescData = file_im_cloud_friend_v2_friend_proto_rawDesc
)

func file_im_cloud_friend_v2_friend_proto_rawDescGZIP() []byte {
	file_im_cloud_friend_v2_friend_proto_rawDescOnce.Do(func() {
		file_im_cloud_friend_v2_friend_proto_rawDescData = protoimpl.X.CompressGZIP(file_im_cloud_friend_v2_friend_proto_rawDescData)
	})
	return file_im_cloud_friend_v2_friend_proto_rawDescData
}

var file_im_cloud_friend_v2_friend_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_im_cloud_friend_v2_friend_proto_goTypes = []interface{}{
	(*AddFriendReq)(nil),                         // 0: api.im_cloud.friend.v2.AddFriendReq
	(*ProcessFriendApplicationReq)(nil),          // 1: api.im_cloud.friend.v2.ProcessFriendApplicationReq
	(*DeleteFriendReq)(nil),                      // 2: api.im_cloud.friend.v2.DeleteFriendReq
	(*SetFriendInfoReq)(nil),                     // 3: api.im_cloud.friend.v2.SetFriendInfoReq
	(*ListFriendReq)(nil),                        // 4: api.im_cloud.friend.v2.ListFriendReq
	(*ListFriendReply)(nil),                      // 5: api.im_cloud.friend.v2.ListFriendReply
	(*ListFriendApplyReq)(nil),                   // 6: api.im_cloud.friend.v2.ListFriendApplyReq
	(*ListFriendApplyReply)(nil),                 // 7: api.im_cloud.friend.v2.ListFriendApplyReply
	(*BlackListReq)(nil),                         // 8: api.im_cloud.friend.v2.BlackListReq
	(*BlackListReply)(nil),                       // 9: api.im_cloud.friend.v2.BlackListReply
	(*GetFriendIDsReq)(nil),                      // 10: api.im_cloud.friend.v2.GetFriendIDsReq
	(*GetFriendIDsReply)(nil),                    // 11: api.im_cloud.friend.v2.GetFriendIDsReply
	(*RemoveBlackListReq)(nil),                   // 12: api.im_cloud.friend.v2.RemoveBlackListReq
	(*IsFriendReq)(nil),                          // 13: api.im_cloud.friend.v2.IsFriendReq
	(*IsFriendReply)(nil),                        // 14: api.im_cloud.friend.v2.IsFriendReply
	(*IsBlackReq)(nil),                           // 15: api.im_cloud.friend.v2.IsBlackReq
	(*IsBlackReply)(nil),                         // 16: api.im_cloud.friend.v2.IsBlackReply
	(*GetSendFriendsApplyReq)(nil),               // 17: api.im_cloud.friend.v2.GetSendFriendsApplyReq
	(*GetSendFriendsApplyReply)(nil),             // 18: api.im_cloud.friend.v2.GetSendFriendsApplyReply
	(*GetReceiveFriendsApplyReq)(nil),            // 19: api.im_cloud.friend.v2.GetReceiveFriendsApplyReq
	(*GetReceiveFriendsApplyReply)(nil),          // 20: api.im_cloud.friend.v2.GetReceiveFriendsApplyReply
	(*GetUntreatedFriendsApplyReceiveReq)(nil),   // 21: api.im_cloud.friend.v2.GetUntreatedFriendsApplyReceiveReq
	(*GetUntreatedFriendsApplyReceiveReply)(nil), // 22: api.im_cloud.friend.v2.GetUntreatedFriendsApplyReceiveReply
	(*AddBlackReq)(nil),                          // 23: api.im_cloud.friend.v2.AddBlackReq
	(*ListFriendByIdsReq)(nil),                   // 24: api.im_cloud.friend.v2.ListFriendByIdsReq
	(*ListFriendByIdsReply)(nil),                 // 25: api.im_cloud.friend.v2.ListFriendByIdsReply
	(*GetFriendRequestByApplicantReq)(nil),       // 26: api.im_cloud.friend.v2.GetFriendRequestByApplicantReq
	(*GetFriendRequestByApplicantReply)(nil),     // 27: api.im_cloud.friend.v2.GetFriendRequestByApplicantReply
	(*v2.FriendInfo)(nil),                        // 28: api.common.model.friend.v2.FriendInfo
	(*v2.FriendRequest)(nil),                     // 29: api.common.model.friend.v2.FriendRequest
	(*v2.BlackInfo)(nil),                         // 30: api.common.model.friend.v2.BlackInfo
	(*emptypb.Empty)(nil),                        // 31: google.protobuf.Empty
}
var file_im_cloud_friend_v2_friend_proto_depIdxs = []int32{
	28, // 0: api.im_cloud.friend.v2.ListFriendReply.list:type_name -> api.common.model.friend.v2.FriendInfo
	29, // 1: api.im_cloud.friend.v2.ListFriendApplyReply.list:type_name -> api.common.model.friend.v2.FriendRequest
	30, // 2: api.im_cloud.friend.v2.BlackListReply.list:type_name -> api.common.model.friend.v2.BlackInfo
	29, // 3: api.im_cloud.friend.v2.GetSendFriendsApplyReply.list:type_name -> api.common.model.friend.v2.FriendRequest
	29, // 4: api.im_cloud.friend.v2.GetReceiveFriendsApplyReply.list:type_name -> api.common.model.friend.v2.FriendRequest
	29, // 5: api.im_cloud.friend.v2.GetUntreatedFriendsApplyReceiveReply.list:type_name -> api.common.model.friend.v2.FriendRequest
	28, // 6: api.im_cloud.friend.v2.ListFriendByIdsReply.list:type_name -> api.common.model.friend.v2.FriendInfo
	29, // 7: api.im_cloud.friend.v2.GetFriendRequestByApplicantReply.friendRequest:type_name -> api.common.model.friend.v2.FriendRequest
	0,  // 8: api.im_cloud.friend.v2.Friend.AddFriend:input_type -> api.im_cloud.friend.v2.AddFriendReq
	1,  // 9: api.im_cloud.friend.v2.Friend.ProcessFriendApplication:input_type -> api.im_cloud.friend.v2.ProcessFriendApplicationReq
	2,  // 10: api.im_cloud.friend.v2.Friend.DeleteFriend:input_type -> api.im_cloud.friend.v2.DeleteFriendReq
	3,  // 11: api.im_cloud.friend.v2.Friend.SetFriendInfo:input_type -> api.im_cloud.friend.v2.SetFriendInfoReq
	4,  // 12: api.im_cloud.friend.v2.Friend.ListFriend:input_type -> api.im_cloud.friend.v2.ListFriendReq
	24, // 13: api.im_cloud.friend.v2.Friend.ListFriendByIds:input_type -> api.im_cloud.friend.v2.ListFriendByIdsReq
	6,  // 14: api.im_cloud.friend.v2.Friend.FriendApplyList:input_type -> api.im_cloud.friend.v2.ListFriendApplyReq
	8,  // 15: api.im_cloud.friend.v2.Friend.Blacklist:input_type -> api.im_cloud.friend.v2.BlackListReq
	10, // 16: api.im_cloud.friend.v2.Friend.GetFriendIDs:input_type -> api.im_cloud.friend.v2.GetFriendIDsReq
	23, // 17: api.im_cloud.friend.v2.Friend.AddBlack:input_type -> api.im_cloud.friend.v2.AddBlackReq
	12, // 18: api.im_cloud.friend.v2.Friend.RemoveBlackList:input_type -> api.im_cloud.friend.v2.RemoveBlackListReq
	13, // 19: api.im_cloud.friend.v2.Friend.IsFriend:input_type -> api.im_cloud.friend.v2.IsFriendReq
	15, // 20: api.im_cloud.friend.v2.Friend.IsBlack:input_type -> api.im_cloud.friend.v2.IsBlackReq
	17, // 21: api.im_cloud.friend.v2.Friend.GetSendFriendsApply:input_type -> api.im_cloud.friend.v2.GetSendFriendsApplyReq
	19, // 22: api.im_cloud.friend.v2.Friend.GetReceiveFriendsApply:input_type -> api.im_cloud.friend.v2.GetReceiveFriendsApplyReq
	21, // 23: api.im_cloud.friend.v2.Friend.GetUntreatedFriendsApplyReceive:input_type -> api.im_cloud.friend.v2.GetUntreatedFriendsApplyReceiveReq
	26, // 24: api.im_cloud.friend.v2.Friend.GetFriendRequestByApplicant:input_type -> api.im_cloud.friend.v2.GetFriendRequestByApplicantReq
	31, // 25: api.im_cloud.friend.v2.Friend.AddFriend:output_type -> google.protobuf.Empty
	31, // 26: api.im_cloud.friend.v2.Friend.ProcessFriendApplication:output_type -> google.protobuf.Empty
	31, // 27: api.im_cloud.friend.v2.Friend.DeleteFriend:output_type -> google.protobuf.Empty
	31, // 28: api.im_cloud.friend.v2.Friend.SetFriendInfo:output_type -> google.protobuf.Empty
	5,  // 29: api.im_cloud.friend.v2.Friend.ListFriend:output_type -> api.im_cloud.friend.v2.ListFriendReply
	25, // 30: api.im_cloud.friend.v2.Friend.ListFriendByIds:output_type -> api.im_cloud.friend.v2.ListFriendByIdsReply
	7,  // 31: api.im_cloud.friend.v2.Friend.FriendApplyList:output_type -> api.im_cloud.friend.v2.ListFriendApplyReply
	9,  // 32: api.im_cloud.friend.v2.Friend.Blacklist:output_type -> api.im_cloud.friend.v2.BlackListReply
	11, // 33: api.im_cloud.friend.v2.Friend.GetFriendIDs:output_type -> api.im_cloud.friend.v2.GetFriendIDsReply
	31, // 34: api.im_cloud.friend.v2.Friend.AddBlack:output_type -> google.protobuf.Empty
	31, // 35: api.im_cloud.friend.v2.Friend.RemoveBlackList:output_type -> google.protobuf.Empty
	14, // 36: api.im_cloud.friend.v2.Friend.IsFriend:output_type -> api.im_cloud.friend.v2.IsFriendReply
	16, // 37: api.im_cloud.friend.v2.Friend.IsBlack:output_type -> api.im_cloud.friend.v2.IsBlackReply
	18, // 38: api.im_cloud.friend.v2.Friend.GetSendFriendsApply:output_type -> api.im_cloud.friend.v2.GetSendFriendsApplyReply
	20, // 39: api.im_cloud.friend.v2.Friend.GetReceiveFriendsApply:output_type -> api.im_cloud.friend.v2.GetReceiveFriendsApplyReply
	22, // 40: api.im_cloud.friend.v2.Friend.GetUntreatedFriendsApplyReceive:output_type -> api.im_cloud.friend.v2.GetUntreatedFriendsApplyReceiveReply
	27, // 41: api.im_cloud.friend.v2.Friend.GetFriendRequestByApplicant:output_type -> api.im_cloud.friend.v2.GetFriendRequestByApplicantReply
	25, // [25:42] is the sub-list for method output_type
	8,  // [8:25] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_im_cloud_friend_v2_friend_proto_init() }
func file_im_cloud_friend_v2_friend_proto_init() {
	if File_im_cloud_friend_v2_friend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_im_cloud_friend_v2_friend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessFriendApplicationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFriendInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBlackListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFriendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBlackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBlackReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSendFriendsApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSendFriendsApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceiveFriendsApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceiveFriendsApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUntreatedFriendsApplyReceiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUntreatedFriendsApplyReceiveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBlackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendByIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendRequestByApplicantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_cloud_friend_v2_friend_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendRequestByApplicantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_im_cloud_friend_v2_friend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_im_cloud_friend_v2_friend_proto_goTypes,
		DependencyIndexes: file_im_cloud_friend_v2_friend_proto_depIdxs,
		MessageInfos:      file_im_cloud_friend_v2_friend_proto_msgTypes,
	}.Build()
	File_im_cloud_friend_v2_friend_proto = out.File
	file_im_cloud_friend_v2_friend_proto_rawDesc = nil
	file_im_cloud_friend_v2_friend_proto_goTypes = nil
	file_im_cloud_friend_v2_friend_proto_depIdxs = nil
}
