// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: im_cloud/friend/v2/friend.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Friend_AddFriend_FullMethodName                       = "/api.im_cloud.friend.v2.Friend/AddFriend"
	Friend_ProcessFriendApplication_FullMethodName        = "/api.im_cloud.friend.v2.Friend/ProcessFriendApplication"
	Friend_DeleteFriend_FullMethodName                    = "/api.im_cloud.friend.v2.Friend/DeleteFriend"
	Friend_DeleteAllFriends_FullMethodName                = "/api.im_cloud.friend.v2.Friend/DeleteAllFriends"
	Friend_SetFriendInfo_FullMethodName                   = "/api.im_cloud.friend.v2.Friend/SetFriendInfo"
	Friend_ListFriend_FullMethodName                      = "/api.im_cloud.friend.v2.Friend/ListFriend"
	Friend_ListFriendByIds_FullMethodName                 = "/api.im_cloud.friend.v2.Friend/ListFriendByIds"
	Friend_FriendApplyList_FullMethodName                 = "/api.im_cloud.friend.v2.Friend/FriendApplyList"
	Friend_Blacklist_FullMethodName                       = "/api.im_cloud.friend.v2.Friend/Blacklist"
	Friend_GetFriendIDs_FullMethodName                    = "/api.im_cloud.friend.v2.Friend/GetFriendIDs"
	Friend_AddBlack_FullMethodName                        = "/api.im_cloud.friend.v2.Friend/AddBlack"
	Friend_RemoveBlackList_FullMethodName                 = "/api.im_cloud.friend.v2.Friend/RemoveBlackList"
	Friend_IsFriend_FullMethodName                        = "/api.im_cloud.friend.v2.Friend/IsFriend"
	Friend_IsBlack_FullMethodName                         = "/api.im_cloud.friend.v2.Friend/IsBlack"
	Friend_GetSendFriendsApply_FullMethodName             = "/api.im_cloud.friend.v2.Friend/GetSendFriendsApply"
	Friend_GetReceiveFriendsApply_FullMethodName          = "/api.im_cloud.friend.v2.Friend/GetReceiveFriendsApply"
	Friend_GetUntreatedFriendsApplyReceive_FullMethodName = "/api.im_cloud.friend.v2.Friend/GetUntreatedFriendsApplyReceive"
	Friend_GetFriendRequestByApplicant_FullMethodName     = "/api.im_cloud.friend.v2.Friend/GetFriendRequestByApplicant"
)

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendClient interface {
	// 添加好友 存在
	AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 同意或拒绝好友请求 存在
	ProcessFriendApplication(ctx context.Context, in *ProcessFriendApplicationReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除好友 存在
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 单方面删除用户所有好友
	DeleteAllFriends(ctx context.Context, in *DeleteAllFriendsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置好友资料 存在
	SetFriendInfo(ctx context.Context, in *SetFriendInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 好友列表  存在
	ListFriend(ctx context.Context, in *ListFriendReq, opts ...grpc.CallOption) (*ListFriendReply, error)
	// 根据好友id获取最新好友数据 存在
	ListFriendByIds(ctx context.Context, in *ListFriendByIdsReq, opts ...grpc.CallOption) (*ListFriendByIdsReply, error)
	// 申请列表 存在
	FriendApplyList(ctx context.Context, in *ListFriendApplyReq, opts ...grpc.CallOption) (*ListFriendApplyReply, error)
	// 黑名单列表 存在
	Blacklist(ctx context.Context, in *BlackListReq, opts ...grpc.CallOption) (*BlackListReply, error)
	// 获取用户所有的好友id  存在
	GetFriendIDs(ctx context.Context, in *GetFriendIDsReq, opts ...grpc.CallOption) (*GetFriendIDsReply, error)
	// 添加黑名单 存在
	AddBlack(ctx context.Context, in *AddBlackReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 移除黑名单 存在
	RemoveBlackList(ctx context.Context, in *RemoveBlackListReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 判断是否好友 存在
	IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendReply, error)
	// 判断是否在在黑名单中 存在
	IsBlack(ctx context.Context, in *IsBlackReq, opts ...grpc.CallOption) (*IsBlackReply, error)
	// 获取主动发出去的好友申请列表 存在
	GetSendFriendsApply(ctx context.Context, in *GetSendFriendsApplyReq, opts ...grpc.CallOption) (*GetSendFriendsApplyReply, error)
	// 获取收到的好友申请列表 存在
	GetReceiveFriendsApply(ctx context.Context, in *GetReceiveFriendsApplyReq, opts ...grpc.CallOption) (*GetReceiveFriendsApplyReply, error)
	// 获取收到的未处理的好友请求  存在
	GetUntreatedFriendsApplyReceive(ctx context.Context, in *GetUntreatedFriendsApplyReceiveReq, opts ...grpc.CallOption) (*GetUntreatedFriendsApplyReceiveReply, error)
	// 根据申请人和被申请人获取请求数据  存在
	GetFriendRequestByApplicant(ctx context.Context, in *GetFriendRequestByApplicantReq, opts ...grpc.CallOption) (*GetFriendRequestByApplicantReply, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_AddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ProcessFriendApplication(ctx context.Context, in *ProcessFriendApplicationReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_ProcessFriendApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteAllFriends(ctx context.Context, in *DeleteAllFriendsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_DeleteAllFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) SetFriendInfo(ctx context.Context, in *SetFriendInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_SetFriendInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ListFriend(ctx context.Context, in *ListFriendReq, opts ...grpc.CallOption) (*ListFriendReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFriendReply)
	err := c.cc.Invoke(ctx, Friend_ListFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ListFriendByIds(ctx context.Context, in *ListFriendByIdsReq, opts ...grpc.CallOption) (*ListFriendByIdsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFriendByIdsReply)
	err := c.cc.Invoke(ctx, Friend_ListFriendByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) FriendApplyList(ctx context.Context, in *ListFriendApplyReq, opts ...grpc.CallOption) (*ListFriendApplyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFriendApplyReply)
	err := c.cc.Invoke(ctx, Friend_FriendApplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) Blacklist(ctx context.Context, in *BlackListReq, opts ...grpc.CallOption) (*BlackListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlackListReply)
	err := c.cc.Invoke(ctx, Friend_Blacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendIDs(ctx context.Context, in *GetFriendIDsReq, opts ...grpc.CallOption) (*GetFriendIDsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendIDsReply)
	err := c.cc.Invoke(ctx, Friend_GetFriendIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) AddBlack(ctx context.Context, in *AddBlackReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_AddBlack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) RemoveBlackList(ctx context.Context, in *RemoveBlackListReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Friend_RemoveBlackList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsFriendReply)
	err := c.cc.Invoke(ctx, Friend_IsFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsBlack(ctx context.Context, in *IsBlackReq, opts ...grpc.CallOption) (*IsBlackReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsBlackReply)
	err := c.cc.Invoke(ctx, Friend_IsBlack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetSendFriendsApply(ctx context.Context, in *GetSendFriendsApplyReq, opts ...grpc.CallOption) (*GetSendFriendsApplyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSendFriendsApplyReply)
	err := c.cc.Invoke(ctx, Friend_GetSendFriendsApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetReceiveFriendsApply(ctx context.Context, in *GetReceiveFriendsApplyReq, opts ...grpc.CallOption) (*GetReceiveFriendsApplyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiveFriendsApplyReply)
	err := c.cc.Invoke(ctx, Friend_GetReceiveFriendsApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetUntreatedFriendsApplyReceive(ctx context.Context, in *GetUntreatedFriendsApplyReceiveReq, opts ...grpc.CallOption) (*GetUntreatedFriendsApplyReceiveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUntreatedFriendsApplyReceiveReply)
	err := c.cc.Invoke(ctx, Friend_GetUntreatedFriendsApplyReceive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendRequestByApplicant(ctx context.Context, in *GetFriendRequestByApplicantReq, opts ...grpc.CallOption) (*GetFriendRequestByApplicantReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendRequestByApplicantReply)
	err := c.cc.Invoke(ctx, Friend_GetFriendRequestByApplicant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
// All implementations must embed UnimplementedFriendServer
// for forward compatibility
type FriendServer interface {
	// 添加好友 存在
	AddFriend(context.Context, *AddFriendReq) (*emptypb.Empty, error)
	// 同意或拒绝好友请求 存在
	ProcessFriendApplication(context.Context, *ProcessFriendApplicationReq) (*emptypb.Empty, error)
	// 删除好友 存在
	DeleteFriend(context.Context, *DeleteFriendReq) (*emptypb.Empty, error)
	// 单方面删除用户所有好友
	DeleteAllFriends(context.Context, *DeleteAllFriendsReq) (*emptypb.Empty, error)
	// 设置好友资料 存在
	SetFriendInfo(context.Context, *SetFriendInfoReq) (*emptypb.Empty, error)
	// 好友列表  存在
	ListFriend(context.Context, *ListFriendReq) (*ListFriendReply, error)
	// 根据好友id获取最新好友数据 存在
	ListFriendByIds(context.Context, *ListFriendByIdsReq) (*ListFriendByIdsReply, error)
	// 申请列表 存在
	FriendApplyList(context.Context, *ListFriendApplyReq) (*ListFriendApplyReply, error)
	// 黑名单列表 存在
	Blacklist(context.Context, *BlackListReq) (*BlackListReply, error)
	// 获取用户所有的好友id  存在
	GetFriendIDs(context.Context, *GetFriendIDsReq) (*GetFriendIDsReply, error)
	// 添加黑名单 存在
	AddBlack(context.Context, *AddBlackReq) (*emptypb.Empty, error)
	// 移除黑名单 存在
	RemoveBlackList(context.Context, *RemoveBlackListReq) (*emptypb.Empty, error)
	// 判断是否好友 存在
	IsFriend(context.Context, *IsFriendReq) (*IsFriendReply, error)
	// 判断是否在在黑名单中 存在
	IsBlack(context.Context, *IsBlackReq) (*IsBlackReply, error)
	// 获取主动发出去的好友申请列表 存在
	GetSendFriendsApply(context.Context, *GetSendFriendsApplyReq) (*GetSendFriendsApplyReply, error)
	// 获取收到的好友申请列表 存在
	GetReceiveFriendsApply(context.Context, *GetReceiveFriendsApplyReq) (*GetReceiveFriendsApplyReply, error)
	// 获取收到的未处理的好友请求  存在
	GetUntreatedFriendsApplyReceive(context.Context, *GetUntreatedFriendsApplyReceiveReq) (*GetUntreatedFriendsApplyReceiveReply, error)
	// 根据申请人和被申请人获取请求数据  存在
	GetFriendRequestByApplicant(context.Context, *GetFriendRequestByApplicantReq) (*GetFriendRequestByApplicantReply, error)
	mustEmbedUnimplementedFriendServer()
}

// UnimplementedFriendServer must be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (UnimplementedFriendServer) AddFriend(context.Context, *AddFriendReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedFriendServer) ProcessFriendApplication(context.Context, *ProcessFriendApplicationReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFriendApplication not implemented")
}
func (UnimplementedFriendServer) DeleteFriend(context.Context, *DeleteFriendReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendServer) DeleteAllFriends(context.Context, *DeleteAllFriendsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllFriends not implemented")
}
func (UnimplementedFriendServer) SetFriendInfo(context.Context, *SetFriendInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriendInfo not implemented")
}
func (UnimplementedFriendServer) ListFriend(context.Context, *ListFriendReq) (*ListFriendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriend not implemented")
}
func (UnimplementedFriendServer) ListFriendByIds(context.Context, *ListFriendByIdsReq) (*ListFriendByIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriendByIds not implemented")
}
func (UnimplementedFriendServer) FriendApplyList(context.Context, *ListFriendApplyReq) (*ListFriendApplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendApplyList not implemented")
}
func (UnimplementedFriendServer) Blacklist(context.Context, *BlackListReq) (*BlackListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blacklist not implemented")
}
func (UnimplementedFriendServer) GetFriendIDs(context.Context, *GetFriendIDsReq) (*GetFriendIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendIDs not implemented")
}
func (UnimplementedFriendServer) AddBlack(context.Context, *AddBlackReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlack not implemented")
}
func (UnimplementedFriendServer) RemoveBlackList(context.Context, *RemoveBlackListReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlackList not implemented")
}
func (UnimplementedFriendServer) IsFriend(context.Context, *IsFriendReq) (*IsFriendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriend not implemented")
}
func (UnimplementedFriendServer) IsBlack(context.Context, *IsBlackReq) (*IsBlackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBlack not implemented")
}
func (UnimplementedFriendServer) GetSendFriendsApply(context.Context, *GetSendFriendsApplyReq) (*GetSendFriendsApplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendFriendsApply not implemented")
}
func (UnimplementedFriendServer) GetReceiveFriendsApply(context.Context, *GetReceiveFriendsApplyReq) (*GetReceiveFriendsApplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiveFriendsApply not implemented")
}
func (UnimplementedFriendServer) GetUntreatedFriendsApplyReceive(context.Context, *GetUntreatedFriendsApplyReceiveReq) (*GetUntreatedFriendsApplyReceiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUntreatedFriendsApplyReceive not implemented")
}
func (UnimplementedFriendServer) GetFriendRequestByApplicant(context.Context, *GetFriendRequestByApplicantReq) (*GetFriendRequestByApplicantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequestByApplicant not implemented")
}
func (UnimplementedFriendServer) mustEmbedUnimplementedFriendServer() {}

// UnsafeFriendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServer will
// result in compilation errors.
type UnsafeFriendServer interface {
	mustEmbedUnimplementedFriendServer()
}

func RegisterFriendServer(s grpc.ServiceRegistrar, srv FriendServer) {
	s.RegisterService(&Friend_ServiceDesc, srv)
}

func _Friend_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddFriend(ctx, req.(*AddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ProcessFriendApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFriendApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ProcessFriendApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ProcessFriendApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ProcessFriendApplication(ctx, req.(*ProcessFriendApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteAllFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteAllFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_DeleteAllFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteAllFriends(ctx, req.(*DeleteAllFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_SetFriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).SetFriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_SetFriendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).SetFriendInfo(ctx, req.(*SetFriendInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ListFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ListFriend(ctx, req.(*ListFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ListFriendByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ListFriendByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ListFriendByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ListFriendByIds(ctx, req.(*ListFriendByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_FriendApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).FriendApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_FriendApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).FriendApplyList(ctx, req.(*ListFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_Blacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).Blacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_Blacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).Blacklist(ctx, req.(*BlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendIDs(ctx, req.(*GetFriendIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_AddBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_AddBlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddBlack(ctx, req.(*AddBlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_RemoveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).RemoveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_RemoveBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).RemoveBlackList(ctx, req.(*RemoveBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_IsFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsFriend(ctx, req.(*IsFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_IsBlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsBlack(ctx, req.(*IsBlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetSendFriendsApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendFriendsApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetSendFriendsApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetSendFriendsApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetSendFriendsApply(ctx, req.(*GetSendFriendsApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetReceiveFriendsApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiveFriendsApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetReceiveFriendsApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetReceiveFriendsApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetReceiveFriendsApply(ctx, req.(*GetReceiveFriendsApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetUntreatedFriendsApplyReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUntreatedFriendsApplyReceiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetUntreatedFriendsApplyReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetUntreatedFriendsApplyReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetUntreatedFriendsApplyReceive(ctx, req.(*GetUntreatedFriendsApplyReceiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendRequestByApplicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestByApplicantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendRequestByApplicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendRequestByApplicant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendRequestByApplicant(ctx, req.(*GetFriendRequestByApplicantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Friend_ServiceDesc is the grpc.ServiceDesc for Friend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Friend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.im_cloud.friend.v2.Friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _Friend_AddFriend_Handler,
		},
		{
			MethodName: "ProcessFriendApplication",
			Handler:    _Friend_ProcessFriendApplication_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Friend_DeleteFriend_Handler,
		},
		{
			MethodName: "DeleteAllFriends",
			Handler:    _Friend_DeleteAllFriends_Handler,
		},
		{
			MethodName: "SetFriendInfo",
			Handler:    _Friend_SetFriendInfo_Handler,
		},
		{
			MethodName: "ListFriend",
			Handler:    _Friend_ListFriend_Handler,
		},
		{
			MethodName: "ListFriendByIds",
			Handler:    _Friend_ListFriendByIds_Handler,
		},
		{
			MethodName: "FriendApplyList",
			Handler:    _Friend_FriendApplyList_Handler,
		},
		{
			MethodName: "Blacklist",
			Handler:    _Friend_Blacklist_Handler,
		},
		{
			MethodName: "GetFriendIDs",
			Handler:    _Friend_GetFriendIDs_Handler,
		},
		{
			MethodName: "AddBlack",
			Handler:    _Friend_AddBlack_Handler,
		},
		{
			MethodName: "RemoveBlackList",
			Handler:    _Friend_RemoveBlackList_Handler,
		},
		{
			MethodName: "IsFriend",
			Handler:    _Friend_IsFriend_Handler,
		},
		{
			MethodName: "IsBlack",
			Handler:    _Friend_IsBlack_Handler,
		},
		{
			MethodName: "GetSendFriendsApply",
			Handler:    _Friend_GetSendFriendsApply_Handler,
		},
		{
			MethodName: "GetReceiveFriendsApply",
			Handler:    _Friend_GetReceiveFriendsApply_Handler,
		},
		{
			MethodName: "GetUntreatedFriendsApplyReceive",
			Handler:    _Friend_GetUntreatedFriendsApplyReceive_Handler,
		},
		{
			MethodName: "GetFriendRequestByApplicant",
			Handler:    _Friend_GetFriendRequestByApplicant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im_cloud/friend/v2/friend.proto",
}
