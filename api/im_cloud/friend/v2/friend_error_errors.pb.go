// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v2

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 获取好友信息失败
func IsGetFriendInfoFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_FRIEND_INFO_FAIL.String() && e.Code == 410
}

// 获取好友信息失败
func ErrorGetFriendInfoFail(format string, args ...interface{}) *errors.Error {
	return errors.New(410, FriendErrorReason_GET_FRIEND_INFO_FAIL.String(), fmt.Sprintf(format, args...))
}

// 删除好友数据失败
func IsDelFriendRelationDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_DEL_FRIEND_RELATION_DATA_FAIL.String() && e.Code == 420
}

// 删除好友数据失败
func ErrorDelFriendRelationDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(420, FriendErrorReason_DEL_FRIEND_RELATION_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 创建好友关系数据失败
func IsCreateFriendDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_CREATE_FRIEND_DATA_FAIL.String() && e.Code == 440
}

// 创建好友关系数据失败
func ErrorCreateFriendDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(440, FriendErrorReason_CREATE_FRIEND_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 更新好友关系信息失败
func IsUpdateFriendRelationDataFAIl(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_UPDATE_FRIEND_RELATION_DATA_FAIl.String() && e.Code == 445
}

// 更新好友关系信息失败
func ErrorUpdateFriendRelationDataFAIl(format string, args ...interface{}) *errors.Error {
	return errors.New(445, FriendErrorReason_UPDATE_FRIEND_RELATION_DATA_FAIl.String(), fmt.Sprintf(format, args...))
}

// 删除好友缓存数据失败
func IsDelFriendCacheDataFAIl(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_DEL_FRIEND_CACHE_DATA_FAIl.String() && e.Code == 421
}

// 删除好友缓存数据失败
func ErrorDelFriendCacheDataFAIl(format string, args ...interface{}) *errors.Error {
	return errors.New(421, FriendErrorReason_DEL_FRIEND_CACHE_DATA_FAIl.String(), fmt.Sprintf(format, args...))
}

// 获取好友请求数据失败
func IsGetFriendApplyDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_FRIEND_APPLY_DATA_FAIL.String() && e.Code == 415
}

// 获取好友请求数据失败
func ErrorGetFriendApplyDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(415, FriendErrorReason_GET_FRIEND_APPLY_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取用户黑名单数据失败
func IsGetUserBlacklistinfoFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_USER_BLACKLISTINFO_FAIL.String() && e.Code == 417
}

// 获取用户黑名单数据失败
func ErrorGetUserBlacklistinfoFail(format string, args ...interface{}) *errors.Error {
	return errors.New(417, FriendErrorReason_GET_USER_BLACKLISTINFO_FAIL.String(), fmt.Sprintf(format, args...))
}

// 移除用户黑名单数据失败
func IsRemoveUserBlackDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_REMOVE_USER_BLACK_DATA_FAIL.String() && e.Code == 425
}

// 移除用户黑名单数据失败
func ErrorRemoveUserBlackDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(425, FriendErrorReason_REMOVE_USER_BLACK_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 创建黑名单数据失败
func IsCreateBlackDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_CREATE_BLACK_DATA_FAIL.String() && e.Code == 449
}

// 创建黑名单数据失败
func ErrorCreateBlackDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(449, FriendErrorReason_CREATE_BLACK_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取可邀请好友数据失败
func IsGetInvitableFriendDataFAIl(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_INVITABLE_FRIEND_DATA_FAIl.String() && e.Code == 418
}

// 获取可邀请好友数据失败
func ErrorGetInvitableFriendDataFAIl(format string, args ...interface{}) *errors.Error {
	return errors.New(418, FriendErrorReason_GET_INVITABLE_FRIEND_DATA_FAIl.String(), fmt.Sprintf(format, args...))
}

// 获取好友申请请求数据失败
func IsGetFriendApplyRequestDataFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_FRIEND_APPLY_REQUEST_DATA_FAIL.String() && e.Code == 433
}

// 获取好友申请请求数据失败
func ErrorGetFriendApplyRequestDataFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_GET_FRIEND_APPLY_REQUEST_DATA_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取所有的id信息失败
func IsGetAllFriendIdFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_ALL_FRIEND_ID_FAIL.String() && e.Code == 433
}

// 获取所有的id信息失败
func ErrorGetAllFriendIdFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_GET_ALL_FRIEND_ID_FAIL.String(), fmt.Sprintf(format, args...))
}

// 根据好友id获取好友信息失败
func IsGetFriendByIdsFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_FRIEND_BY_IDS_FAIL.String() && e.Code == 433
}

// 根据好友id获取好友信息失败
func ErrorGetFriendByIdsFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_GET_FRIEND_BY_IDS_FAIL.String(), fmt.Sprintf(format, args...))
}

// 获取所有未处理的数据
func IsGetUntreatedFriendsApplyReceiveFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_UNTREATED_FRIENDS_APPLY_RECEIVE_FAIL.String() && e.Code == 433
}

// 获取所有未处理的数据
func ErrorGetUntreatedFriendsApplyReceiveFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_GET_UNTREATED_FRIENDS_APPLY_RECEIVE_FAIL.String(), fmt.Sprintf(format, args...))
}

// 好友不存在
func IsFriendNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_FRIEND_NOT_EXIST.String() && e.Code == 450
}

// 好友不存在
func ErrorFriendNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(450, FriendErrorReason_FRIEND_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 关闭名片添加
func IsUserCloseCardAdd(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_USER_CLOSE_CARD_ADD.String() && e.Code == 400
}

// 关闭名片添加
func ErrorUserCloseCardAdd(format string, args ...interface{}) *errors.Error {
	return errors.New(400, FriendErrorReason_USER_CLOSE_CARD_ADD.String(), fmt.Sprintf(format, args...))
}

// 关闭群添加
func IsUserCloseGroupAdd(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_USER_CLOSE_GROUP_ADD.String() && e.Code == 400
}

// 关闭群添加
func ErrorUserCloseGroupAdd(format string, args ...interface{}) *errors.Error {
	return errors.New(400, FriendErrorReason_USER_CLOSE_GROUP_ADD.String(), fmt.Sprintf(format, args...))
}

// 关闭id添加
func IsUserCloseIdAdd(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_USER_CLOSE_ID_ADD.String() && e.Code == 400
}

// 关闭id添加
func ErrorUserCloseIdAdd(format string, args ...interface{}) *errors.Error {
	return errors.New(400, FriendErrorReason_USER_CLOSE_ID_ADD.String(), fmt.Sprintf(format, args...))
}

// 关闭手机号添加
func IsUserClosePhoneAdd(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_USER_CLOSE_PHONE_ADD.String() && e.Code == 400
}

// 关闭手机号添加
func ErrorUserClosePhoneAdd(format string, args ...interface{}) *errors.Error {
	return errors.New(400, FriendErrorReason_USER_CLOSE_PHONE_ADD.String(), fmt.Sprintf(format, args...))
}

// 关闭二维码添加
func IsUserCloseRqCodeAdd(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_USER_CLOSE_RQ_CODE_ADD.String() && e.Code == 400
}

// 关闭二维码添加
func ErrorUserCloseRqCodeAdd(format string, args ...interface{}) *errors.Error {
	return errors.New(400, FriendErrorReason_USER_CLOSE_RQ_CODE_ADD.String(), fmt.Sprintf(format, args...))
}

// 未知的来源类型
func IsUnknownSourceType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_UNKNOWN_SOURCE_TYPE.String() && e.Code == 400
}

// 未知的来源类型
func ErrorUnknownSourceType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, FriendErrorReason_UNKNOWN_SOURCE_TYPE.String(), fmt.Sprintf(format, args...))
}

// 根据被拉黑人id获取被拉黑人信息失败
func IsGetFriendBlacklistByIdFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_FRIEND_BLACKLIST_BY_ID_FAIL.String() && e.Code == 433
}

// 根据被拉黑人id获取被拉黑人信息失败
func ErrorGetFriendBlacklistByIdFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_GET_FRIEND_BLACKLIST_BY_ID_FAIL.String(), fmt.Sprintf(format, args...))
}

// 根据申请人id获取申请人信息失败
func IsFriendApplyListByIdFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_FRIEND_APPLY_LIST_BY_ID_FAIL.String() && e.Code == 433
}

// 根据申请人id获取申请人信息失败
func ErrorFriendApplyListByIdFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_FRIEND_APPLY_LIST_BY_ID_FAIL.String(), fmt.Sprintf(format, args...))
}

// 根据好友id获取主动发出去的好友申请信息
func IsGetApplyFriendsFromByIdFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FriendErrorReason_GET_APPLY_FRIENDS_FROM_BY_ID_FAIL.String() && e.Code == 433
}

// 根据好友id获取主动发出去的好友申请信息
func ErrorGetApplyFriendsFromByIdFail(format string, args ...interface{}) *errors.Error {
	return errors.New(433, FriendErrorReason_GET_APPLY_FRIENDS_FROM_BY_ID_FAIL.String(), fmt.Sprintf(format, args...))
}
